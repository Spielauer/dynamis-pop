//LABEL(ImmigrationFromScratch, EN) Immigration from Scratch (Synthetic Persons)

/* NOTE(ImmigrationFromScratch, EN)
This module implements immigration from scratch. This are immigrants who are simulated synthetically from birth without corresponding starting population information. 
*/

//EN Potential immigrant mothers
actor_set Person asPotentialImmigrantMothers[integer_age][year_of_first_immigration][geo]
    filter is_alive && sex == FEMALE && creation_type == CT_SCRATCH && !ever_resident
    && family_role != FR_CHILD && ever_union;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Parameters
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

parameters
{
    logical ModelImmigrationFromScratch;                            //EN Model immigrants from scratch
    
    double  NumberImmigrantsFromScratch[SIM_YEAR_RANGE][SEX];       //EN Number of immigrants
    cumrate	AgeImmigrantsScratch[SEX][AGE_RANGE];                   //EN Age distribution of immigrants
    cumrate ImmiScratchDestination[SEX][AGE_MIG][GEO_NAT];          //EN Destination of immigrants

    cumrate AgeOfImmigrantMother[FERTILE_AGE_RANGE];                //EN Age distribution of mothers at birth
    double  AgeImmiSearchMother;                                    //EN Age up to which immigrants search for mother
};

parameter_group PG04_ImmigrationScratch                             //EN Immigration immigrants created from scratch
{
    ModelImmigrationFromScratch,
    NumberImmigrantsFromScratch,
    AgeImmigrantsScratch,
    ImmiScratchDestination,
    AgeOfImmigrantMother,
    AgeImmiSearchMother
};

parameter_group PG04_Immigration                                    //EN Immigration
{
    PG04_ImmigrationScratch,
    PG04_ImmigrationPool,
    PG04_BackMigration
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actor states and functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

actor Person
{
    //EN Year of first immigration
    SIM_YEAR_RANGE year_of_first_immigration = COERCE(SIM_YEAR_RANGE,int(time_of_first_immigration));

    //EN Try to find a mother in foreign population scheduled to arrive in the same year
    void FindImmigrantMother();

    //EN Set sex, time of birth and geo of birth (called in start function)
    void SetGeobirthTimeofbirthCtScratch();                   

    //EN Impute missing characteristics at moment before first entering country
    void ImputeCharacteristicsAtFirstImmigrationScratch(GEO_NAT cGeoDestination);

    //EN First immigration of immigrants from scratch
    event timeFirstImmigrationFromScratchEvent, FirstImmigrationFromScratchEvent;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Implementation
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Person::ImputeCharacteristicsAtFirstImmigrationScratch(GEO_NAT cGeoDestination)
{
    ethnicity = GetImmigrantsScratchEthnicity(cGeoDestination);
}

void Person::SetGeobirthTimeofbirthCtScratch()
{
    int nAgeAtImmigration;
    Lookup_AgeImmigrantsScratch(RandUniform(14), sex, &nAgeAtImmigration);
    time_of_birth = time_of_first_immigration - nAgeAtImmigration - RandUniform(5);
    
    // TODO if more places of origin
    geo_birth = (GEO)int(SIZE(GEO_NAT) + int(RandUniform(8) * (SIZE(GEO) - SIZE(GEO_NAT))));
}

TIME Person::timeFirstImmigrationFromScratchEvent()
{
    if (!ever_resident && creation_type == CT_SCRATCH && family_role == FR_HEAD)
    {
        return time_of_first_immigration;
    }
    else return TIME_INFINITE;
}


//TIME Person::timeFirstImmigrationFromScratchForgottenEvent()
//{
//    if (!ever_resident && creation_type == CT_SCRATCH )
//    {
//        if (calendar_year > time_of_first_immigration) return WAIT(0);
//        else return TIME_INFINITE;
//    }
//    else return TIME_INFINITE;
//}
//
//void Person::FirstImmigrationFromScratchForgottenEvent()
//{
//    Person_ptr prSp = lSpouse;
//    int stoph = 1;
//    
//
//
//}

void Person::FirstImmigrationFromScratchEvent()
{
    // Sample a destination
    int nGeo = 0; Lookup_ImmiScratchDestination(RandUniform(24),sex, age_mig, &nGeo);

    // Go Yourself
    ImputeCharacteristicsAtFirstImmigrationScratch((GEO_NAT)nGeo);
    doResidentialMove((GEO)nGeo);

    // Take your family
    if (lSpouse)
    {
        lSpouse->ImputeCharacteristicsAtFirstImmigrationScratch((GEO_NAT)nGeo);
        lSpouse->doResidentialMove((GEO)nGeo);
    }
    if (children_in_household > 0)
    {
        int nIndex;
        auto prChild = (sex == FEMALE) ? mlHHMotherChildren->GetNext(0, &nIndex) : mlHHFatherChildren->GetNext(0, &nIndex);
        while (prChild)
        {
            prChild->ImputeCharacteristicsAtFirstImmigrationScratch((GEO_NAT)nGeo);
            prChild->doResidentialMove((GEO)nGeo);
            // set pointer to next child
            prChild = (sex == FEMALE) ? mlHHMotherChildren->GetNext(nIndex + 1, &nIndex) : mlHHFatherChildren->GetNext(nIndex + 1, &nIndex);
        }
    }
}

void Person::FindImmigrantMother()
{
    if (time_of_first_immigration - time_of_birth < AgeImmiSearchMother)
    {
        int nAge;
        int nCount = 0;
        bool bFound = FALSE;
        while (!bFound && nCount < 100)
        {
            Lookup_AgeOfImmigrantMother(RandUniform(26), &nAge);
            nAge = nAge + MIN(FERTILE_AGE_RANGE);
            if (asPotentialImmigrantMothers[nAge][RANGE_POS(SIM_YEAR_RANGE, year_of_first_immigration)][geo_birth]->Count() > 0) bFound = TRUE;
            nCount++;
        }
        if (bFound)
        {
            auto prMother = asPotentialImmigrantMothers[nAge][RANGE_POS(SIM_YEAR_RANGE, year_of_first_immigration)][geo_birth]->Item(RandUniform(40));
            lBioMother = prMother;
            lHHMother = prMother;
            lHHMother->doIncreaseParity();
            mother_age_at_birth = lBioMother->age;
        }
    }
}

