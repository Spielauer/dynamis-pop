/**
 * Declarations for model 'Dynamis-Pop-3-06-ABC' - Generated by openM++ compiler
 *  
 *  Model version = 1.0.1.0
 *  Model created = 2021-03-17 14:19:34.883
 *  Model digest = 6eccce191106d267b262a54392186270
 */

#pragma once

// PreSimulation, PostSimulation, UserTables functions in model source code
extern void om_PreSimulation_0();
extern void om_PreSimulation_1();
extern void om_PreSimulation_2();
extern void om_PreSimulation_3();
extern void om_PreSimulation_4();

// model aggregations

/** Helper map to implement the aggregation from ETHNICITY to ETHNICITY_SHORT */
extern const std::map<ETHNICITY, ETHNICITY_SHORT> om_aggregation_ETHNICITY_om_ETHNICITY_SHORT;

/** Helper map to implement the aggregation from GEO to BIRTH1_LOC */
extern const std::map<GEO, BIRTH1_LOC> om_aggregation_GEO_om_BIRTH1_LOC;
/** Map an enumerator in GEO to the corresponding enumerator in BIRTH1_LOC */
BIRTH1_LOC GEO_To_BIRTH1_LOC(GEO level);

/** Helper map to implement the aggregation from GEO to GEO_NAT */
extern const std::map<GEO, GEO_NAT> om_aggregation_GEO_om_GEO_NAT;

/** Helper map to implement the aggregation from GEO to REGION_INT */
extern const std::map<GEO, REGION_INT> om_aggregation_GEO_om_REGION_INT;

/** Helper map to implement the aggregation from REGION_INT to REGION_NAT */
extern const std::map<REGION_INT, REGION_NAT> om_aggregation_REGION_INT_om_REGION_NAT;

// model scenario parameters

#ifdef OM_DEBUG_PARAMETERS

extern thread_local const double & AgeImmiSearchMother;
extern thread_local const double (& AgeImmigrantsScratch)[2][101];
extern thread_local const double & AgeLeavingHome;
extern thread_local const double (& AgeOfImmigrantMother)[38];
extern thread_local const double (& AgeSpecificFertility)[38][151];
extern thread_local const double & BackMigrationHazard;
extern thread_local const double (& BirthTrends)[15][151];
extern thread_local const double (& ChildMortalityBaseRisk)[5][2];
extern thread_local const double (& ChildMortalityRelativeRisks)[5][9];
extern thread_local const double (& ChildMortalityTrend)[5][146];
extern thread_local const double (& ChildVaccinationOdds)[2][151][18];
extern thread_local const int & Educ1FirstCohortRefinedModel;
extern thread_local const double (& Educ1GradOdds)[3][2];
extern thread_local const double (& Educ1Infrastructure)[2][12][151];
extern thread_local const char & Educ1Model;
extern thread_local const double (& Educ1StartOdds)[3][2];
extern thread_local const int & Educ2AllowedDelays;
extern thread_local const double (& Educ2DelayedProgressionIntake)[1][1][6][151];
extern thread_local const double (& Educ2DelayedRepetitionIntake)[1][1][6][151];
extern thread_local const double (& Educ2DirectProgressionIntake)[1][1][6][151];
extern thread_local const double (& Educ2DirectRepetitionIntake)[1][1][6][151];
extern thread_local const double (& Educ2PeriodSuccess)[1][1][6][151];
extern thread_local const double (& EducOneDropoutGrade)[1][1][67][6];
extern thread_local const double (& EducOneEntryAge)[1][1][67][4];
extern thread_local const double (& EducTrans1)[2][63][13];
extern thread_local const double (& EducTrans2)[2][67][13];
extern thread_local const double (& EmigrationDestination)[1];
extern thread_local const double (& EmigrationRatesDistrict)[2][13][12];
extern thread_local const double & EndSchoolOneYear;
extern thread_local const double (& EthnicTransmission)[2][10][10];
extern thread_local const double (& EthnicityImmigrantsScratch)[2][12][10];
extern thread_local const char & FertilityModel;
extern thread_local const double (& FirstBirthRates)[3][2][38][5];
extern thread_local const double (& HCICoefficients)[3];
extern thread_local const double (& HigherOrderBirthsPara)[11][14];
extern thread_local const double (& ImmiPoolDestination)[3][151][12];
extern thread_local const double (& ImmiPoolSize)[3][151];
extern thread_local const double (& ImmiScratchDestination)[2][13][12];
extern thread_local const double (& InUnionProbNoChildren)[51][3];
extern thread_local const double (& InUnionProbWithChildren)[3][7][6];
extern thread_local const double (& LifeExpectancy)[151][2];
extern thread_local const std::string & MicroDataInputFile;
extern thread_local const double (& MigrationDestination)[2][12][13][12];
extern thread_local const double (& MigrationProbability)[2][13][12];
extern thread_local const bool & MigrationTryKeepingFamiliesTogether;
extern thread_local const bool & ModelBackmigration;
extern thread_local const bool & ModelEmigration;
extern thread_local const bool & ModelImmigrationFromPools;
extern thread_local const bool & ModelImmigrationFromScratch;
extern thread_local const bool & ModelMigration;
extern thread_local const char & MortalityModel;
extern thread_local const double (& MortalityTable)[101][2];
extern thread_local const double (& NumberImmigrantsFromScratch)[151][2];
extern thread_local const double (& PartnerAgeDistribution)[51][86];
extern thread_local const double (& PartnerCharacteristicDistribution)[3][3];
extern thread_local const double (& PreNatalCareOdds)[151][11];
extern thread_local const double (& PreSchoolAttendance)[2][5][151][2];
extern thread_local const double & ProbStayWithMother;
extern thread_local const double (& ProportionStunting)[2][5][3];
extern thread_local const double (& SchoolOneInterruptionRate)[1][1][151];
extern thread_local const double (& SchoolOneRepetitionRate)[1][1][151];
extern thread_local const double (& SchoolQuality)[5][2];
extern thread_local const double (& SexRatio)[151];
extern thread_local const double & SimulationEnd;
extern thread_local const int & SimulationSeed;
extern thread_local const double & StartPopSampleSize;
extern thread_local const double & StartSchoolOneYear;
extern thread_local const double (& TotalFertilityRate)[151];
extern thread_local const char & Union1Choice;
extern thread_local const double (& Union1ParametersCMN)[3][87][3];
extern thread_local const double (& Union1ParametersHazards)[3][51][252];

#else // OM_DEBUG_PARAMETERS

extern thread_local const double & AgeImmiSearchMother;
extern thread_local double * om_value_AgeImmigrantsScratch;
#define AgeImmigrantsScratch (*reinterpret_cast<const double(*)[2][101]>(om_value_AgeImmigrantsScratch))
extern thread_local const double & AgeLeavingHome;
extern thread_local double * om_value_AgeOfImmigrantMother;
#define AgeOfImmigrantMother (*reinterpret_cast<const double(*)[38]>(om_value_AgeOfImmigrantMother))
extern thread_local double * om_value_AgeSpecificFertility;
#define AgeSpecificFertility (*reinterpret_cast<const double(*)[38][151]>(om_value_AgeSpecificFertility))
extern thread_local const double & BackMigrationHazard;
extern thread_local double * om_value_BirthTrends;
#define BirthTrends (*reinterpret_cast<const double(*)[15][151]>(om_value_BirthTrends))
extern thread_local double * om_value_ChildMortalityBaseRisk;
#define ChildMortalityBaseRisk (*reinterpret_cast<const double(*)[5][2]>(om_value_ChildMortalityBaseRisk))
extern thread_local double * om_value_ChildMortalityRelativeRisks;
#define ChildMortalityRelativeRisks (*reinterpret_cast<const double(*)[5][9]>(om_value_ChildMortalityRelativeRisks))
extern thread_local double * om_value_ChildMortalityTrend;
#define ChildMortalityTrend (*reinterpret_cast<const double(*)[5][146]>(om_value_ChildMortalityTrend))
extern thread_local double * om_value_ChildVaccinationOdds;
#define ChildVaccinationOdds (*reinterpret_cast<const double(*)[2][151][18]>(om_value_ChildVaccinationOdds))
extern thread_local const int & Educ1FirstCohortRefinedModel;
extern thread_local double * om_value_Educ1GradOdds;
#define Educ1GradOdds (*reinterpret_cast<const double(*)[3][2]>(om_value_Educ1GradOdds))
extern thread_local double * om_value_Educ1Infrastructure;
#define Educ1Infrastructure (*reinterpret_cast<const double(*)[2][12][151]>(om_value_Educ1Infrastructure))
extern thread_local const char & Educ1Model;
extern thread_local double * om_value_Educ1StartOdds;
#define Educ1StartOdds (*reinterpret_cast<const double(*)[3][2]>(om_value_Educ1StartOdds))
extern thread_local const int & Educ2AllowedDelays;
extern thread_local double * om_value_Educ2DelayedProgressionIntake;
#define Educ2DelayedProgressionIntake (*reinterpret_cast<const double(*)[1][1][6][151]>(om_value_Educ2DelayedProgressionIntake))
extern thread_local double * om_value_Educ2DelayedRepetitionIntake;
#define Educ2DelayedRepetitionIntake (*reinterpret_cast<const double(*)[1][1][6][151]>(om_value_Educ2DelayedRepetitionIntake))
extern thread_local double * om_value_Educ2DirectProgressionIntake;
#define Educ2DirectProgressionIntake (*reinterpret_cast<const double(*)[1][1][6][151]>(om_value_Educ2DirectProgressionIntake))
extern thread_local double * om_value_Educ2DirectRepetitionIntake;
#define Educ2DirectRepetitionIntake (*reinterpret_cast<const double(*)[1][1][6][151]>(om_value_Educ2DirectRepetitionIntake))
extern thread_local double * om_value_Educ2PeriodSuccess;
#define Educ2PeriodSuccess (*reinterpret_cast<const double(*)[1][1][6][151]>(om_value_Educ2PeriodSuccess))
extern thread_local double * om_value_EducOneDropoutGrade;
#define EducOneDropoutGrade (*reinterpret_cast<const double(*)[1][1][67][6]>(om_value_EducOneDropoutGrade))
extern thread_local double * om_value_EducOneEntryAge;
#define EducOneEntryAge (*reinterpret_cast<const double(*)[1][1][67][4]>(om_value_EducOneEntryAge))
extern thread_local double * om_value_EducTrans1;
#define EducTrans1 (*reinterpret_cast<const double(*)[2][63][13]>(om_value_EducTrans1))
extern thread_local double * om_value_EducTrans2;
#define EducTrans2 (*reinterpret_cast<const double(*)[2][67][13]>(om_value_EducTrans2))
extern thread_local double * om_value_EmigrationDestination;
#define EmigrationDestination (*reinterpret_cast<const double(*)[1]>(om_value_EmigrationDestination))
extern thread_local double * om_value_EmigrationRatesDistrict;
#define EmigrationRatesDistrict (*reinterpret_cast<const double(*)[2][13][12]>(om_value_EmigrationRatesDistrict))
extern thread_local const double & EndSchoolOneYear;
extern thread_local double * om_value_EthnicTransmission;
#define EthnicTransmission (*reinterpret_cast<const double(*)[2][10][10]>(om_value_EthnicTransmission))
extern thread_local double * om_value_EthnicityImmigrantsScratch;
#define EthnicityImmigrantsScratch (*reinterpret_cast<const double(*)[2][12][10]>(om_value_EthnicityImmigrantsScratch))
extern thread_local const char & FertilityModel;
extern thread_local double * om_value_FirstBirthRates;
#define FirstBirthRates (*reinterpret_cast<const double(*)[3][2][38][5]>(om_value_FirstBirthRates))
extern thread_local double * om_value_HCICoefficients;
#define HCICoefficients (*reinterpret_cast<const double(*)[3]>(om_value_HCICoefficients))
extern thread_local double * om_value_HigherOrderBirthsPara;
#define HigherOrderBirthsPara (*reinterpret_cast<const double(*)[11][14]>(om_value_HigherOrderBirthsPara))
extern thread_local double * om_value_ImmiPoolDestination;
#define ImmiPoolDestination (*reinterpret_cast<const double(*)[3][151][12]>(om_value_ImmiPoolDestination))
extern thread_local double * om_value_ImmiPoolSize;
#define ImmiPoolSize (*reinterpret_cast<const double(*)[3][151]>(om_value_ImmiPoolSize))
extern thread_local double * om_value_ImmiScratchDestination;
#define ImmiScratchDestination (*reinterpret_cast<const double(*)[2][13][12]>(om_value_ImmiScratchDestination))
extern thread_local double * om_value_InUnionProbNoChildren;
#define InUnionProbNoChildren (*reinterpret_cast<const double(*)[51][3]>(om_value_InUnionProbNoChildren))
extern thread_local double * om_value_InUnionProbWithChildren;
#define InUnionProbWithChildren (*reinterpret_cast<const double(*)[3][7][6]>(om_value_InUnionProbWithChildren))
extern thread_local double * om_value_LifeExpectancy;
#define LifeExpectancy (*reinterpret_cast<const double(*)[151][2]>(om_value_LifeExpectancy))
extern thread_local const std::string & MicroDataInputFile;
extern thread_local double * om_value_MigrationDestination;
#define MigrationDestination (*reinterpret_cast<const double(*)[2][12][13][12]>(om_value_MigrationDestination))
extern thread_local double * om_value_MigrationProbability;
#define MigrationProbability (*reinterpret_cast<const double(*)[2][13][12]>(om_value_MigrationProbability))
extern thread_local const bool & MigrationTryKeepingFamiliesTogether;
extern thread_local const bool & ModelBackmigration;
extern thread_local const bool & ModelEmigration;
extern thread_local const bool & ModelImmigrationFromPools;
extern thread_local const bool & ModelImmigrationFromScratch;
extern thread_local const bool & ModelMigration;
extern thread_local const char & MortalityModel;
extern thread_local double * om_value_MortalityTable;
#define MortalityTable (*reinterpret_cast<const double(*)[101][2]>(om_value_MortalityTable))
extern thread_local double * om_value_NumberImmigrantsFromScratch;
#define NumberImmigrantsFromScratch (*reinterpret_cast<const double(*)[151][2]>(om_value_NumberImmigrantsFromScratch))
extern thread_local double * om_value_PartnerAgeDistribution;
#define PartnerAgeDistribution (*reinterpret_cast<const double(*)[51][86]>(om_value_PartnerAgeDistribution))
extern thread_local double * om_value_PartnerCharacteristicDistribution;
#define PartnerCharacteristicDistribution (*reinterpret_cast<const double(*)[3][3]>(om_value_PartnerCharacteristicDistribution))
extern thread_local double * om_value_PreNatalCareOdds;
#define PreNatalCareOdds (*reinterpret_cast<const double(*)[151][11]>(om_value_PreNatalCareOdds))
extern thread_local double * om_value_PreSchoolAttendance;
#define PreSchoolAttendance (*reinterpret_cast<const double(*)[2][5][151][2]>(om_value_PreSchoolAttendance))
extern thread_local const double & ProbStayWithMother;
extern thread_local double * om_value_ProportionStunting;
#define ProportionStunting (*reinterpret_cast<const double(*)[2][5][3]>(om_value_ProportionStunting))
extern thread_local double * om_value_SchoolOneInterruptionRate;
#define SchoolOneInterruptionRate (*reinterpret_cast<const double(*)[1][1][151]>(om_value_SchoolOneInterruptionRate))
extern thread_local double * om_value_SchoolOneRepetitionRate;
#define SchoolOneRepetitionRate (*reinterpret_cast<const double(*)[1][1][151]>(om_value_SchoolOneRepetitionRate))
extern thread_local double * om_value_SchoolQuality;
#define SchoolQuality (*reinterpret_cast<const double(*)[5][2]>(om_value_SchoolQuality))
extern thread_local double * om_value_SexRatio;
#define SexRatio (*reinterpret_cast<const double(*)[151]>(om_value_SexRatio))
extern thread_local const double & SimulationEnd;
extern thread_local const int & SimulationSeed;
extern thread_local const double & StartPopSampleSize;
extern thread_local const double & StartSchoolOneYear;
extern thread_local double * om_value_TotalFertilityRate;
#define TotalFertilityRate (*reinterpret_cast<const double(*)[151]>(om_value_TotalFertilityRate))
extern thread_local const char & Union1Choice;
extern thread_local double * om_value_Union1ParametersCMN;
#define Union1ParametersCMN (*reinterpret_cast<const double(*)[3][87][3]>(om_value_Union1ParametersCMN))
extern thread_local double * om_value_Union1ParametersHazards;
#define Union1ParametersHazards (*reinterpret_cast<const double(*)[3][51][252]>(om_value_Union1ParametersHazards))

#endif // OM_DEBUG_PARAMETERS

// model parameters (fixed, derived, missing)

extern thread_local double AgeSpecificFertilityRate[38][151];
extern thread_local double EndSchoolTwoYear;
extern thread_local long MicroDataInputFileSize;
extern thread_local double MortalityTrend[151][2];
extern thread_local double ScalingFactor;
extern thread_local double StartSchoolTwoYear;
extern thread_local double Union1FormationHazard[3][252][51];

/** Draw from discrete probability distribution - AgeImmigrantsScratch */
bool Lookup_AgeImmigrantsScratch(double uniform, int cond0, int * draw0);

/** Draw from discrete probability distribution - AgeOfImmigrantMother */
bool Lookup_AgeOfImmigrantMother(double uniform, int * draw0);

/** Draw from discrete probability distribution - EducOneDropoutGrade */
bool Lookup_EducOneDropoutGrade(double uniform, int cond0, int cond1, int cond2, int * draw0);

/** Draw from discrete probability distribution - EducOneEntryAge */
bool Lookup_EducOneEntryAge(double uniform, int cond0, int cond1, int cond2, int * draw0);

/** Draw from discrete probability distribution - EmigrationDestination */
bool Lookup_EmigrationDestination(double uniform, int * draw0);

/** Draw from discrete probability distribution - EthnicTransmission */
bool Lookup_EthnicTransmission(double uniform, int cond0, int cond1, int * draw0);

/** Draw from discrete probability distribution - EthnicityImmigrantsScratch */
bool Lookup_EthnicityImmigrantsScratch(double uniform, int cond0, int cond1, int * draw0);

/** Draw from discrete probability distribution - ImmiPoolDestination */
bool Lookup_ImmiPoolDestination(double uniform, int cond0, int cond1, int * draw0);

/** Draw from discrete probability distribution - ImmiScratchDestination */
bool Lookup_ImmiScratchDestination(double uniform, int cond0, int cond1, int * draw0);

/** Draw from discrete probability distribution - MigrationDestination */
bool Lookup_MigrationDestination(double uniform, int cond0, int cond1, int cond2, int * draw0);

/** Draw from discrete probability distribution - PartnerCharacteristicDistribution */
bool Lookup_PartnerCharacteristicDistribution(double uniform, int cond0, int * draw0);


// entity tables
class cls_PopPyramidByEduc final : public EntityTable<4, 5733, 3, 3>
{
public:
    cls_PopPyramidByEduc(std::initializer_list<int> shape) : EntityTable<4, 5733, 3, 3>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_PopPyramidByEduc PopPyramidByEduc;
extern thread_local PopPyramidByEduc * thePopPyramidByEduc;

class cls_TabChildVaccination final : public EntityTable<2, 906, 1, 2>
{
public:
    cls_TabChildVaccination(std::initializer_list<int> shape) : EntityTable<2, 906, 1, 2>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabChildVaccination TabChildVaccination;
extern thread_local TabChildVaccination * theTabChildVaccination;

class cls_TabEduc15ByDistrict final : public EntityTable<3, 5889, 3, 4>
{
public:
    cls_TabEduc15ByDistrict(std::initializer_list<int> shape) : EntityTable<3, 5889, 3, 4>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabEduc15ByDistrict TabEduc15ByDistrict;
extern thread_local TabEduc15ByDistrict * theTabEduc15ByDistrict;

class cls_TabEduc15ByDistrictBirth final : public EntityTable<3, 6342, 3, 4>
{
public:
    cls_TabEduc15ByDistrictBirth(std::initializer_list<int> shape) : EntityTable<3, 6342, 3, 4>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabEduc15ByDistrictBirth TabEduc15ByDistrictBirth;
extern thread_local TabEduc15ByDistrictBirth * theTabEduc15ByDistrictBirth;

class cls_TabEducFateByGroup final : public EntityTable<3, 2416, 1, 1>
{
public:
    cls_TabEducFateByGroup(std::initializer_list<int> shape) : EntityTable<3, 2416, 1, 1>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabEducFateByGroup TabEducFateByGroup;
extern thread_local TabEducFateByGroup * theTabEducFateByGroup;

class cls_TabEducFateDistrYob final : public EntityTable<3, 6048, 1, 1>
{
public:
    cls_TabEducFateDistrYob(std::initializer_list<int> shape) : EntityTable<3, 6048, 1, 1>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabEducFateDistrYob TabEducFateDistrYob;
extern thread_local TabEducFateDistrYob * theTabEducFateDistrYob;

class cls_TabHCIDistrict final : public EntityTable<3, 5889, 6, 9>
{
public:
    cls_TabHCIDistrict(std::initializer_list<int> shape) : EntityTable<3, 5889, 6, 9>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabHCIDistrict TabHCIDistrict;
extern thread_local TabHCIDistrict * theTabHCIDistrict;

class cls_TabImmunizationChildren final : public EntityTable<6, 260928, 1, 2>
{
public:
    cls_TabImmunizationChildren(std::initializer_list<int> shape) : EntityTable<6, 260928, 1, 2>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabImmunizationChildren TabImmunizationChildren;
extern thread_local TabImmunizationChildren * theTabImmunizationChildren;

class cls_TabPopProvAgeEducSex final : public EntityTable<3, 5889, 5, 5>
{
public:
    cls_TabPopProvAgeEducSex(std::initializer_list<int> shape) : EntityTable<3, 5889, 5, 5>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabPopProvAgeEducSex TabPopProvAgeEducSex;
extern thread_local TabPopProvAgeEducSex * theTabPopProvAgeEducSex;

class cls_TabPrenatCare final : public EntityTable<3, 3624, 1, 2>
{
public:
    cls_TabPrenatCare(std::initializer_list<int> shape) : EntityTable<3, 3624, 1, 2>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabPrenatCare TabPrenatCare;
extern thread_local TabPrenatCare * theTabPrenatCare;

class cls_TabPrimSchoolEntries final : public EntityTable<2, 1963, 1, 1>
{
public:
    cls_TabPrimSchoolEntries(std::initializer_list<int> shape) : EntityTable<2, 1963, 1, 1>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabPrimSchoolEntries TabPrimSchoolEntries;
extern thread_local TabPrimSchoolEntries * theTabPrimSchoolEntries;

class cls_TabPrimSchoolGraduations final : public EntityTable<2, 1963, 1, 1>
{
public:
    cls_TabPrimSchoolGraduations(std::initializer_list<int> shape) : EntityTable<2, 1963, 1, 1>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabPrimSchoolGraduations TabPrimSchoolGraduations;
extern thread_local TabPrimSchoolGraduations * theTabPrimSchoolGraduations;

class cls_TabPrimSchoolOutOfSchool9to11 final : public EntityTable<2, 1963, 1, 2>
{
public:
    cls_TabPrimSchoolOutOfSchool9to11(std::initializer_list<int> shape) : EntityTable<2, 1963, 1, 2>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabPrimSchoolOutOfSchool9to11 TabPrimSchoolOutOfSchool9to11;
extern thread_local TabPrimSchoolOutOfSchool9to11 * theTabPrimSchoolOutOfSchool9to11;

class cls_TabPrimarySchoolPlanning final : public EntityTable<3, 13741, 3, 3>
{
public:
    cls_TabPrimarySchoolPlanning(std::initializer_list<int> shape) : EntityTable<3, 13741, 3, 3>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabPrimarySchoolPlanning TabPrimarySchoolPlanning;
extern thread_local TabPrimarySchoolPlanning * theTabPrimarySchoolPlanning;

class cls_TabSchool2AttainmentsTab final : public EntityTable<2, 453, 3, 4>
{
public:
    cls_TabSchool2AttainmentsTab(std::initializer_list<int> shape) : EntityTable<2, 453, 3, 4>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabSchool2AttainmentsTab TabSchool2AttainmentsTab;
extern thread_local TabSchool2AttainmentsTab * theTabSchool2AttainmentsTab;

class cls_TabSchool2TrackTab final : public EntityTable<2, 1208, 1, 1>
{
public:
    cls_TabSchool2TrackTab(std::initializer_list<int> shape) : EntityTable<2, 1208, 1, 1>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_TabSchool2TrackTab TabSchool2TrackTab;
extern thread_local TabSchool2TrackTab * theTabSchool2TrackTab;

class cls_tabBirthsYearPlace final : public EntityTable<2, 2114, 1, 1>
{
public:
    cls_tabBirthsYearPlace(std::initializer_list<int> shape) : EntityTable<2, 2114, 1, 1>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_tabBirthsYearPlace tabBirthsYearPlace;
extern thread_local tabBirthsYearPlace * thetabBirthsYearPlace;

class cls_tabEducationFateGeobirYob final : public EntityTable<3, 10584, 3, 4>
{
public:
    cls_tabEducationFateGeobirYob(std::initializer_list<int> shape) : EntityTable<3, 10584, 3, 4>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_tabEducationFateGeobirYob tabEducationFateGeobirYob;
extern thread_local tabEducationFateGeobirYob * thetabEducationFateGeobirYob;

class cls_tabHCI final : public EntityTable<3, 2718, 6, 9>
{
public:
    cls_tabHCI(std::initializer_list<int> shape) : EntityTable<3, 2718, 6, 9>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_tabHCI tabHCI;
extern thread_local tabHCI * thetabHCI;

class cls_tabHavingSpouse final : public EntityTable<3, 45753, 2, 3>
{
public:
    cls_tabHavingSpouse(std::initializer_list<int> shape) : EntityTable<3, 45753, 2, 3>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_tabHavingSpouse tabHavingSpouse;
extern thread_local tabHavingSpouse * thetabHavingSpouse;

class cls_tabMigrationOriginDestination final : public EntityTable<3, 910, 1, 1>
{
public:
    cls_tabMigrationOriginDestination(std::initializer_list<int> shape) : EntityTable<3, 910, 1, 1>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_tabMigrationOriginDestination tabMigrationOriginDestination;
extern thread_local tabMigrationOriginDestination * thetabMigrationOriginDestination;

class cls_tabPopulationYearPlace final : public EntityTable<2, 2114, 1, 1>
{
public:
    cls_tabPopulationYearPlace(std::initializer_list<int> shape) : EntityTable<2, 2114, 1, 1>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_tabPopulationYearPlace tabPopulationYearPlace;
extern thread_local tabPopulationYearPlace * thetabPopulationYearPlace;

class cls_tabPreSchool final : public EntityTable<2, 2114, 3, 4>
{
public:
    cls_tabPreSchool(std::initializer_list<int> shape) : EntityTable<2, 2114, 3, 4>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_tabPreSchool tabPreSchool;
extern thread_local tabPreSchool * thetabPreSchool;

class cls_tabStuntingSexRegMotherYob final : public EntityTable<4, 10872, 1, 2>
{
public:
    cls_tabStuntingSexRegMotherYob(std::initializer_list<int> shape) : EntityTable<4, 10872, 1, 2>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_tabStuntingSexRegMotherYob tabStuntingSexRegMotherYob;
extern thread_local tabStuntingSexRegMotherYob * thetabStuntingSexRegMotherYob;

class cls_tabStuntingSexRegYob final : public EntityTable<2, 906, 1, 2>
{
public:
    cls_tabStuntingSexRegYob(std::initializer_list<int> shape) : EntityTable<2, 906, 1, 2>(shape)
    {
    }
    void initialize_accumulators();
    void extract_accumulators();
    void scale_accumulators();
    void compute_expressions();
};
typedef cls_tabStuntingSexRegYob tabStuntingSexRegYob;
extern thread_local tabStuntingSexRegYob * thetabStuntingSexRegYob;

// derived tables

// forward declarations of model agent classes (for links)
class Calibrator;
class Clock;
class Observation;
class Person;
class StartpopValues;

// model agent classes
class Calibrator : public Agent<Calibrator>
{
public:

    //
    // function members in Calibrator agent
    //

    // operator overload for entity comparison based on entity_id
    bool operator< ( Calibrator & rhs )
    {
        return entity_id < rhs.entity_id;
    }

    /** Probability adjustment */
    double AdjustedProbability(double dProb , double dLogOddEduc , double dLogOddAdjust);

    /** Year end */
    void CalibratorYearEnd();

    /** Implement the event ChildMortalityCalibration when it occurs in the Calibrator agent (model code). */
    void ChildMortalityCalibration();

    /** Finishes the Calibrator */
    void Finish();

    /** Idenitify and return next person to emigrate */
    Person_ptr GetNextToEmigrate(Person_ptr prPerson , GEO toGeo);

    /** Identify next person to give birth */
    Person_ptr GetNextToGiveBirth(Person_ptr prPerson);

    /** GetNextToMigrate */
    Person_ptr GetNextToMigrate(Person_ptr prPerson , GEO_NAT cGeoTo);

    /** Set calibration factors at CalibratorYearEnd() */
    void SetEduc1AdjustmentFactors();

    /** Starts the Calibrator */
    void Start();

    /** Age the entity to the given time. */
    void age_agent(Time t);

    /** Evaluate and assign expression for calibrator_year. */
    void calibrator_year_update_identity();

    /** Check that argument is not in past of entity, else throw run-time exception. */
    Time check_time(Time t);

    /** Erase the entity from the active cell in asCalibrator. */
    void om_asCalibrator_erase();

    /** Insert the entity into the active cell in asCalibrator. */
    void om_asCalibrator_insert();

    /** Update the active cell index of table asCalibrator using agentvars in the Calibrator agent. */
    void om_asCalibrator_update_cell();

    /** One-time calculation of the offsets of attributes and increments in the containing entity. */
    void om_assign_member_offsets();

    /** Check that starting value of time is valid and raise run-time error if not. */
    void om_check_starting_time();

    /** Remove the entity in each entity set when it leaves the simulation. */
    void om_finalize_entity_sets();

    /** Remove each event in the entity from the event queue when it leaves the simulation. */
    void om_finalize_events();

    /** Set all links in agent to nullptr when the entity leaves the simulation. */
    void om_finalize_links();

    /** Empty all multilinks in agent when the entity leaves the simulation. */
    void om_finalize_multilinks();

    /** Finish the entity's pending increments in each table when it leaves the simulation. */
    void om_finalize_tables();

    /** Return unique entity_id of this entity. */
    int om_get_entity_id();

    /** Return current time of this entity. */
    Time om_get_time();

    /** Initialization of data members before the entity enters simulation. */
    void om_initialize_data_members();

    /** Initialization of data members of the 'zero' entity to default values for the type (0). */
    void om_initialize_data_members0();

    /** Initialize derived attributes before the entity enters the simulation. */
    void om_initialize_derived_attributes();

    /** Insert the entity in each entity set when it enters the simulation. */
    void om_initialize_entity_sets();

    /** Force event time calculation for each event in the entity when it enters simulation. */
    void om_initialize_events();

    /** Initialize each identity attribute before developer code in Start executes. */
    void om_initialize_identity_attributes();

    /** Initialize the entity's increments in each table when it enters the simulation. */
    void om_initialize_tables();

    /** Initialize time and age for this entity. */
    void om_initialize_time_and_age();

    /** Maintain reciprocal link on erase in multilink mlCalibratorToPerson in agent Calibrator. */
    void om_mlCalibratorToPerson_erase(entity_ptr<Person> lnk);

    /** Maintain reciprocal link on insert in multilink mlCalibratorToPerson in agent Calibrator. */
    void om_mlCalibratorToPerson_insert(entity_ptr<Person> lnk);

    /** Implement side effects of changes in multilink mlCalibratorToPerson in agent Calibrator. */
    void om_mlCalibratorToPerson_side_effects();

    /** Implement notification before changing age in agent Calibrator. */
    void om_notify_age();

    /** Implement notification before changing calibrator_year in agent Calibrator. */
    void om_notify_calibrator_year();

    /** Implement notification before changing case_seed in agent Calibrator. */
    void om_notify_case_seed();

    /** Implement notification before changing emigration_counter in agent Calibrator. */
    void om_notify_emigration_counter();

    /** Implement notification before changing entity_id in agent Calibrator. */
    void om_notify_entity_id();

    /** Implement notification before changing events in agent Calibrator. */
    void om_notify_events();

    /** Implement notification before changing immigration_counter in agent Calibrator. */
    void om_notify_immigration_counter();

    /** Implement notification before changing is_calibrated_child_mortality in agent Calibrator. */
    void om_notify_is_calibrated_child_mortality();

    /** Implement notification before changing lCalibratorToClock in agent Calibrator. */
    void om_notify_lCalibratorToClock();

    /** Implement notification before changing migration_counter in agent Calibrator. */
    void om_notify_migration_counter();

    /** Implement notification before changing mort_female_0 in agent Calibrator. */
    void om_notify_mort_female_0();

    /** Implement notification before changing mort_female_1 in agent Calibrator. */
    void om_notify_mort_female_1();

    /** Implement notification before changing mort_female_2 in agent Calibrator. */
    void om_notify_mort_female_2();

    /** Implement notification before changing mort_female_3 in agent Calibrator. */
    void om_notify_mort_female_3();

    /** Implement notification before changing mort_female_4 in agent Calibrator. */
    void om_notify_mort_female_4();

    /** Implement notification before changing mort_male_0 in agent Calibrator. */
    void om_notify_mort_male_0();

    /** Implement notification before changing mort_male_1 in agent Calibrator. */
    void om_notify_mort_male_1();

    /** Implement notification before changing mort_male_2 in agent Calibrator. */
    void om_notify_mort_male_2();

    /** Implement notification before changing mort_male_3 in agent Calibrator. */
    void om_notify_mort_male_3();

    /** Implement notification before changing mort_male_4 in agent Calibrator. */
    void om_notify_mort_male_4();

    /** Implement notification before changing time in agent Calibrator. */
    void om_notify_time();

    /** Reset derived attributes before the entity enters the simulation. */
    void om_reset_derived_attributes();

    /** Set the unique entity_id of this entity. */
    void om_set_entity_id();

    /** Implement side effects of changing age in agent Calibrator. */
    void om_side_effects_age(Time om_old, Time om_new);

    /** Implement side effects of changing calibrator_year in agent Calibrator. */
    void om_side_effects_calibrator_year(ALL_YEAR_RANGE om_old, ALL_YEAR_RANGE om_new);

    /** Implement side effects of changing case_seed in agent Calibrator. */
    void om_side_effects_case_seed(double om_old, double om_new);

    /** Implement side effects of changing emigration_counter in agent Calibrator. */
    void om_side_effects_emigration_counter(integer om_old, integer om_new);

    /** Implement side effects of changing entity_id in agent Calibrator. */
    void om_side_effects_entity_id(int om_old, int om_new);

    /** Implement side effects of changing events in agent Calibrator. */
    void om_side_effects_events(counter om_old, counter om_new);

    /** Implement side effects of changing immigration_counter in agent Calibrator. */
    void om_side_effects_immigration_counter(integer om_old, integer om_new);

    /** Implement side effects of changing is_calibrated_child_mortality in agent Calibrator. */
    void om_side_effects_is_calibrated_child_mortality(bool om_old, bool om_new);

    /** Implement side effects of changing lCalibratorToClock in agent Calibrator. */
    void om_side_effects_lCalibratorToClock(entity_ptr<Clock> om_old, entity_ptr<Clock> om_new);

    /** Implement side effects of changing migration_counter in agent Calibrator. */
    void om_side_effects_migration_counter(integer om_old, integer om_new);

    /** Implement side effects of changing mort_female_0 in agent Calibrator. */
    void om_side_effects_mort_female_0(double om_old, double om_new);

    /** Implement side effects of changing mort_female_1 in agent Calibrator. */
    void om_side_effects_mort_female_1(double om_old, double om_new);

    /** Implement side effects of changing mort_female_2 in agent Calibrator. */
    void om_side_effects_mort_female_2(double om_old, double om_new);

    /** Implement side effects of changing mort_female_3 in agent Calibrator. */
    void om_side_effects_mort_female_3(double om_old, double om_new);

    /** Implement side effects of changing mort_female_4 in agent Calibrator. */
    void om_side_effects_mort_female_4(double om_old, double om_new);

    /** Implement side effects of changing mort_male_0 in agent Calibrator. */
    void om_side_effects_mort_male_0(double om_old, double om_new);

    /** Implement side effects of changing mort_male_1 in agent Calibrator. */
    void om_side_effects_mort_male_1(double om_old, double om_new);

    /** Implement side effects of changing mort_male_2 in agent Calibrator. */
    void om_side_effects_mort_male_2(double om_old, double om_new);

    /** Implement side effects of changing mort_male_3 in agent Calibrator. */
    void om_side_effects_mort_male_3(double om_old, double om_new);

    /** Implement side effects of changing mort_male_4 in agent Calibrator. */
    void om_side_effects_mort_male_4(double om_old, double om_new);

    /** Implement side effects of changing time in agent Calibrator. */
    void om_side_effects_time(Time om_old, Time om_new);

    /** Return the time to the event ChildMortalityCalibration in the Calibrator agent (model code). */
    Time timeChildMortalityCalibration();


    //
    // Entity table increment members in Calibrator entity
    //



    //
    // data members in Calibrator agent
    //


    /** age */
    static const std::string om_name_age;
    AssignableAgentVar<Time, double, Calibrator, &om_name_age, &Calibrator::om_side_effects_age, false, &Calibrator::om_notify_age, false>
    age;

    /** alignment_educ1_high */
    double alignment_educ1_high[SEX::size][GEO::size];

    /** alignment_educ1_medium */
    double alignment_educ1_medium[SEX::size][GEO::size];

    /** calibrator_year */
    static const std::string om_name_calibrator_year;
    AgentVar<ALL_YEAR_RANGE, int, Calibrator, &om_name_calibrator_year, &Calibrator::om_side_effects_calibrator_year, false, &Calibrator::om_notify_calibrator_year, false>
    calibrator_year;

    /** case_seed */
    static const std::string om_name_case_seed;
    AssignableAgentVar<double, void, Calibrator, &om_name_case_seed, &Calibrator::om_side_effects_case_seed, false, &Calibrator::om_notify_case_seed, false>
    case_seed;

    /** emigration_counter */
    static const std::string om_name_emigration_counter;
    AssignableAgentVar<integer, void, Calibrator, &om_name_emigration_counter, &Calibrator::om_side_effects_emigration_counter, false, &Calibrator::om_notify_emigration_counter, false>
    emigration_counter;

    /** entity_id */
    static const std::string om_name_entity_id;
    AssignableAgentVar<int, void, Calibrator, &om_name_entity_id, &Calibrator::om_side_effects_entity_id, false, &Calibrator::om_notify_entity_id, false>
    entity_id;

    /** events */
    static const std::string om_name_events;
    AssignableAgentVar<counter, void, Calibrator, &om_name_events, &Calibrator::om_side_effects_events, false, &Calibrator::om_notify_events, false>
    events;

    /** immigration_counter */
    static const std::string om_name_immigration_counter;
    AssignableAgentVar<integer, void, Calibrator, &om_name_immigration_counter, &Calibrator::om_side_effects_immigration_counter, false, &Calibrator::om_notify_immigration_counter, false>
    immigration_counter;

    /** is_calibrated_child_mortality */
    static const std::string om_name_is_calibrated_child_mortality;
    AssignableAgentVar<bool, void, Calibrator, &om_name_is_calibrated_child_mortality, &Calibrator::om_side_effects_is_calibrated_child_mortality, true, &Calibrator::om_notify_is_calibrated_child_mortality, false>
    is_calibrated_child_mortality;

    /** lCalibratorToClock */
    static const std::string om_name_lCalibratorToClock;
    LinkAgentVar<entity_ptr<Clock>, bool, Calibrator, Clock, &om_name_lCalibratorToClock, &Calibrator::om_side_effects_lCalibratorToClock, true, &Calibrator::om_notify_lCalibratorToClock, false>
    lCalibratorToClock;

    /** migration_counter */
    static const std::string om_name_migration_counter;
    AssignableAgentVar<integer, void, Calibrator, &om_name_migration_counter, &Calibrator::om_side_effects_migration_counter, false, &Calibrator::om_notify_migration_counter, false>
    migration_counter;

    /** mlCalibratorToPerson */
    Multilink<entity_ptr<Person>, Calibrator, Person, &Calibrator::om_mlCalibratorToPerson_side_effects, &Calibrator::om_mlCalibratorToPerson_insert, &Calibrator::om_mlCalibratorToPerson_erase> 
    mlCalibratorToPerson;

    /** mort_female_0 */
    static const std::string om_name_mort_female_0;
    AssignableAgentVar<double, void, Calibrator, &om_name_mort_female_0, &Calibrator::om_side_effects_mort_female_0, true, &Calibrator::om_notify_mort_female_0, false>
    mort_female_0;

    /** mort_female_1 */
    static const std::string om_name_mort_female_1;
    AssignableAgentVar<double, void, Calibrator, &om_name_mort_female_1, &Calibrator::om_side_effects_mort_female_1, true, &Calibrator::om_notify_mort_female_1, false>
    mort_female_1;

    /** mort_female_2 */
    static const std::string om_name_mort_female_2;
    AssignableAgentVar<double, void, Calibrator, &om_name_mort_female_2, &Calibrator::om_side_effects_mort_female_2, true, &Calibrator::om_notify_mort_female_2, false>
    mort_female_2;

    /** mort_female_3 */
    static const std::string om_name_mort_female_3;
    AssignableAgentVar<double, void, Calibrator, &om_name_mort_female_3, &Calibrator::om_side_effects_mort_female_3, true, &Calibrator::om_notify_mort_female_3, false>
    mort_female_3;

    /** mort_female_4 */
    static const std::string om_name_mort_female_4;
    AssignableAgentVar<double, void, Calibrator, &om_name_mort_female_4, &Calibrator::om_side_effects_mort_female_4, true, &Calibrator::om_notify_mort_female_4, false>
    mort_female_4;

    /** mort_male_0 */
    static const std::string om_name_mort_male_0;
    AssignableAgentVar<double, void, Calibrator, &om_name_mort_male_0, &Calibrator::om_side_effects_mort_male_0, true, &Calibrator::om_notify_mort_male_0, false>
    mort_male_0;

    /** mort_male_1 */
    static const std::string om_name_mort_male_1;
    AssignableAgentVar<double, void, Calibrator, &om_name_mort_male_1, &Calibrator::om_side_effects_mort_male_1, true, &Calibrator::om_notify_mort_male_1, false>
    mort_male_1;

    /** mort_male_2 */
    static const std::string om_name_mort_male_2;
    AssignableAgentVar<double, void, Calibrator, &om_name_mort_male_2, &Calibrator::om_side_effects_mort_male_2, true, &Calibrator::om_notify_mort_male_2, false>
    mort_male_2;

    /** mort_male_3 */
    static const std::string om_name_mort_male_3;
    AssignableAgentVar<double, void, Calibrator, &om_name_mort_male_3, &Calibrator::om_side_effects_mort_male_3, true, &Calibrator::om_notify_mort_male_3, false>
    mort_male_3;

    /** mort_male_4 */
    static const std::string om_name_mort_male_4;
    AssignableAgentVar<double, void, Calibrator, &om_name_mort_male_4, &Calibrator::om_side_effects_mort_male_4, true, &Calibrator::om_notify_mort_male_4, false>
    mort_male_4;

    /** om_ChildMortalityCalibration_om_event */
    Event<Calibrator, 2, 0, 0, &Calibrator::ChildMortalityCalibration, &Calibrator::timeChildMortalityCalibration>
    om_ChildMortalityCalibration_om_event;

    /** om_asCalibrator_cell */
    int om_asCalibrator_cell;

    /** time */
    static const std::string om_name_time;
    AssignableAgentVar<Time, double, Calibrator, &om_name_time, &Calibrator::om_side_effects_time, true, &Calibrator::om_notify_time, false>
    time;

    // The declaration of the static member Calibrator
    // used to retrieve (zero) values when dereferencing nullptr link attributes.
    static thread_local Calibrator om_null_agent;
}; // class Calibrator

// model agent classes
class Clock : public Agent<Clock>
{
public:

    //
    // function members in Clock agent
    //

    // operator overload for entity comparison based on entity_id
    bool operator< ( Clock & rhs )
    {
        return entity_id < rhs.entity_id;
    }

    /** Implement the event ClockMidyearEvent when it occurs in the Clock agent (model code). */
    void ClockMidyearEvent();

    /** Implement the event ClockYearEndEvent when it occurs in the Clock agent (model code). */
    void ClockYearEndEvent();

    /** Implement the event ClockYearStartEvent when it occurs in the Clock agent (model code). */
    void ClockYearStartEvent();

    /** Implement the event EndSchoolOneYearEvent when it occurs in the Clock agent (model code). */
    void EndSchoolOneYearEvent();

    /** Implement the event EndSchoolTwoYearEvent when it occurs in the Clock agent (model code). */
    void EndSchoolTwoYearEvent();

    /** Finishes the Clock */
    void Finish();

    /** Clock for scheduling school year */
    void SetSchoolYearOneClock();

    /** Clock for scheduling school year */
    void SetSchoolYearTwoClock();

    /** Starts the Clock */
    void Start();

    /** Implement the event StartSchoolOneYearEvent when it occurs in the Clock agent (model code). */
    void StartSchoolOneYearEvent();

    /** Implement the event StartSchoolTwoYearEvent when it occurs in the Clock agent (model code). */
    void StartSchoolTwoYearEvent();

    /** Update Female Partnership Status */
    void UpdatePartnershipStatus();

    /** Age the entity to the given time. */
    void age_agent(Time t);

    /** Check that argument is not in past of entity, else throw run-time exception. */
    Time check_time(Time t);

    /** Erase the entity from the active cell in asClock. */
    void om_asClock_erase();

    /** Insert the entity into the active cell in asClock. */
    void om_asClock_insert();

    /** Update the active cell index of table asClock using agentvars in the Clock agent. */
    void om_asClock_update_cell();

    /** One-time calculation of the offsets of attributes and increments in the containing entity. */
    void om_assign_member_offsets();

    /** Check that starting value of time is valid and raise run-time error if not. */
    void om_check_starting_time();

    /** Remove the entity in each entity set when it leaves the simulation. */
    void om_finalize_entity_sets();

    /** Remove each event in the entity from the event queue when it leaves the simulation. */
    void om_finalize_events();

    /** Set all links in agent to nullptr when the entity leaves the simulation. */
    void om_finalize_links();

    /** Empty all multilinks in agent when the entity leaves the simulation. */
    void om_finalize_multilinks();

    /** Finish the entity's pending increments in each table when it leaves the simulation. */
    void om_finalize_tables();

    /** Return unique entity_id of this entity. */
    int om_get_entity_id();

    /** Return current time of this entity. */
    Time om_get_time();

    /** Initialization of data members before the entity enters simulation. */
    void om_initialize_data_members();

    /** Initialization of data members of the 'zero' entity to default values for the type (0). */
    void om_initialize_data_members0();

    /** Initialize derived attributes before the entity enters the simulation. */
    void om_initialize_derived_attributes();

    /** Insert the entity in each entity set when it enters the simulation. */
    void om_initialize_entity_sets();

    /** Force event time calculation for each event in the entity when it enters simulation. */
    void om_initialize_events();

    /** Initialize each identity attribute before developer code in Start executes. */
    void om_initialize_identity_attributes();

    /** Initialize the entity's increments in each table when it enters the simulation. */
    void om_initialize_tables();

    /** Initialize time and age for this entity. */
    void om_initialize_time_and_age();

    /** Implement notification before changing age in agent Clock. */
    void om_notify_age();

    /** Implement notification before changing case_seed in agent Clock. */
    void om_notify_case_seed();

    /** Implement notification before changing clock_year in agent Clock. */
    void om_notify_clock_year();

    /** Implement notification before changing entity_id in agent Clock. */
    void om_notify_entity_id();

    /** Implement notification before changing events in agent Clock. */
    void om_notify_events();

    /** Implement notification before changing lClockToCalibrator in agent Clock. */
    void om_notify_lClockToCalibrator();

    /** Implement notification before changing next_clock_year_end in agent Clock. */
    void om_notify_next_clock_year_end();

    /** Implement notification before changing next_clock_year_start in agent Clock. */
    void om_notify_next_clock_year_start();

    /** Implement notification before changing next_midyear_clock_event in agent Clock. */
    void om_notify_next_midyear_clock_event();

    /** Implement notification before changing time in agent Clock. */
    void om_notify_time();

    /** Implement notification before changing time_end_school_one_year in agent Clock. */
    void om_notify_time_end_school_one_year();

    /** Implement notification before changing time_end_school_two_year in agent Clock. */
    void om_notify_time_end_school_two_year();

    /** Implement notification before changing time_start_school_one_year in agent Clock. */
    void om_notify_time_start_school_one_year();

    /** Implement notification before changing time_start_school_two_year in agent Clock. */
    void om_notify_time_start_school_two_year();

    /** Reset derived attributes before the entity enters the simulation. */
    void om_reset_derived_attributes();

    /** Set the unique entity_id of this entity. */
    void om_set_entity_id();

    /** Implement side effects of changing age in agent Clock. */
    void om_side_effects_age(Time om_old, Time om_new);

    /** Implement side effects of changing case_seed in agent Clock. */
    void om_side_effects_case_seed(double om_old, double om_new);

    /** Implement side effects of changing clock_year in agent Clock. */
    void om_side_effects_clock_year(int om_old, int om_new);

    /** Implement side effects of changing entity_id in agent Clock. */
    void om_side_effects_entity_id(int om_old, int om_new);

    /** Implement side effects of changing events in agent Clock. */
    void om_side_effects_events(counter om_old, counter om_new);

    /** Implement side effects of changing lClockToCalibrator in agent Clock. */
    void om_side_effects_lClockToCalibrator(entity_ptr<Calibrator> om_old, entity_ptr<Calibrator> om_new);

    /** Implement side effects of changing next_clock_year_end in agent Clock. */
    void om_side_effects_next_clock_year_end(Time om_old, Time om_new);

    /** Implement side effects of changing next_clock_year_start in agent Clock. */
    void om_side_effects_next_clock_year_start(Time om_old, Time om_new);

    /** Implement side effects of changing next_midyear_clock_event in agent Clock. */
    void om_side_effects_next_midyear_clock_event(Time om_old, Time om_new);

    /** Implement side effects of changing time in agent Clock. */
    void om_side_effects_time(Time om_old, Time om_new);

    /** Implement side effects of changing time_end_school_one_year in agent Clock. */
    void om_side_effects_time_end_school_one_year(Time om_old, Time om_new);

    /** Implement side effects of changing time_end_school_two_year in agent Clock. */
    void om_side_effects_time_end_school_two_year(Time om_old, Time om_new);

    /** Implement side effects of changing time_start_school_one_year in agent Clock. */
    void om_side_effects_time_start_school_one_year(Time om_old, Time om_new);

    /** Implement side effects of changing time_start_school_two_year in agent Clock. */
    void om_side_effects_time_start_school_two_year(Time om_old, Time om_new);

    /** Return the time to the event ClockMidyearEvent in the Clock agent (model code). */
    Time timeClockMidyearEvent();

    /** Return the time to the event ClockYearEndEvent in the Clock agent (model code). */
    Time timeClockYearEndEvent();

    /** Return the time to the event ClockYearStartEvent in the Clock agent (model code). */
    Time timeClockYearStartEvent();

    /** Return the time to the event EndSchoolOneYearEvent in the Clock agent (model code). */
    Time timeEndSchoolOneYearEvent();

    /** Return the time to the event EndSchoolTwoYearEvent in the Clock agent (model code). */
    Time timeEndSchoolTwoYearEvent();

    /** Return the time to the event StartSchoolOneYearEvent in the Clock agent (model code). */
    Time timeStartSchoolOneYearEvent();

    /** Return the time to the event StartSchoolTwoYearEvent in the Clock agent (model code). */
    Time timeStartSchoolTwoYearEvent();


    //
    // Entity table increment members in Clock entity
    //



    //
    // data members in Clock agent
    //


    /** age */
    static const std::string om_name_age;
    AssignableAgentVar<Time, double, Clock, &om_name_age, &Clock::om_side_effects_age, false, &Clock::om_notify_age, false>
    age;

    /** case_seed */
    static const std::string om_name_case_seed;
    AssignableAgentVar<double, void, Clock, &om_name_case_seed, &Clock::om_side_effects_case_seed, false, &Clock::om_notify_case_seed, false>
    case_seed;

    /** clock_year */
    static const std::string om_name_clock_year;
    AssignableAgentVar<int, void, Clock, &om_name_clock_year, &Clock::om_side_effects_clock_year, true, &Clock::om_notify_clock_year, false>
    clock_year;

    /** entity_id */
    static const std::string om_name_entity_id;
    AssignableAgentVar<int, void, Clock, &om_name_entity_id, &Clock::om_side_effects_entity_id, false, &Clock::om_notify_entity_id, false>
    entity_id;

    /** events */
    static const std::string om_name_events;
    AssignableAgentVar<counter, void, Clock, &om_name_events, &Clock::om_side_effects_events, false, &Clock::om_notify_events, false>
    events;

    /** lClockToCalibrator */
    static const std::string om_name_lClockToCalibrator;
    LinkAgentVar<entity_ptr<Calibrator>, bool, Clock, Calibrator, &om_name_lClockToCalibrator, &Clock::om_side_effects_lClockToCalibrator, true, &Clock::om_notify_lClockToCalibrator, false>
    lClockToCalibrator;

    /** next_clock_year_end */
    static const std::string om_name_next_clock_year_end;
    AssignableAgentVar<Time, double, Clock, &om_name_next_clock_year_end, &Clock::om_side_effects_next_clock_year_end, true, &Clock::om_notify_next_clock_year_end, false>
    next_clock_year_end;

    /** next_clock_year_start */
    static const std::string om_name_next_clock_year_start;
    AssignableAgentVar<Time, double, Clock, &om_name_next_clock_year_start, &Clock::om_side_effects_next_clock_year_start, true, &Clock::om_notify_next_clock_year_start, false>
    next_clock_year_start;

    /** next_midyear_clock_event */
    static const std::string om_name_next_midyear_clock_event;
    AssignableAgentVar<Time, double, Clock, &om_name_next_midyear_clock_event, &Clock::om_side_effects_next_midyear_clock_event, true, &Clock::om_notify_next_midyear_clock_event, false>
    next_midyear_clock_event;

    /** om_ClockMidyearEvent_om_event */
    Event<Clock, 3, 0, 0, &Clock::ClockMidyearEvent, &Clock::timeClockMidyearEvent>
    om_ClockMidyearEvent_om_event;

    /** om_ClockYearEndEvent_om_event */
    Event<Clock, 4, 0, 1, &Clock::ClockYearEndEvent, &Clock::timeClockYearEndEvent>
    om_ClockYearEndEvent_om_event;

    /** om_ClockYearStartEvent_om_event */
    Event<Clock, 5, 0, 2, &Clock::ClockYearStartEvent, &Clock::timeClockYearStartEvent>
    om_ClockYearStartEvent_om_event;

    /** om_EndSchoolOneYearEvent_om_event */
    Event<Clock, 8, 0, 3, &Clock::EndSchoolOneYearEvent, &Clock::timeEndSchoolOneYearEvent>
    om_EndSchoolOneYearEvent_om_event;

    /** om_EndSchoolTwoYearEvent_om_event */
    Event<Clock, 9, 0, 4, &Clock::EndSchoolTwoYearEvent, &Clock::timeEndSchoolTwoYearEvent>
    om_EndSchoolTwoYearEvent_om_event;

    /** om_StartSchoolOneYearEvent_om_event */
    Event<Clock, 28, 0, 5, &Clock::StartSchoolOneYearEvent, &Clock::timeStartSchoolOneYearEvent>
    om_StartSchoolOneYearEvent_om_event;

    /** om_StartSchoolTwoYearEvent_om_event */
    Event<Clock, 29, 0, 6, &Clock::StartSchoolTwoYearEvent, &Clock::timeStartSchoolTwoYearEvent>
    om_StartSchoolTwoYearEvent_om_event;

    /** om_asClock_cell */
    int om_asClock_cell;

    /** time */
    static const std::string om_name_time;
    AssignableAgentVar<Time, double, Clock, &om_name_time, &Clock::om_side_effects_time, true, &Clock::om_notify_time, false>
    time;

    /** time_end_school_one_year */
    static const std::string om_name_time_end_school_one_year;
    AssignableAgentVar<Time, double, Clock, &om_name_time_end_school_one_year, &Clock::om_side_effects_time_end_school_one_year, true, &Clock::om_notify_time_end_school_one_year, false>
    time_end_school_one_year;

    /** time_end_school_two_year */
    static const std::string om_name_time_end_school_two_year;
    AssignableAgentVar<Time, double, Clock, &om_name_time_end_school_two_year, &Clock::om_side_effects_time_end_school_two_year, true, &Clock::om_notify_time_end_school_two_year, false>
    time_end_school_two_year;

    /** time_start_school_one_year */
    static const std::string om_name_time_start_school_one_year;
    AssignableAgentVar<Time, double, Clock, &om_name_time_start_school_one_year, &Clock::om_side_effects_time_start_school_one_year, true, &Clock::om_notify_time_start_school_one_year, false>
    time_start_school_one_year;

    /** time_start_school_two_year */
    static const std::string om_name_time_start_school_two_year;
    AssignableAgentVar<Time, double, Clock, &om_name_time_start_school_two_year, &Clock::om_side_effects_time_start_school_two_year, true, &Clock::om_notify_time_start_school_two_year, false>
    time_start_school_two_year;

    // The declaration of the static member Clock
    // used to retrieve (zero) values when dereferencing nullptr link attributes.
    static thread_local Clock om_null_agent;
}; // class Clock

// model agent classes
class Observation : public Agent<Observation>
{
public:

    //
    // function members in Observation agent
    //

    // operator overload for entity comparison based on entity_id
    bool operator< ( Observation & rhs )
    {
        return entity_id < rhs.entity_id;
    }

    /** Function destroying the actor */
    void Finish();

    /** Function starting the actor */
    void Start(const input_csv & input);

    /** Age the entity to the given time. */
    void age_agent(Time t);

    /** Check that argument is not in past of entity, else throw run-time exception. */
    Time check_time(Time t);

    /** Erase the entity from the active cell in asObservationAll. */
    void om_asObservationAll_erase();

    /** Insert the entity into the active cell in asObservationAll. */
    void om_asObservationAll_insert();

    /** Update the active cell index of table asObservationAll using agentvars in the Observation agent. */
    void om_asObservationAll_update_cell();

    /** Erase the entity from the active cell in asObservationByFamOldest. */
    void om_asObservationByFamOldest_erase();

    /** Evaluate and assign expression for om_asObservationByFamOldest_filter. */
    void om_asObservationByFamOldest_filter_update_identity();

    /** Insert the entity into the active cell in asObservationByFamOldest. */
    void om_asObservationByFamOldest_insert();

    /** Update the active cell index of table asObservationByFamOldest using agentvars in the Observation agent. */
    void om_asObservationByFamOldest_update_cell();

    /** Erase the entity from the active cell in asObservationByFam. */
    void om_asObservationByFam_erase();

    /** Insert the entity into the active cell in asObservationByFam. */
    void om_asObservationByFam_insert();

    /** Update the active cell index of table asObservationByFam using agentvars in the Observation agent. */
    void om_asObservationByFam_update_cell();

    /** Erase the entity from the active cell in asObservationHeads. */
    void om_asObservationHeads_erase();

    /** Evaluate and assign expression for om_asObservationHeads_filter. */
    void om_asObservationHeads_filter_update_identity();

    /** Insert the entity into the active cell in asObservationHeads. */
    void om_asObservationHeads_insert();

    /** Update the active cell index of table asObservationHeads using agentvars in the Observation agent. */
    void om_asObservationHeads_update_cell();

    /** Erase the entity from the active cell in asObservationNonHeads. */
    void om_asObservationNonHeads_erase();

    /** Evaluate and assign expression for om_asObservationNonHeads_filter. */
    void om_asObservationNonHeads_filter_update_identity();

    /** Insert the entity into the active cell in asObservationNonHeads. */
    void om_asObservationNonHeads_insert();

    /** Update the active cell index of table asObservationNonHeads using agentvars in the Observation agent. */
    void om_asObservationNonHeads_update_cell();

    /** Erase the entity from the active cell in asObservations. */
    void om_asObservations_erase();

    /** Insert the entity into the active cell in asObservations. */
    void om_asObservations_insert();

    /** Update the active cell index of table asObservations using agentvars in the Observation agent. */
    void om_asObservations_update_cell();

    /** Erase the entity from the active cell in asSimulatedObservationHeads. */
    void om_asSimulatedObservationHeads_erase();

    /** Evaluate and assign expression for om_asSimulatedObservationHeads_filter. */
    void om_asSimulatedObservationHeads_filter_update_identity();

    /** Insert the entity into the active cell in asSimulatedObservationHeads. */
    void om_asSimulatedObservationHeads_insert();

    /** Update the active cell index of table asSimulatedObservationHeads using agentvars in the Observation agent. */
    void om_asSimulatedObservationHeads_update_cell();

    /** One-time calculation of the offsets of attributes and increments in the containing entity. */
    void om_assign_member_offsets();

    /** Check that starting value of time is valid and raise run-time error if not. */
    void om_check_starting_time();

    /** Remove the entity in each entity set when it leaves the simulation. */
    void om_finalize_entity_sets();

    /** Remove each event in the entity from the event queue when it leaves the simulation. */
    void om_finalize_events();

    /** Set all links in agent to nullptr when the entity leaves the simulation. */
    void om_finalize_links();

    /** Empty all multilinks in agent when the entity leaves the simulation. */
    void om_finalize_multilinks();

    /** Finish the entity's pending increments in each table when it leaves the simulation. */
    void om_finalize_tables();

    /** Return unique entity_id of this entity. */
    int om_get_entity_id();

    /** Return current time of this entity. */
    Time om_get_time();

    /** Initialization of data members before the entity enters simulation. */
    void om_initialize_data_members();

    /** Initialization of data members of the 'zero' entity to default values for the type (0). */
    void om_initialize_data_members0();

    /** Initialize derived attributes before the entity enters the simulation. */
    void om_initialize_derived_attributes();

    /** Insert the entity in each entity set when it enters the simulation. */
    void om_initialize_entity_sets();

    /** Force event time calculation for each event in the entity when it enters simulation. */
    void om_initialize_events();

    /** Initialize each identity attribute before developer code in Start executes. */
    void om_initialize_identity_attributes();

    /** Initialize the entity's increments in each table when it enters the simulation. */
    void om_initialize_tables();

    /** Initialize time and age for this entity. */
    void om_initialize_time_and_age();

    /** Implement notification before changing age in agent Observation. */
    void om_notify_age();

    /** Implement notification before changing case_seed in agent Observation. */
    void om_notify_case_seed();

    /** Implement notification before changing entity_id in agent Observation. */
    void om_notify_entity_id();

    /** Implement notification before changing events in agent Observation. */
    void om_notify_events();

    /** Implement notification before changing fam_id in agent Observation. */
    void om_notify_fam_id();

    /** Implement notification before changing obs_birth in agent Observation. */
    void om_notify_obs_birth();

    /** Implement notification before changing obs_oldest in agent Observation. */
    void om_notify_obs_oldest();

    /** Implement notification before changing obs_weight in agent Observation. */
    void om_notify_obs_weight();

    /** Implement notification before changing om_asObservationByFamOldest_filter in agent Observation. */
    void om_notify_om_asObservationByFamOldest_filter();

    /** Implement notification before changing om_asObservationHeads_filter in agent Observation. */
    void om_notify_om_asObservationHeads_filter();

    /** Implement notification before changing om_asObservationNonHeads_filter in agent Observation. */
    void om_notify_om_asObservationNonHeads_filter();

    /** Implement notification before changing om_asSimulatedObservationHeads_filter in agent Observation. */
    void om_notify_om_asSimulatedObservationHeads_filter();

    /** Implement notification before changing pop_pool in agent Observation. */
    void om_notify_pop_pool();

    /** Implement notification before changing time in agent Observation. */
    void om_notify_time();

    /** Reset derived attributes before the entity enters the simulation. */
    void om_reset_derived_attributes();

    /** Set the unique entity_id of this entity. */
    void om_set_entity_id();

    /** Implement side effects of changing age in agent Observation. */
    void om_side_effects_age(Time om_old, Time om_new);

    /** Implement side effects of changing case_seed in agent Observation. */
    void om_side_effects_case_seed(double om_old, double om_new);

    /** Implement side effects of changing entity_id in agent Observation. */
    void om_side_effects_entity_id(int om_old, int om_new);

    /** Implement side effects of changing events in agent Observation. */
    void om_side_effects_events(counter om_old, counter om_new);

    /** Implement side effects of changing fam_id in agent Observation. */
    void om_side_effects_fam_id(FAM_ID om_old, FAM_ID om_new);

    /** Implement side effects of changing obs_birth in agent Observation. */
    void om_side_effects_obs_birth(Time om_old, Time om_new);

    /** Implement side effects of changing obs_oldest in agent Observation. */
    void om_side_effects_obs_oldest(bool om_old, bool om_new);

    /** Implement side effects of changing obs_weight in agent Observation. */
    void om_side_effects_obs_weight(integer om_old, integer om_new);

    /** Implement side effects of changing om_asObservationByFamOldest_filter in agent Observation. */
    void om_side_effects_om_asObservationByFamOldest_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asObservationHeads_filter in agent Observation. */
    void om_side_effects_om_asObservationHeads_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asObservationNonHeads_filter in agent Observation. */
    void om_side_effects_om_asObservationNonHeads_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asSimulatedObservationHeads_filter in agent Observation. */
    void om_side_effects_om_asSimulatedObservationHeads_filter(bool om_old, bool om_new);

    /** Implement side effects of changing pop_pool in agent Observation. */
    void om_side_effects_pop_pool(POP_POOL om_old, POP_POOL om_new);

    /** Implement side effects of changing time in agent Observation. */
    void om_side_effects_time(Time om_old, Time om_new);


    //
    // Entity table increment members in Observation entity
    //



    //
    // data members in Observation agent
    //


    /** age */
    static const std::string om_name_age;
    AssignableAgentVar<Time, double, Observation, &om_name_age, &Observation::om_side_effects_age, false, &Observation::om_notify_age, false>
    age;

    /** case_seed */
    static const std::string om_name_case_seed;
    AssignableAgentVar<double, void, Observation, &om_name_case_seed, &Observation::om_side_effects_case_seed, false, &Observation::om_notify_case_seed, false>
    case_seed;

    /** entity_id */
    static const std::string om_name_entity_id;
    AssignableAgentVar<int, void, Observation, &om_name_entity_id, &Observation::om_side_effects_entity_id, false, &Observation::om_notify_entity_id, false>
    entity_id;

    /** events */
    static const std::string om_name_events;
    AssignableAgentVar<counter, void, Observation, &om_name_events, &Observation::om_side_effects_events, false, &Observation::om_notify_events, false>
    events;

    /** fam_id */
    static const std::string om_name_fam_id;
    AssignableAgentVar<FAM_ID, int, Observation, &om_name_fam_id, &Observation::om_side_effects_fam_id, true, &Observation::om_notify_fam_id, false>
    fam_id;

    /** obs_birth */
    static const std::string om_name_obs_birth;
    AssignableAgentVar<Time, double, Observation, &om_name_obs_birth, &Observation::om_side_effects_obs_birth, false, &Observation::om_notify_obs_birth, false>
    obs_birth;

    /** obs_oldest */
    static const std::string om_name_obs_oldest;
    AssignableAgentVar<bool, void, Observation, &om_name_obs_oldest, &Observation::om_side_effects_obs_oldest, true, &Observation::om_notify_obs_oldest, false>
    obs_oldest;

    /** obs_weight */
    static const std::string om_name_obs_weight;
    AssignableAgentVar<integer, void, Observation, &om_name_obs_weight, &Observation::om_side_effects_obs_weight, true, &Observation::om_notify_obs_weight, false>
    obs_weight;

    /** om_asObservationAll_cell */
    int om_asObservationAll_cell;

    /** om_asObservationByFamOldest_cell */
    int om_asObservationByFamOldest_cell;

    /** om_asObservationByFamOldest_filter */
    static const std::string om_name_om_asObservationByFamOldest_filter;
    AgentVar<bool, void, Observation, &om_name_om_asObservationByFamOldest_filter, &Observation::om_side_effects_om_asObservationByFamOldest_filter, true, &Observation::om_notify_om_asObservationByFamOldest_filter, false>
    om_asObservationByFamOldest_filter;

    /** om_asObservationByFam_cell */
    int om_asObservationByFam_cell;

    /** om_asObservationHeads_cell */
    int om_asObservationHeads_cell;

    /** om_asObservationHeads_filter */
    static const std::string om_name_om_asObservationHeads_filter;
    AgentVar<bool, void, Observation, &om_name_om_asObservationHeads_filter, &Observation::om_side_effects_om_asObservationHeads_filter, true, &Observation::om_notify_om_asObservationHeads_filter, false>
    om_asObservationHeads_filter;

    /** om_asObservationNonHeads_cell */
    int om_asObservationNonHeads_cell;

    /** om_asObservationNonHeads_filter */
    static const std::string om_name_om_asObservationNonHeads_filter;
    AgentVar<bool, void, Observation, &om_name_om_asObservationNonHeads_filter, &Observation::om_side_effects_om_asObservationNonHeads_filter, true, &Observation::om_notify_om_asObservationNonHeads_filter, false>
    om_asObservationNonHeads_filter;

    /** om_asObservations_cell */
    int om_asObservations_cell;

    /** om_asSimulatedObservationHeads_cell */
    int om_asSimulatedObservationHeads_cell;

    /** om_asSimulatedObservationHeads_filter */
    static const std::string om_name_om_asSimulatedObservationHeads_filter;
    AgentVar<bool, void, Observation, &om_name_om_asSimulatedObservationHeads_filter, &Observation::om_side_effects_om_asSimulatedObservationHeads_filter, true, &Observation::om_notify_om_asSimulatedObservationHeads_filter, false>
    om_asSimulatedObservationHeads_filter;

    /** pmc */
    double pmc[PERSON_MICRODATA_COLUMNS::size];

    /** pop_pool */
    static const std::string om_name_pop_pool;
    AssignableAgentVar<POP_POOL, int, Observation, &om_name_pop_pool, &Observation::om_side_effects_pop_pool, true, &Observation::om_notify_pop_pool, false>
    pop_pool;

    /** time */
    static const std::string om_name_time;
    AssignableAgentVar<Time, double, Observation, &om_name_time, &Observation::om_side_effects_time, true, &Observation::om_notify_time, false>
    time;

    // The declaration of the static member Observation
    // used to retrieve (zero) values when dereferencing nullptr link attributes.
    static thread_local Observation om_null_agent;
}; // class Observation

// model agent classes
class Person : public Agent<Person>
{
public:

    //
    // function members in Person agent
    //

    // operator overload for entity comparison based on entity_id
    bool operator< ( Person & rhs )
    {
        return entity_id < rhs.entity_id;
    }

    /** Adjust education fate at year end */
    void AdjustEducOne();

    /** Implement the event BackMigrationEvent when it occurs in the Person agent (model code). */
    void BackMigrationEvent();

    /** Implement the event BirthdayEvent when it occurs in the Person agent (model code). */
    void BirthdayEvent();

    /** Calculate HCI variables */
    void CalculateHCIVariables();

    /** Implement the event DeathAtMaxLifespanEvent when it occurs in the Person agent (model code). */
    void DeathAtMaxLifespanEvent();

    /** Decide immunization foreign born */
    void DecideImmunizationStatusImmigrants();

    /** Decide immunization residents */
    void DecideImmunizationStatusResidents();

    /** Decide stunting fate at birth */
    void DecideStuntingFate();

    /** Implement the event EmigrationEvent when it occurs in the Person agent (model code). */
    void EmigrationEvent();

    /** Implement the event FertilityBaseEvent when it occurs in the Person agent (model code). */
    void FertilityBaseEvent();

    /** Implement the event FertilityDetailedEvent when it occurs in the Person agent (model code). */
    void FertilityDetailedEvent();

    /** Try to find a mother in foreign population scheduled to arrive in the same year */
    void FindImmigrantMother();

    /** Find and link to a spouse */
    bool FindSpouse();

    /** Finish - the last function called before an actor is destroyed */
    void Finish();

    /** Implement the event FirstImmigrationFromPoolEvent when it occurs in the Person agent (model code). */
    void FirstImmigrationFromPoolEvent();

    /** Implement the event FirstImmigrationFromScratchEvent when it occurs in the Person agent (model code). */
    void FirstImmigrationFromScratchEvent();

    /** Implement the event FirstUnionFormationEvent when it occurs in the Person agent (model code). */
    void FirstUnionFormationEvent();

    /** Sample immigrants ethnicity */
    ETHNICITY GetImmigrantsScratchEthnicity(GEO_NAT toGeo);

    /** Inherit ethnicity at birth */
    ETHNICITY GetInheritedEthnicity(ETHNICITY eMothersEthnicity);

    /** Handle Fertility */
    void HandleFertility();

    /** Handle Mortality */
    void HandleMortality();

    /** Impute missing characteristics at moment before first entering country */
    void ImputeCharacteristicsAtFirstImmigrationScratch(GEO_NAT cGeoDestination);

    /** Implement the event LeavingHomeEvent when it occurs in the Person agent (model code). */
    void LeavingHomeEvent();

    /** Mid year */
    void MidYear();

    /** Implement the event MigrationEvent when it occurs in the Person agent (model code). */
    void MigrationEvent();

    /** Implement the event MortalityBaseEvent when it occurs in the Person agent (model code). */
    void MortalityBaseEvent();

    /** Implement the event MortalityDetailedEvent when it occurs in the Person agent (model code). */
    void MortalityDetailedEvent();

    /** Implement the event SetAliveEvent when it occurs in the Person agent (model code). */
    void SetAliveEvent();

    /** Setting the primary school fate */
    void SetEduc1BaseFate();

    /** Sample entry age and dropout grade */
    void SetEducOneEntryAgeDroputGrade();

    /** Set sex, time of birth and geo of birth (called in start function) */
    void SetGeobirthTimeofbirthCtScratch();

    /** Implement the event SetPreschoolYearsEvent when it occurs in the Person agent (model code). */
    void SetPreschoolYearsEvent();

    /** Start - the first function called after an actor is created */
    void Start(Observation_ptr peObs , Person * peCreator , int nYearOfImmigration , SEX nImmiSex);

    /** Year End Function */
    void YearEnd();

    /** Year Start Function */
    void YearStart();

    /** Age the entity to the given time. */
    void age_agent(Time t);

    /** Evaluate and assign expression for age_last_birth. */
    void age_last_birth_update_identity();

    /** Evaluate and assign expression for age_mig. */
    void age_mig_update_identity();

    /** Evaluate and assign expression for age_youngest_child. */
    void age_youngest_child_update_identity();

    /** Evaluate and assign expression for all_year. */
    void all_year_update_identity();

    /** Check that argument is not in past of entity, else throw run-time exception. */
    Time check_time(Time t);

    /** Evaluate and assign expression for child_agegr_part. */
    void child_agegr_part_update_identity();

    /** Evaluate and assign expression for child_agegr. */
    void child_agegr_update_identity();

    /** Evaluate and assign expression for child_mortality_group. */
    void child_mortality_group_update_identity();

    /** Evaluate and assign expression for child_mortality. */
    void child_mortality_update_identity();

    /** Evaluate and assign expression for children_in_household. */
    void children_in_household_update_identity();

    /** Dissolve a union */
    void doDissolveUnion();

    /** Give Birth */
    void doGiveBirth();

    /** Increase parity and reset in_this_parity spell */
    void doIncreaseParity();

    /** Leave parental home */
    void doLeaveParentalHome();

    /** Link to family members (those from starting population) */
    void doLinkToFamilyAtStart();

    /** Search for step-parents etc. */
    void doMaintainLinksAtDeath();

    /** Immigration */
    void doResidentialMove(GEO cDestination);

    /** Start a union */
    void doStartUnion(Person_ptr ptrPartner);

    /** Evaluate and assign expression for educ1_group. */
    void educ1_group_update_identity();

    /** Evaluate and assign expression for educ_one_grade. */
    void educ_one_grade_update_identity();

    /** Evaluate and assign expression for educ_one_level. */
    void educ_one_level_update_identity();

    /** Evaluate and assign expression for educ_one_required_rooms. */
    void educ_one_required_rooms_update_identity();

    /** Evaluate and assign expression for educ_one_required_teachers. */
    void educ_one_required_teachers_update_identity();

    /** Evaluate and assign expression for educ_two_level. */
    void educ_two_level_update_identity();

    /** Evaluate and assign expression for ethnicity_short. */
    void ethnicity_short_update_identity();

    /** Evaluate and assign expression for family_role. */
    void family_role_update_identity();

    /** Evaluate and assign expression for female_spouse_age. */
    void female_spouse_age_update_identity();

    /** Evaluate and assign expression for fertile_age. */
    void fertile_age_update_identity();

    /** Evaluate and assign expression for geo_nat. */
    void geo_nat_update_identity();

    /** Return time to next birth */
    double getTimeToBirth();

    /** Evaluate and assign expression for has_passed_primary. */
    void has_passed_primary_update_identity();

    /** Evaluate and assign expression for has_spouse. */
    void has_spouse_update_identity();

    /** Evaluate and assign expression for in_hci_sample. */
    void in_hci_sample_update_identity();

    /** Evaluate and assign expression for in_projected_time. */
    void in_projected_time_update_identity();

    /** Evaluate and assign expression for in_sel_years. */
    void in_sel_years_update_identity();

    /** Evaluate and assign expression for in_selected_year. */
    void in_selected_year_update_identity();

    /** Evaluate and assign expression for is_aded0. */
    void is_aded0_update_identity();

    /** Evaluate and assign expression for is_aded1. */
    void is_aded1_update_identity();

    /** Evaluate and assign expression for is_aded2. */
    void is_aded2_update_identity();

    /** Evaluate and assign expression for is_adult. */
    void is_adult_update_identity();

    /** Evaluate and assign expression for is_child. */
    void is_child_update_identity();

    /** Evaluate and assign expression for is_educ_one_student. */
    void is_educ_one_student_update_identity();

    /** Evaluate and assign expression for is_fertile. */
    void is_fertile_update_identity();

    /** Evaluate and assign expression for is_mortal. */
    void is_mortal_update_identity();

    /** Evaluate and assign expression for is_old. */
    void is_old_update_identity();

    /** Evaluate and assign expression for is_resident. */
    void is_resident_update_identity();

    /** Evaluate and assign expression for lives_with_dependent_child. */
    void lives_with_dependent_child_update_identity();

    /** Evaluate and assign expression for male_age. */
    void male_age_update_identity();

    /** Evaluate and assign expression for male_spouse_age. */
    void male_spouse_age_update_identity();

    /** Evaluate and assign expression for moth_agegr_part. */
    void moth_agegr_part_update_identity();

    /** Evaluate and assign expression for moth_agegr. */
    void moth_agegr_update_identity();

    /** Compute the current cell index of table PopPyramidByEduc using attributes in the Person entity. */
    int om_PopPyramidByEduc_current_cell();

    /** Initialize the increment for the active table cell in PopPyramidByEduc. */
    void om_PopPyramidByEduc_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in PopPyramidByEduc. */
    void om_PopPyramidByEduc_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabChildVaccination using attributes in the Person entity. */
    int om_TabChildVaccination_current_cell();

    /** Initialize the increment for the active table cell in TabChildVaccination. */
    void om_TabChildVaccination_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabChildVaccination. */
    void om_TabChildVaccination_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabEduc15ByDistrictBirth using attributes in the Person entity. */
    int om_TabEduc15ByDistrictBirth_current_cell();

    /** Initialize the increment for the active table cell in TabEduc15ByDistrictBirth. */
    void om_TabEduc15ByDistrictBirth_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabEduc15ByDistrictBirth. */
    void om_TabEduc15ByDistrictBirth_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabEduc15ByDistrict using attributes in the Person entity. */
    int om_TabEduc15ByDistrict_current_cell();

    /** Initialize the increment for the active table cell in TabEduc15ByDistrict. */
    void om_TabEduc15ByDistrict_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabEduc15ByDistrict. */
    void om_TabEduc15ByDistrict_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabEducFateByGroup using attributes in the Person entity. */
    int om_TabEducFateByGroup_current_cell();

    /** Initialize the increment for the active table cell in TabEducFateByGroup. */
    void om_TabEducFateByGroup_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabEducFateByGroup. */
    void om_TabEducFateByGroup_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabEducFateDistrYob using attributes in the Person entity. */
    int om_TabEducFateDistrYob_current_cell();

    /** Initialize the increment for the active table cell in TabEducFateDistrYob. */
    void om_TabEducFateDistrYob_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabEducFateDistrYob. */
    void om_TabEducFateDistrYob_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabHCIDistrict using attributes in the Person entity. */
    int om_TabHCIDistrict_current_cell();

    /** Initialize the increment for the active table cell in TabHCIDistrict. */
    void om_TabHCIDistrict_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabHCIDistrict. */
    void om_TabHCIDistrict_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabImmunizationChildren using attributes in the Person entity. */
    int om_TabImmunizationChildren_current_cell();

    /** Initialize the increment for the active table cell in TabImmunizationChildren. */
    void om_TabImmunizationChildren_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabImmunizationChildren. */
    void om_TabImmunizationChildren_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabPopProvAgeEducSex using attributes in the Person entity. */
    int om_TabPopProvAgeEducSex_current_cell();

    /** Initialize the increment for the active table cell in TabPopProvAgeEducSex. */
    void om_TabPopProvAgeEducSex_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabPopProvAgeEducSex. */
    void om_TabPopProvAgeEducSex_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabPrenatCare using attributes in the Person entity. */
    int om_TabPrenatCare_current_cell();

    /** Initialize the increment for the active table cell in TabPrenatCare. */
    void om_TabPrenatCare_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabPrenatCare. */
    void om_TabPrenatCare_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabPrimSchoolEntries using attributes in the Person entity. */
    int om_TabPrimSchoolEntries_current_cell();

    /** Initialize the increment for the active table cell in TabPrimSchoolEntries. */
    void om_TabPrimSchoolEntries_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabPrimSchoolEntries. */
    void om_TabPrimSchoolEntries_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabPrimSchoolGraduations using attributes in the Person entity. */
    int om_TabPrimSchoolGraduations_current_cell();

    /** Initialize the increment for the active table cell in TabPrimSchoolGraduations. */
    void om_TabPrimSchoolGraduations_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabPrimSchoolGraduations. */
    void om_TabPrimSchoolGraduations_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabPrimSchoolOutOfSchool9to11 using attributes in the Person entity. */
    int om_TabPrimSchoolOutOfSchool9to11_current_cell();

    /** Initialize the increment for the active table cell in TabPrimSchoolOutOfSchool9to11. */
    void om_TabPrimSchoolOutOfSchool9to11_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabPrimSchoolOutOfSchool9to11. */
    void om_TabPrimSchoolOutOfSchool9to11_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabPrimarySchoolPlanning using attributes in the Person entity. */
    int om_TabPrimarySchoolPlanning_current_cell();

    /** Initialize the increment for the active table cell in TabPrimarySchoolPlanning. */
    void om_TabPrimarySchoolPlanning_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabPrimarySchoolPlanning. */
    void om_TabPrimarySchoolPlanning_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabSchool2AttainmentsTab using attributes in the Person entity. */
    int om_TabSchool2AttainmentsTab_current_cell();

    /** Initialize the increment for the active table cell in TabSchool2AttainmentsTab. */
    void om_TabSchool2AttainmentsTab_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabSchool2AttainmentsTab. */
    void om_TabSchool2AttainmentsTab_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table TabSchool2TrackTab using attributes in the Person entity. */
    int om_TabSchool2TrackTab_current_cell();

    /** Initialize the increment for the active table cell in TabSchool2TrackTab. */
    void om_TabSchool2TrackTab_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in TabSchool2TrackTab. */
    void om_TabSchool2TrackTab_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Evaluate and assign expression for om_aia_0. */
    void om_aia_0_update_identity();

    /** Evaluate and assign expression for om_aia_10. */
    void om_aia_10_update_identity();

    /** Evaluate and assign expression for om_aia_11. */
    void om_aia_11_update_identity();

    /** Evaluate and assign expression for om_aia_12. */
    void om_aia_12_update_identity();

    /** Evaluate and assign expression for om_aia_13. */
    void om_aia_13_update_identity();

    /** Evaluate and assign expression for om_aia_14. */
    void om_aia_14_update_identity();

    /** Evaluate and assign expression for om_aia_15. */
    void om_aia_15_update_identity();

    /** Evaluate and assign expression for om_aia_16. */
    void om_aia_16_update_identity();

    /** Evaluate and assign expression for om_aia_17. */
    void om_aia_17_update_identity();

    /** Evaluate and assign expression for om_aia_18. */
    void om_aia_18_update_identity();

    /** Evaluate and assign expression for om_aia_19. */
    void om_aia_19_update_identity();

    /** Evaluate and assign expression for om_aia_1. */
    void om_aia_1_update_identity();

    /** Evaluate and assign expression for om_aia_20. */
    void om_aia_20_update_identity();

    /** Evaluate and assign expression for om_aia_21. */
    void om_aia_21_update_identity();

    /** Evaluate and assign expression for om_aia_22. */
    void om_aia_22_update_identity();

    /** Evaluate and assign expression for om_aia_23. */
    void om_aia_23_update_identity();

    /** Evaluate and assign expression for om_aia_24. */
    void om_aia_24_update_identity();

    /** Evaluate and assign expression for om_aia_25. */
    void om_aia_25_update_identity();

    /** Evaluate and assign expression for om_aia_26. */
    void om_aia_26_update_identity();

    /** Evaluate and assign expression for om_aia_27. */
    void om_aia_27_update_identity();

    /** Evaluate and assign expression for om_aia_28. */
    void om_aia_28_update_identity();

    /** Evaluate and assign expression for om_aia_29. */
    void om_aia_29_update_identity();

    /** Evaluate and assign expression for om_aia_2. */
    void om_aia_2_update_identity();

    /** Evaluate and assign expression for om_aia_30. */
    void om_aia_30_update_identity();

    /** Evaluate and assign expression for om_aia_31. */
    void om_aia_31_update_identity();

    /** Evaluate and assign expression for om_aia_32. */
    void om_aia_32_update_identity();

    /** Evaluate and assign expression for om_aia_33. */
    void om_aia_33_update_identity();

    /** Evaluate and assign expression for om_aia_34. */
    void om_aia_34_update_identity();

    /** Evaluate and assign expression for om_aia_35. */
    void om_aia_35_update_identity();

    /** Evaluate and assign expression for om_aia_36. */
    void om_aia_36_update_identity();

    /** Evaluate and assign expression for om_aia_37. */
    void om_aia_37_update_identity();

    /** Evaluate and assign expression for om_aia_38. */
    void om_aia_38_update_identity();

    /** Evaluate and assign expression for om_aia_39. */
    void om_aia_39_update_identity();

    /** Evaluate and assign expression for om_aia_3. */
    void om_aia_3_update_identity();

    /** Evaluate and assign expression for om_aia_40. */
    void om_aia_40_update_identity();

    /** Evaluate and assign expression for om_aia_4. */
    void om_aia_4_update_identity();

    /** Evaluate and assign expression for om_aia_5. */
    void om_aia_5_update_identity();

    /** Evaluate and assign expression for om_aia_6. */
    void om_aia_6_update_identity();

    /** Evaluate and assign expression for om_aia_7. */
    void om_aia_7_update_identity();

    /** Evaluate and assign expression for om_aia_8. */
    void om_aia_8_update_identity();

    /** Evaluate and assign expression for om_aia_9. */
    void om_aia_9_update_identity();

    /** Erase the entity from the active cell in asAllFertilePersonsForFertilityAlignmentByAge. */
    void om_asAllFertilePersonsForFertilityAlignmentByAge_erase();

    /** Evaluate and assign expression for om_asAllFertilePersonsForFertilityAlignmentByAge_filter. */
    void om_asAllFertilePersonsForFertilityAlignmentByAge_filter_update_identity();

    /** Insert the entity into the active cell in asAllFertilePersonsForFertilityAlignmentByAge. */
    void om_asAllFertilePersonsForFertilityAlignmentByAge_insert();

    /** Update the active cell index of table asAllFertilePersonsForFertilityAlignmentByAge using agentvars in the Person agent. */
    void om_asAllFertilePersonsForFertilityAlignmentByAge_update_cell();

    /** Erase the entity from the active cell in asAllFertilePersonsForFertilityAlignment. */
    void om_asAllFertilePersonsForFertilityAlignment_erase();

    /** Evaluate and assign expression for om_asAllFertilePersonsForFertilityAlignment_filter. */
    void om_asAllFertilePersonsForFertilityAlignment_filter_update_identity();

    /** Insert the entity into the active cell in asAllFertilePersonsForFertilityAlignment. */
    void om_asAllFertilePersonsForFertilityAlignment_insert();

    /** Update the active cell index of table asAllFertilePersonsForFertilityAlignment using agentvars in the Person agent. */
    void om_asAllFertilePersonsForFertilityAlignment_update_cell();

    /** Erase the entity from the active cell in asAllPerson. */
    void om_asAllPerson_erase();

    /** Evaluate and assign expression for om_asAllPerson_filter. */
    void om_asAllPerson_filter_update_identity();

    /** Insert the entity into the active cell in asAllPerson. */
    void om_asAllPerson_insert();

    /** Update the active cell index of table asAllPerson using agentvars in the Person agent. */
    void om_asAllPerson_update_cell();

    /** Erase the entity from the active cell in asAvailableMaleByTypeImmiScratch. */
    void om_asAvailableMaleByTypeImmiScratch_erase();

    /** Evaluate and assign expression for om_asAvailableMaleByTypeImmiScratch_filter. */
    void om_asAvailableMaleByTypeImmiScratch_filter_update_identity();

    /** Insert the entity into the active cell in asAvailableMaleByTypeImmiScratch. */
    void om_asAvailableMaleByTypeImmiScratch_insert();

    /** Update the active cell index of table asAvailableMaleByTypeImmiScratch using agentvars in the Person agent. */
    void om_asAvailableMaleByTypeImmiScratch_update_cell();

    /** Erase the entity from the active cell in asAvailableMaleByType. */
    void om_asAvailableMaleByType_erase();

    /** Evaluate and assign expression for om_asAvailableMaleByType_filter. */
    void om_asAvailableMaleByType_filter_update_identity();

    /** Insert the entity into the active cell in asAvailableMaleByType. */
    void om_asAvailableMaleByType_insert();

    /** Update the active cell index of table asAvailableMaleByType using agentvars in the Person agent. */
    void om_asAvailableMaleByType_update_cell();

    /** Erase the entity from the active cell in asAvailableMaleImmiScratch. */
    void om_asAvailableMaleImmiScratch_erase();

    /** Evaluate and assign expression for om_asAvailableMaleImmiScratch_filter. */
    void om_asAvailableMaleImmiScratch_filter_update_identity();

    /** Insert the entity into the active cell in asAvailableMaleImmiScratch. */
    void om_asAvailableMaleImmiScratch_insert();

    /** Update the active cell index of table asAvailableMaleImmiScratch using agentvars in the Person agent. */
    void om_asAvailableMaleImmiScratch_update_cell();

    /** Erase the entity from the active cell in asAvailableMale. */
    void om_asAvailableMale_erase();

    /** Evaluate and assign expression for om_asAvailableMale_filter. */
    void om_asAvailableMale_filter_update_identity();

    /** Insert the entity into the active cell in asAvailableMale. */
    void om_asAvailableMale_insert();

    /** Update the active cell index of table asAvailableMale using agentvars in the Person agent. */
    void om_asAvailableMale_update_cell();

    /** Erase the entity from the active cell in asFemaleInUnionByAgeAndPartnerAgeImmiScratch. */
    void om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_erase();

    /** Evaluate and assign expression for om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_filter. */
    void om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_filter_update_identity();

    /** Insert the entity into the active cell in asFemaleInUnionByAgeAndPartnerAgeImmiScratch. */
    void om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_insert();

    /** Update the active cell index of table asFemaleInUnionByAgeAndPartnerAgeImmiScratch using agentvars in the Person agent. */
    void om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_update_cell();

    /** Erase the entity from the active cell in asFemaleInUnionByAgeAndPartnerAge. */
    void om_asFemaleInUnionByAgeAndPartnerAge_erase();

    /** Evaluate and assign expression for om_asFemaleInUnionByAgeAndPartnerAge_filter. */
    void om_asFemaleInUnionByAgeAndPartnerAge_filter_update_identity();

    /** Insert the entity into the active cell in asFemaleInUnionByAgeAndPartnerAge. */
    void om_asFemaleInUnionByAgeAndPartnerAge_insert();

    /** Update the active cell index of table asFemaleInUnionByAgeAndPartnerAge using agentvars in the Person agent. */
    void om_asFemaleInUnionByAgeAndPartnerAge_update_cell();

    /** Erase the entity from the active cell in asPotentialImmigrantMothers. */
    void om_asPotentialImmigrantMothers_erase();

    /** Evaluate and assign expression for om_asPotentialImmigrantMothers_filter. */
    void om_asPotentialImmigrantMothers_filter_update_identity();

    /** Insert the entity into the active cell in asPotentialImmigrantMothers. */
    void om_asPotentialImmigrantMothers_insert();

    /** Update the active cell index of table asPotentialImmigrantMothers using agentvars in the Person agent. */
    void om_asPotentialImmigrantMothers_update_cell();

    /** Erase the entity from the active cell in asPotentialSchoolOneStudentToProcess. */
    void om_asPotentialSchoolOneStudentToProcess_erase();

    /** Evaluate and assign expression for om_asPotentialSchoolOneStudentToProcess_filter. */
    void om_asPotentialSchoolOneStudentToProcess_filter_update_identity();

    /** Insert the entity into the active cell in asPotentialSchoolOneStudentToProcess. */
    void om_asPotentialSchoolOneStudentToProcess_insert();

    /** Update the active cell index of table asPotentialSchoolOneStudentToProcess using agentvars in the Person agent. */
    void om_asPotentialSchoolOneStudentToProcess_update_cell();

    /** Erase the entity from the active cell in asPotentialSchoolOneStudent. */
    void om_asPotentialSchoolOneStudent_erase();

    /** Evaluate and assign expression for om_asPotentialSchoolOneStudent_filter. */
    void om_asPotentialSchoolOneStudent_filter_update_identity();

    /** Insert the entity into the active cell in asPotentialSchoolOneStudent. */
    void om_asPotentialSchoolOneStudent_insert();

    /** Update the active cell index of table asPotentialSchoolOneStudent using agentvars in the Person agent. */
    void om_asPotentialSchoolOneStudent_update_cell();

    /** Erase the entity from the active cell in asPotentialSchoolTwoStudentToProcess. */
    void om_asPotentialSchoolTwoStudentToProcess_erase();

    /** Evaluate and assign expression for om_asPotentialSchoolTwoStudentToProcess_filter. */
    void om_asPotentialSchoolTwoStudentToProcess_filter_update_identity();

    /** Insert the entity into the active cell in asPotentialSchoolTwoStudentToProcess. */
    void om_asPotentialSchoolTwoStudentToProcess_insert();

    /** Update the active cell index of table asPotentialSchoolTwoStudentToProcess using agentvars in the Person agent. */
    void om_asPotentialSchoolTwoStudentToProcess_update_cell();

    /** Erase the entity from the active cell in asPotentialSchoolTwoStudent. */
    void om_asPotentialSchoolTwoStudent_erase();

    /** Evaluate and assign expression for om_asPotentialSchoolTwoStudent_filter. */
    void om_asPotentialSchoolTwoStudent_filter_update_identity();

    /** Insert the entity into the active cell in asPotentialSchoolTwoStudent. */
    void om_asPotentialSchoolTwoStudent_insert();

    /** Update the active cell index of table asPotentialSchoolTwoStudent using agentvars in the Person agent. */
    void om_asPotentialSchoolTwoStudent_update_cell();

    /** Erase the entity from the active cell in asResidentBabies. */
    void om_asResidentBabies_erase();

    /** Evaluate and assign expression for om_asResidentBabies_filter. */
    void om_asResidentBabies_filter_update_identity();

    /** Insert the entity into the active cell in asResidentBabies. */
    void om_asResidentBabies_insert();

    /** Update the active cell index of table asResidentBabies using agentvars in the Person agent. */
    void om_asResidentBabies_update_cell();

    /** Erase the entity from the active cell in asResidentsAge0SexGeo. */
    void om_asResidentsAge0SexGeo_erase();

    /** Evaluate and assign expression for om_asResidentsAge0SexGeo_filter. */
    void om_asResidentsAge0SexGeo_filter_update_identity();

    /** Insert the entity into the active cell in asResidentsAge0SexGeo. */
    void om_asResidentsAge0SexGeo_insert();

    /** Update the active cell index of table asResidentsAge0SexGeo using agentvars in the Person agent. */
    void om_asResidentsAge0SexGeo_update_cell();

    /** Erase the entity from the active cell in asResidentsAge0Sex. */
    void om_asResidentsAge0Sex_erase();

    /** Evaluate and assign expression for om_asResidentsAge0Sex_filter. */
    void om_asResidentsAge0Sex_filter_update_identity();

    /** Insert the entity into the active cell in asResidentsAge0Sex. */
    void om_asResidentsAge0Sex_insert();

    /** Update the active cell index of table asResidentsAge0Sex using agentvars in the Person agent. */
    void om_asResidentsAge0Sex_update_cell();

    /** Erase the entity from the active cell in asSimBornAge0. */
    void om_asSimBornAge0_erase();

    /** Evaluate and assign expression for om_asSimBornAge0_filter. */
    void om_asSimBornAge0_filter_update_identity();

    /** Insert the entity into the active cell in asSimBornAge0. */
    void om_asSimBornAge0_insert();

    /** Update the active cell index of table asSimBornAge0 using agentvars in the Person agent. */
    void om_asSimBornAge0_update_cell();

    /** Erase the entity from the active cell in asWantToMove. */
    void om_asWantToMove_erase();

    /** Evaluate and assign expression for om_asWantToMove_filter. */
    void om_asWantToMove_filter_update_identity();

    /** Insert the entity into the active cell in asWantToMove. */
    void om_asWantToMove_insert();

    /** Update the active cell index of table asWantToMove using agentvars in the Person agent. */
    void om_asWantToMove_update_cell();

    /** Erase the entity from the active cell in asWomenNoChildren. */
    void om_asWomenNoChildren_erase();

    /** Evaluate and assign expression for om_asWomenNoChildren_filter. */
    void om_asWomenNoChildren_filter_update_identity();

    /** Insert the entity into the active cell in asWomenNoChildren. */
    void om_asWomenNoChildren_insert();

    /** Update the active cell index of table asWomenNoChildren using agentvars in the Person agent. */
    void om_asWomenNoChildren_update_cell();

    /** Erase the entity from the active cell in asWomenWithChildren. */
    void om_asWomenWithChildren_erase();

    /** Evaluate and assign expression for om_asWomenWithChildren_filter. */
    void om_asWomenWithChildren_filter_update_identity();

    /** Insert the entity into the active cell in asWomenWithChildren. */
    void om_asWomenWithChildren_insert();

    /** Update the active cell index of table asWomenWithChildren using agentvars in the Person agent. */
    void om_asWomenWithChildren_update_cell();

    /** One-time calculation of the offsets of attributes and increments in the containing entity. */
    void om_assign_member_offsets();

    /** Check that starting value of time is valid and raise run-time error if not. */
    void om_check_starting_time();

    /** Remove the entity in each entity set when it leaves the simulation. */
    void om_finalize_entity_sets();

    /** Remove each event in the entity from the event queue when it leaves the simulation. */
    void om_finalize_events();

    /** Set all links in agent to nullptr when the entity leaves the simulation. */
    void om_finalize_links();

    /** Empty all multilinks in agent when the entity leaves the simulation. */
    void om_finalize_multilinks();

    /** Finish the entity's pending increments in each table when it leaves the simulation. */
    void om_finalize_tables();

    /** Return unique entity_id of this entity. */
    int om_get_entity_id();

    /** Return current time of this entity. */
    Time om_get_time();

    /** Initialization of data members before the entity enters simulation. */
    void om_initialize_data_members();

    /** Initialization of data members of the 'zero' entity to default values for the type (0). */
    void om_initialize_data_members0();

    /** Initialize derived attributes before the entity enters the simulation. */
    void om_initialize_derived_attributes();

    /** Insert the entity in each entity set when it enters the simulation. */
    void om_initialize_entity_sets();

    /** Force event time calculation for each event in the entity when it enters simulation. */
    void om_initialize_events();

    /** Initialize each identity attribute before developer code in Start executes. */
    void om_initialize_identity_attributes();

    /** Initialize the entity's increments in each table when it enters the simulation. */
    void om_initialize_tables();

    /** Initialize time and age for this entity. */
    void om_initialize_time_and_age();

    /** Maintain reciprocal link on erase in multilink mlBioFatherChildren in agent Person. */
    void om_mlBioFatherChildren_erase(entity_ptr<Person> lnk);

    /** Maintain reciprocal link on insert in multilink mlBioFatherChildren in agent Person. */
    void om_mlBioFatherChildren_insert(entity_ptr<Person> lnk);

    /** Implement side effects of changes in multilink mlBioFatherChildren in agent Person. */
    void om_mlBioFatherChildren_side_effects();

    /** Maintain reciprocal link on erase in multilink mlBioMotherChildren in agent Person. */
    void om_mlBioMotherChildren_erase(entity_ptr<Person> lnk);

    /** Maintain reciprocal link on insert in multilink mlBioMotherChildren in agent Person. */
    void om_mlBioMotherChildren_insert(entity_ptr<Person> lnk);

    /** Implement side effects of changes in multilink mlBioMotherChildren in agent Person. */
    void om_mlBioMotherChildren_side_effects();

    /** Evaluate the multilink agentvar om_mlHHFatherChildren_count. */
    void om_mlHHFatherChildren_count_evaluate();

    /** Maintain reciprocal link on erase in multilink mlHHFatherChildren in agent Person. */
    void om_mlHHFatherChildren_erase(entity_ptr<Person> lnk);

    /** Maintain reciprocal link on insert in multilink mlHHFatherChildren in agent Person. */
    void om_mlHHFatherChildren_insert(entity_ptr<Person> lnk);

    /** Implement side effects of changes in multilink mlHHFatherChildren in agent Person. */
    void om_mlHHFatherChildren_side_effects();

    /** Evaluate the multilink agentvar om_mlHHFatherChildren_sum_over_is_alive. */
    void om_mlHHFatherChildren_sum_over_is_alive_evaluate();

    /** Evaluate the multilink agentvar om_mlHHMotherChildren_count. */
    void om_mlHHMotherChildren_count_evaluate();

    /** Maintain reciprocal link on erase in multilink mlHHMotherChildren in agent Person. */
    void om_mlHHMotherChildren_erase(entity_ptr<Person> lnk);

    /** Maintain reciprocal link on insert in multilink mlHHMotherChildren in agent Person. */
    void om_mlHHMotherChildren_insert(entity_ptr<Person> lnk);

    /** Evaluate the multilink agentvar om_mlHHMotherChildren_min_over_integer_age. */
    void om_mlHHMotherChildren_min_over_integer_age_evaluate();

    /** Implement side effects of changes in multilink mlHHMotherChildren in agent Person. */
    void om_mlHHMotherChildren_side_effects();

    /** Evaluate the multilink agentvar om_mlHHMotherChildren_sum_over_is_alive. */
    void om_mlHHMotherChildren_sum_over_is_alive_evaluate();

    /** Implement notification before changing adult_survival in agent Person. */
    void om_notify_adult_survival();

    /** Implement notification before changing age in agent Person. */
    void om_notify_age();

    /** Implement notification before changing age_last_birth in agent Person. */
    void om_notify_age_last_birth();

    /** Implement notification before changing age_mig in agent Person. */
    void om_notify_age_mig();

    /** Implement notification before changing age_youngest_child in agent Person. */
    void om_notify_age_youngest_child();

    /** Implement notification before changing all_year in agent Person. */
    void om_notify_all_year();

    /** Implement notification before changing calendar_year in agent Person. */
    void om_notify_calendar_year();

    /** Implement notification before changing case_seed in agent Person. */
    void om_notify_case_seed();

    /** Implement notification before changing child_agegr in agent Person. */
    void om_notify_child_agegr();

    /** Implement notification before changing child_agegr_part in agent Person. */
    void om_notify_child_agegr_part();

    /** Implement notification before changing child_mortality in agent Person. */
    void om_notify_child_mortality();

    /** Implement notification before changing child_mortality_group in agent Person. */
    void om_notify_child_mortality_group();

    /** Implement notification before changing children_in_household in agent Person. */
    void om_notify_children_in_household();

    /** Implement notification before changing creation_type in agent Person. */
    void om_notify_creation_type();

    /** Implement notification before changing educ1_group in agent Person. */
    void om_notify_educ1_group();

    /** Implement notification before changing educ_mother in agent Person. */
    void om_notify_educ_mother();

    /** Implement notification before changing educ_one_entry_age in agent Person. */
    void om_notify_educ_one_entry_age();

    /** Implement notification before changing educ_one_fate in agent Person. */
    void om_notify_educ_one_fate();

    /** Implement notification before changing educ_one_geo in agent Person. */
    void om_notify_educ_one_geo();

    /** Implement notification before changing educ_one_grade in agent Person. */
    void om_notify_educ_one_grade();

    /** Implement notification before changing educ_one_grade_attended in agent Person. */
    void om_notify_educ_one_grade_attended();

    /** Implement notification before changing educ_one_grade_fate in agent Person. */
    void om_notify_educ_one_grade_fate();

    /** Implement notification before changing educ_one_grade_passed in agent Person. */
    void om_notify_educ_one_grade_passed();

    /** Implement notification before changing educ_one_group in agent Person. */
    void om_notify_educ_one_group();

    /** Implement notification before changing educ_one_level in agent Person. */
    void om_notify_educ_one_level();

    /** Implement notification before changing educ_one_required_rooms in agent Person. */
    void om_notify_educ_one_required_rooms();

    /** Implement notification before changing educ_one_required_teachers in agent Person. */
    void om_notify_educ_one_required_teachers();

    /** Implement notification before changing educ_one_status in agent Person. */
    void om_notify_educ_one_status();

    /** Implement notification before changing educ_one_to_process in agent Person. */
    void om_notify_educ_one_to_process();

    /** Implement notification before changing educ_two_delay in agent Person. */
    void om_notify_educ_two_delay();

    /** Implement notification before changing educ_two_geo in agent Person. */
    void om_notify_educ_two_geo();

    /** Implement notification before changing educ_two_grade_attended in agent Person. */
    void om_notify_educ_two_grade_attended();

    /** Implement notification before changing educ_two_grade_passed in agent Person. */
    void om_notify_educ_two_grade_passed();

    /** Implement notification before changing educ_two_group in agent Person. */
    void om_notify_educ_two_group();

    /** Implement notification before changing educ_two_level in agent Person. */
    void om_notify_educ_two_level();

    /** Implement notification before changing educ_two_status in agent Person. */
    void om_notify_educ_two_status();

    /** Implement notification before changing educ_two_to_process in agent Person. */
    void om_notify_educ_two_to_process();

    /** Implement notification before changing entity_id in agent Person. */
    void om_notify_entity_id();

    /** Implement notification before changing ethnicity in agent Person. */
    void om_notify_ethnicity();

    /** Implement notification before changing ethnicity_short in agent Person. */
    void om_notify_ethnicity_short();

    /** Implement notification before changing events in agent Person. */
    void om_notify_events();

    /** Implement notification before changing ever_resident in agent Person. */
    void om_notify_ever_resident();

    /** Implement notification before changing ever_union in agent Person. */
    void om_notify_ever_union();

    /** Implement notification before changing family_role in agent Person. */
    void om_notify_family_role();

    /** Implement notification before changing female_spouse_age in agent Person. */
    void om_notify_female_spouse_age();

    /** Implement notification before changing fertile_age in agent Person. */
    void om_notify_fertile_age();

    /** Implement notification before changing first_move_done in agent Person. */
    void om_notify_first_move_done();

    /** Implement notification before changing geo in agent Person. */
    void om_notify_geo();

    /** Implement notification before changing geo_birth in agent Person. */
    void om_notify_geo_birth();

    /** Implement notification before changing geo_nat in agent Person. */
    void om_notify_geo_nat();

    /** Implement notification before changing geo_prev in agent Person. */
    void om_notify_geo_prev();

    /** Implement notification before changing geo_want_to_move in agent Person. */
    void om_notify_geo_want_to_move();

    /** Implement notification before changing got_prenat_care in agent Person. */
    void om_notify_got_prenat_care();

    /** Implement notification before changing has_passed_primary in agent Person. */
    void om_notify_has_passed_primary();

    /** Implement notification before changing has_spouse in agent Person. */
    void om_notify_has_spouse();

    /** Implement notification before changing in_hci_sample in agent Person. */
    void om_notify_in_hci_sample();

    /** Implement notification before changing in_projected_time in agent Person. */
    void om_notify_in_projected_time();

    /** Implement notification before changing in_sel_years in agent Person. */
    void om_notify_in_sel_years();

    /** Implement notification before changing in_selected_year in agent Person. */
    void om_notify_in_selected_year();

    /** Implement notification before changing ind_hci in agent Person. */
    void om_notify_ind_hci();

    /** Implement notification before changing integer_age in agent Person. */
    void om_notify_integer_age();

    /** Implement notification before changing is_aded0 in agent Person. */
    void om_notify_is_aded0();

    /** Implement notification before changing is_aded1 in agent Person. */
    void om_notify_is_aded1();

    /** Implement notification before changing is_aded2 in agent Person. */
    void om_notify_is_aded2();

    /** Implement notification before changing is_adult in agent Person. */
    void om_notify_is_adult();

    /** Implement notification before changing is_alive in agent Person. */
    void om_notify_is_alive();

    /** Implement notification before changing is_blocked_from_marriage in agent Person. */
    void om_notify_is_blocked_from_marriage();

    /** Implement notification before changing is_child in agent Person. */
    void om_notify_is_child();

    /** Implement notification before changing is_educ_one_student in agent Person. */
    void om_notify_is_educ_one_student();

    /** Implement notification before changing is_fertile in agent Person. */
    void om_notify_is_fertile();

    /** Implement notification before changing is_immunized in agent Person. */
    void om_notify_is_immunized();

    /** Implement notification before changing is_mortal in agent Person. */
    void om_notify_is_mortal();

    /** Implement notification before changing is_old in agent Person. */
    void om_notify_is_old();

    /** Implement notification before changing is_ready_for_birthtables in agent Person. */
    void om_notify_is_ready_for_birthtables();

    /** Implement notification before changing is_resident in agent Person. */
    void om_notify_is_resident();

    /** Implement notification before changing is_stunted in agent Person. */
    void om_notify_is_stunted();

    /** Implement notification before changing lBioFather in agent Person. */
    void om_notify_lBioFather();

    /** Implement notification before changing lBioMother in agent Person. */
    void om_notify_lBioMother();

    /** Implement notification before changing lCalibrator in agent Person. */
    void om_notify_lCalibrator();

    /** Implement notification before changing lHHFather in agent Person. */
    void om_notify_lHHFather();

    /** Implement notification before changing lHHMother in agent Person. */
    void om_notify_lHHMother();

    /** Implement notification before changing lSpouse in agent Person. */
    void om_notify_lSpouse();

    /** Implement notification before changing lStartValues in agent Person. */
    void om_notify_lStartValues();

    /** Implement notification before changing lives_with_dependent_child in agent Person. */
    void om_notify_lives_with_dependent_child();

    /** Implement notification before changing male_age in agent Person. */
    void om_notify_male_age();

    /** Implement notification before changing male_spouse_age in agent Person. */
    void om_notify_male_spouse_age();

    /** Implement notification before changing moth_agegr in agent Person. */
    void om_notify_moth_agegr();

    /** Implement notification before changing moth_agegr_part in agent Person. */
    void om_notify_moth_agegr_part();

    /** Implement notification before changing mother_age_at_birth in agent Person. */
    void om_notify_mother_age_at_birth();

    /** Implement notification before changing om_active_spell_duration_FOR_this_parity_spell_X_true in agent Person. */
    void om_notify_om_active_spell_duration_FOR_this_parity_spell_X_true();

    /** Implement notification before changing om_aggregate_FOR_ethnicity_X_ETHNICITY_SHORT in agent Person. */
    void om_notify_om_aggregate_FOR_ethnicity_X_ETHNICITY_SHORT();

    /** Implement notification before changing om_aggregate_FOR_geo_X_GEO_NAT in agent Person. */
    void om_notify_om_aggregate_FOR_geo_X_GEO_NAT();

    /** Implement notification before changing om_aggregate_FOR_geo_X_REGION_INT in agent Person. */
    void om_notify_om_aggregate_FOR_geo_X_REGION_INT();

    /** Implement notification before changing om_aggregate_FOR_geo_birth_X_GEO_NAT in agent Person. */
    void om_notify_om_aggregate_FOR_geo_birth_X_GEO_NAT();

    /** Implement notification before changing om_aggregate_FOR_geo_birth_X_REGION_INT in agent Person. */
    void om_notify_om_aggregate_FOR_geo_birth_X_REGION_INT();

    /** Implement notification before changing om_aggregate_FOR_region_birth_X_REGION_NAT in agent Person. */
    void om_notify_om_aggregate_FOR_region_birth_X_REGION_NAT();

    /** Implement notification before changing om_aggregate_FOR_region_int_X_REGION_NAT in agent Person. */
    void om_notify_om_aggregate_FOR_region_int_X_REGION_NAT();

    /** Implement notification before changing om_aia_0 in agent Person. */
    void om_notify_om_aia_0();

    /** Implement notification before changing om_aia_1 in agent Person. */
    void om_notify_om_aia_1();

    /** Implement notification before changing om_aia_10 in agent Person. */
    void om_notify_om_aia_10();

    /** Implement notification before changing om_aia_11 in agent Person. */
    void om_notify_om_aia_11();

    /** Implement notification before changing om_aia_12 in agent Person. */
    void om_notify_om_aia_12();

    /** Implement notification before changing om_aia_13 in agent Person. */
    void om_notify_om_aia_13();

    /** Implement notification before changing om_aia_14 in agent Person. */
    void om_notify_om_aia_14();

    /** Implement notification before changing om_aia_15 in agent Person. */
    void om_notify_om_aia_15();

    /** Implement notification before changing om_aia_16 in agent Person. */
    void om_notify_om_aia_16();

    /** Implement notification before changing om_aia_17 in agent Person. */
    void om_notify_om_aia_17();

    /** Implement notification before changing om_aia_18 in agent Person. */
    void om_notify_om_aia_18();

    /** Implement notification before changing om_aia_19 in agent Person. */
    void om_notify_om_aia_19();

    /** Implement notification before changing om_aia_2 in agent Person. */
    void om_notify_om_aia_2();

    /** Implement notification before changing om_aia_20 in agent Person. */
    void om_notify_om_aia_20();

    /** Implement notification before changing om_aia_21 in agent Person. */
    void om_notify_om_aia_21();

    /** Implement notification before changing om_aia_22 in agent Person. */
    void om_notify_om_aia_22();

    /** Implement notification before changing om_aia_23 in agent Person. */
    void om_notify_om_aia_23();

    /** Implement notification before changing om_aia_24 in agent Person. */
    void om_notify_om_aia_24();

    /** Implement notification before changing om_aia_25 in agent Person. */
    void om_notify_om_aia_25();

    /** Implement notification before changing om_aia_26 in agent Person. */
    void om_notify_om_aia_26();

    /** Implement notification before changing om_aia_27 in agent Person. */
    void om_notify_om_aia_27();

    /** Implement notification before changing om_aia_28 in agent Person. */
    void om_notify_om_aia_28();

    /** Implement notification before changing om_aia_29 in agent Person. */
    void om_notify_om_aia_29();

    /** Implement notification before changing om_aia_3 in agent Person. */
    void om_notify_om_aia_3();

    /** Implement notification before changing om_aia_30 in agent Person. */
    void om_notify_om_aia_30();

    /** Implement notification before changing om_aia_31 in agent Person. */
    void om_notify_om_aia_31();

    /** Implement notification before changing om_aia_32 in agent Person. */
    void om_notify_om_aia_32();

    /** Implement notification before changing om_aia_33 in agent Person. */
    void om_notify_om_aia_33();

    /** Implement notification before changing om_aia_34 in agent Person. */
    void om_notify_om_aia_34();

    /** Implement notification before changing om_aia_35 in agent Person. */
    void om_notify_om_aia_35();

    /** Implement notification before changing om_aia_36 in agent Person. */
    void om_notify_om_aia_36();

    /** Implement notification before changing om_aia_37 in agent Person. */
    void om_notify_om_aia_37();

    /** Implement notification before changing om_aia_38 in agent Person. */
    void om_notify_om_aia_38();

    /** Implement notification before changing om_aia_39 in agent Person. */
    void om_notify_om_aia_39();

    /** Implement notification before changing om_aia_4 in agent Person. */
    void om_notify_om_aia_4();

    /** Implement notification before changing om_aia_40 in agent Person. */
    void om_notify_om_aia_40();

    /** Implement notification before changing om_aia_5 in agent Person. */
    void om_notify_om_aia_5();

    /** Implement notification before changing om_aia_6 in agent Person. */
    void om_notify_om_aia_6();

    /** Implement notification before changing om_aia_7 in agent Person. */
    void om_notify_om_aia_7();

    /** Implement notification before changing om_aia_8 in agent Person. */
    void om_notify_om_aia_8();

    /** Implement notification before changing om_aia_9 in agent Person. */
    void om_notify_om_aia_9();

    /** Implement notification before changing om_asAllFertilePersonsForFertilityAlignmentByAge_filter in agent Person. */
    void om_notify_om_asAllFertilePersonsForFertilityAlignmentByAge_filter();

    /** Implement notification before changing om_asAllFertilePersonsForFertilityAlignment_filter in agent Person. */
    void om_notify_om_asAllFertilePersonsForFertilityAlignment_filter();

    /** Implement notification before changing om_asAllPerson_filter in agent Person. */
    void om_notify_om_asAllPerson_filter();

    /** Implement notification before changing om_asAvailableMaleByTypeImmiScratch_filter in agent Person. */
    void om_notify_om_asAvailableMaleByTypeImmiScratch_filter();

    /** Implement notification before changing om_asAvailableMaleByType_filter in agent Person. */
    void om_notify_om_asAvailableMaleByType_filter();

    /** Implement notification before changing om_asAvailableMaleImmiScratch_filter in agent Person. */
    void om_notify_om_asAvailableMaleImmiScratch_filter();

    /** Implement notification before changing om_asAvailableMale_filter in agent Person. */
    void om_notify_om_asAvailableMale_filter();

    /** Implement notification before changing om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_filter in agent Person. */
    void om_notify_om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_filter();

    /** Implement notification before changing om_asFemaleInUnionByAgeAndPartnerAge_filter in agent Person. */
    void om_notify_om_asFemaleInUnionByAgeAndPartnerAge_filter();

    /** Implement notification before changing om_asPotentialImmigrantMothers_filter in agent Person. */
    void om_notify_om_asPotentialImmigrantMothers_filter();

    /** Implement notification before changing om_asPotentialSchoolOneStudentToProcess_filter in agent Person. */
    void om_notify_om_asPotentialSchoolOneStudentToProcess_filter();

    /** Implement notification before changing om_asPotentialSchoolOneStudent_filter in agent Person. */
    void om_notify_om_asPotentialSchoolOneStudent_filter();

    /** Implement notification before changing om_asPotentialSchoolTwoStudentToProcess_filter in agent Person. */
    void om_notify_om_asPotentialSchoolTwoStudentToProcess_filter();

    /** Implement notification before changing om_asPotentialSchoolTwoStudent_filter in agent Person. */
    void om_notify_om_asPotentialSchoolTwoStudent_filter();

    /** Implement notification before changing om_asResidentBabies_filter in agent Person. */
    void om_notify_om_asResidentBabies_filter();

    /** Implement notification before changing om_asResidentsAge0SexGeo_filter in agent Person. */
    void om_notify_om_asResidentsAge0SexGeo_filter();

    /** Implement notification before changing om_asResidentsAge0Sex_filter in agent Person. */
    void om_notify_om_asResidentsAge0Sex_filter();

    /** Implement notification before changing om_asSimBornAge0_filter in agent Person. */
    void om_notify_om_asSimBornAge0_filter();

    /** Implement notification before changing om_asWantToMove_filter in agent Person. */
    void om_notify_om_asWantToMove_filter();

    /** Implement notification before changing om_asWomenNoChildren_filter in agent Person. */
    void om_notify_om_asWomenNoChildren_filter();

    /** Implement notification before changing om_asWomenWithChildren_filter in agent Person. */
    void om_notify_om_asWomenWithChildren_filter();

    /** Implement notification before changing om_duration in agent Person. */
    void om_notify_om_duration();

    /** Implement notification before changing om_duration_FOR_educ_one_fate_X_EOL_HIGH in agent Person. */
    void om_notify_om_duration_FOR_educ_one_fate_X_EOL_HIGH();

    /** Implement notification before changing om_duration_FOR_educ_one_fate_X_EOL_LOW in agent Person. */
    void om_notify_om_duration_FOR_educ_one_fate_X_EOL_LOW();

    /** Implement notification before changing om_duration_FOR_educ_one_fate_X_EOL_MEDIUM in agent Person. */
    void om_notify_om_duration_FOR_educ_one_fate_X_EOL_MEDIUM();

    /** Implement notification before changing om_duration_FOR_educ_one_level_X_EOL_HIGH in agent Person. */
    void om_notify_om_duration_FOR_educ_one_level_X_EOL_HIGH();

    /** Implement notification before changing om_duration_FOR_educ_one_level_X_EOL_LOW in agent Person. */
    void om_notify_om_duration_FOR_educ_one_level_X_EOL_LOW();

    /** Implement notification before changing om_duration_FOR_educ_one_level_X_EOL_MEDIUM in agent Person. */
    void om_notify_om_duration_FOR_educ_one_level_X_EOL_MEDIUM();

    /** Implement notification before changing om_duration_FOR_educ_two_level_X_ETL_GRADUATE in agent Person. */
    void om_notify_om_duration_FOR_educ_two_level_X_ETL_GRADUATE();

    /** Implement notification before changing om_duration_FOR_educ_two_level_X_ETL_INCOMPLETE in agent Person. */
    void om_notify_om_duration_FOR_educ_two_level_X_ETL_INCOMPLETE();

    /** Implement notification before changing om_duration_FOR_educ_two_level_X_ETL_NEVER in agent Person. */
    void om_notify_om_duration_FOR_educ_two_level_X_ETL_NEVER();

    /** Implement notification before changing om_duration_FOR_ever_union_X_true in agent Person. */
    void om_notify_om_duration_FOR_ever_union_X_true();

    /** Implement notification before changing om_duration_FOR_got_prenat_care_X_GPC_YES in agent Person. */
    void om_notify_om_duration_FOR_got_prenat_care_X_GPC_YES();

    /** Implement notification before changing om_duration_FOR_has_spouse_X_true in agent Person. */
    void om_notify_om_duration_FOR_has_spouse_X_true();

    /** Implement notification before changing om_duration_FOR_is_aded0_X_true in agent Person. */
    void om_notify_om_duration_FOR_is_aded0_X_true();

    /** Implement notification before changing om_duration_FOR_is_aded1_X_true in agent Person. */
    void om_notify_om_duration_FOR_is_aded1_X_true();

    /** Implement notification before changing om_duration_FOR_is_aded2_X_true in agent Person. */
    void om_notify_om_duration_FOR_is_aded2_X_true();

    /** Implement notification before changing om_duration_FOR_is_child_X_true in agent Person. */
    void om_notify_om_duration_FOR_is_child_X_true();

    /** Implement notification before changing om_duration_FOR_is_immunized_X_true in agent Person. */
    void om_notify_om_duration_FOR_is_immunized_X_true();

    /** Implement notification before changing om_duration_FOR_is_old_X_true in agent Person. */
    void om_notify_om_duration_FOR_is_old_X_true();

    /** Implement notification before changing om_duration_FOR_tab_out_of_primary_X_true in agent Person. */
    void om_notify_om_duration_FOR_tab_out_of_primary_X_true();

    /** Implement notification before changing om_duration_FOR_years_preschool_X_0 in agent Person. */
    void om_notify_om_duration_FOR_years_preschool_X_0();

    /** Implement notification before changing om_duration_FOR_years_preschool_X_1 in agent Person. */
    void om_notify_om_duration_FOR_years_preschool_X_1();

    /** Implement notification before changing om_duration_FOR_years_preschool_X_2 in agent Person. */
    void om_notify_om_duration_FOR_years_preschool_X_2();

    /** Implement notification before changing om_entrances_FOR_educ_one_grade_attended_X_1 in agent Person. */
    void om_notify_om_entrances_FOR_educ_one_grade_attended_X_1();

    /** Implement notification before changing om_entrances_FOR_has_passed_primary_X_true in agent Person. */
    void om_notify_om_entrances_FOR_has_passed_primary_X_true();

    /** Implement notification before changing om_mlHHFatherChildren_count in agent Person. */
    void om_notify_om_mlHHFatherChildren_count();

    /** Implement notification before changing om_mlHHFatherChildren_sum_over_is_alive in agent Person. */
    void om_notify_om_mlHHFatherChildren_sum_over_is_alive();

    /** Implement notification before changing om_mlHHMotherChildren_count in agent Person. */
    void om_notify_om_mlHHMotherChildren_count();

    /** Implement notification before changing om_mlHHMotherChildren_min_over_integer_age in agent Person. */
    void om_notify_om_mlHHMotherChildren_min_over_integer_age();

    /** Implement notification before changing om_mlHHMotherChildren_sum_over_is_alive in agent Person. */
    void om_notify_om_mlHHMotherChildren_sum_over_is_alive();

    /** Implement notification before changing om_self_scheduling_split_FOR_age_X_AGE_MIG_PART in agent Person. */
    void om_notify_om_self_scheduling_split_FOR_age_X_AGE_MIG_PART();

    /** Implement notification before changing om_self_scheduling_split_FOR_om_active_spell_duration_FOR_this_parity_spell_X_true_X_DUR_TIME_IN_PARITY in agent Person. */
    void om_notify_om_self_scheduling_split_FOR_om_active_spell_duration_FOR_this_parity_spell_X_true_X_DUR_TIME_IN_PARITY();

    /** Implement notification before changing om_split_FOR_age_last_birth_X_MOTH_AGEGR_PART in agent Person. */
    void om_notify_om_split_FOR_age_last_birth_X_MOTH_AGEGR_PART();

    /** Implement notification before changing om_split_FOR_age_youngest_child_X_CHILD_AGEGR_PART in agent Person. */
    void om_notify_om_split_FOR_age_youngest_child_X_CHILD_AGEGR_PART();

    /** Implement notification before changing om_split_FOR_integer_age_X_TAB_AGEC5 in agent Person. */
    void om_notify_om_split_FOR_integer_age_X_TAB_AGEC5();

    /** Implement notification before changing om_transitions_FOR_integer_age_X_14_X_15 in agent Person. */
    void om_notify_om_transitions_FOR_integer_age_X_14_X_15();

    /** Implement notification before changing om_transitions_FOR_is_alive_X_false_X_true in agent Person. */
    void om_notify_om_transitions_FOR_is_alive_X_false_X_true();

    /** Implement notification before changing om_transitions_FOR_is_alive_X_true_X_false in agent Person. */
    void om_notify_om_transitions_FOR_is_alive_X_true_X_false();

    /** Implement notification before changing om_transitions_FOR_survived_early_years_X_false_X_true in agent Person. */
    void om_notify_om_transitions_FOR_survived_early_years_X_false_X_true();

    /** Implement notification before changing om_trigger_changes_FOR_calendar_year in agent Person. */
    void om_notify_om_trigger_changes_FOR_calendar_year();

    /** Implement notification before changing om_trigger_changes_FOR_geo in agent Person. */
    void om_notify_om_trigger_changes_FOR_geo();

    /** Implement notification before changing om_trigger_entrances_FOR_is_ready_for_birthtables_X_true in agent Person. */
    void om_notify_om_trigger_entrances_FOR_is_ready_for_birthtables_X_true();

    /** Implement notification before changing om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false in agent Person. */
    void om_notify_om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false();

    /** Implement notification before changing om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false in agent Person. */
    void om_notify_om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false();

    /** Implement notification before changing om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false in agent Person. */
    void om_notify_om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false();

    /** Implement notification before changing om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false in agent Person. */
    void om_notify_om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false();

    /** Implement notification before changing om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false in agent Person. */
    void om_notify_om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false();

    /** Implement notification before changing om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false in agent Person. */
    void om_notify_om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false();

    /** Implement notification before changing parity in agent Person. */
    void om_notify_parity();

    /** Implement notification before changing preschool_is_decided in agent Person. */
    void om_notify_preschool_is_decided();

    /** Implement notification before changing quality_adjusted_schooling in agent Person. */
    void om_notify_quality_adjusted_schooling();

    /** Implement notification before changing quality_of_schooling in agent Person. */
    void om_notify_quality_of_schooling();

    /** Implement notification before changing ready_to_set_alive in agent Person. */
    void om_notify_ready_to_set_alive();

    /** Implement notification before changing region_birth in agent Person. */
    void om_notify_region_birth();

    /** Implement notification before changing region_int in agent Person. */
    void om_notify_region_int();

    /** Implement notification before changing region_nat in agent Person. */
    void om_notify_region_nat();

    /** Implement notification before changing sel_years in agent Person. */
    void om_notify_sel_years();

    /** Implement notification before changing selected_year10 in agent Person. */
    void om_notify_selected_year10();

    /** Implement notification before changing sex in agent Person. */
    void om_notify_sex();

    /** Implement notification before changing sim_year in agent Person. */
    void om_notify_sim_year();

    /** Implement notification before changing spouse_group in agent Person. */
    void om_notify_spouse_group();

    /** Implement notification before changing survived_early_years in agent Person. */
    void om_notify_survived_early_years();

    /** Implement notification before changing tab_out_of_primary in agent Person. */
    void om_notify_tab_out_of_primary();

    /** Implement notification before changing tab_sim_yob in agent Person. */
    void om_notify_tab_sim_yob();

    /** Implement notification before changing this_parity_spell in agent Person. */
    void om_notify_this_parity_spell();

    /** Implement notification before changing time in agent Person. */
    void om_notify_time();

    /** Implement notification before changing time_first_move in agent Person. */
    void om_notify_time_first_move();

    /** Implement notification before changing time_in_parity in agent Person. */
    void om_notify_time_in_parity();

    /** Implement notification before changing time_last_move in agent Person. */
    void om_notify_time_last_move();

    /** Implement notification before changing time_next_birthday in agent Person. */
    void om_notify_time_next_birthday();

    /** Implement notification before changing time_of_birth in agent Person. */
    void om_notify_time_of_birth();

    /** Implement notification before changing time_of_first_immigration in agent Person. */
    void om_notify_time_of_first_immigration();

    /** Implement notification before changing union1_group in agent Person. */
    void om_notify_union1_group();

    /** Implement notification before changing year_of_birth in agent Person. */
    void om_notify_year_of_birth();

    /** Implement notification before changing year_of_first_immigration in agent Person. */
    void om_notify_year_of_first_immigration();

    /** Implement notification before changing years_of_schooling in agent Person. */
    void om_notify_years_of_schooling();

    /** Implement notification before changing years_preschool in agent Person. */
    void om_notify_years_preschool();

    /** Reset derived attributes before the entity enters the simulation. */
    void om_reset_derived_attributes();

    /** Set the unique entity_id of this entity. */
    void om_set_entity_id();

    /** Implement side effects of changing adult_survival in agent Person. */
    void om_side_effects_adult_survival(double om_old, double om_new);

    /** Implement side effects of changing age in agent Person. */
    void om_side_effects_age(Time om_old, Time om_new);

    /** Implement side effects of changing age_last_birth in agent Person. */
    void om_side_effects_age_last_birth(double om_old, double om_new);

    /** Implement side effects of changing age_mig in agent Person. */
    void om_side_effects_age_mig(AGE_MIG om_old, AGE_MIG om_new);

    /** Implement side effects of changing age_youngest_child in agent Person. */
    void om_side_effects_age_youngest_child(double om_old, double om_new);

    /** Implement side effects of changing all_year in agent Person. */
    void om_side_effects_all_year(ALL_YEAR_RANGE om_old, ALL_YEAR_RANGE om_new);

    /** Implement side effects of changing calendar_year in agent Person. */
    void om_side_effects_calendar_year(ALL_YEAR_RANGE om_old, ALL_YEAR_RANGE om_new);

    /** Implement side effects of changing case_seed in agent Person. */
    void om_side_effects_case_seed(double om_old, double om_new);

    /** Implement side effects of changing child_agegr in agent Person. */
    void om_side_effects_child_agegr(CHILD_AGEGR om_old, CHILD_AGEGR om_new);

    /** Implement side effects of changing child_agegr_part in agent Person. */
    void om_side_effects_child_agegr_part(int om_old, int om_new);

    /** Implement side effects of changing child_mortality in agent Person. */
    void om_side_effects_child_mortality(double om_old, double om_new);

    /** Implement side effects of changing child_mortality_group in agent Person. */
    void om_side_effects_child_mortality_group(CHILD_MORTALITY_GROUP om_old, CHILD_MORTALITY_GROUP om_new);

    /** Implement side effects of changing children_in_household in agent Person. */
    void om_side_effects_children_in_household(short om_old, short om_new);

    /** Implement side effects of changing creation_type in agent Person. */
    void om_side_effects_creation_type(CREATION_TYPE om_old, CREATION_TYPE om_new);

    /** Implement side effects of changing educ1_group in agent Person. */
    void om_side_effects_educ1_group(EDUC1_GROUP om_old, EDUC1_GROUP om_new);

    /** Implement side effects of changing educ_mother in agent Person. */
    void om_side_effects_educ_mother(EDUC_ONE_LEVEL om_old, EDUC_ONE_LEVEL om_new);

    /** Implement side effects of changing educ_one_entry_age in agent Person. */
    void om_side_effects_educ_one_entry_age(EDUC_ONE_ENTRY_AGE om_old, EDUC_ONE_ENTRY_AGE om_new);

    /** Implement side effects of changing educ_one_fate in agent Person. */
    void om_side_effects_educ_one_fate(EDUC_ONE_LEVEL om_old, EDUC_ONE_LEVEL om_new);

    /** Implement side effects of changing educ_one_geo in agent Person. */
    void om_side_effects_educ_one_geo(EDUC_ONE_GEO om_old, EDUC_ONE_GEO om_new);

    /** Implement side effects of changing educ_one_grade in agent Person. */
    void om_side_effects_educ_one_grade(EDUC_ONE_GRADE om_old, EDUC_ONE_GRADE om_new);

    /** Implement side effects of changing educ_one_grade_attended in agent Person. */
    void om_side_effects_educ_one_grade_attended(EDUC_ONE_GRADE0 om_old, EDUC_ONE_GRADE0 om_new);

    /** Implement side effects of changing educ_one_grade_fate in agent Person. */
    void om_side_effects_educ_one_grade_fate(EDUC_ONE_GRADE om_old, EDUC_ONE_GRADE om_new);

    /** Implement side effects of changing educ_one_grade_passed in agent Person. */
    void om_side_effects_educ_one_grade_passed(EDUC_ONE_GRADE0 om_old, EDUC_ONE_GRADE0 om_new);

    /** Implement side effects of changing educ_one_group in agent Person. */
    void om_side_effects_educ_one_group(EDUC_ONE_GROUP om_old, EDUC_ONE_GROUP om_new);

    /** Implement side effects of changing educ_one_level in agent Person. */
    void om_side_effects_educ_one_level(EDUC_ONE_LEVEL om_old, EDUC_ONE_LEVEL om_new);

    /** Implement side effects of changing educ_one_required_rooms in agent Person. */
    void om_side_effects_educ_one_required_rooms(double om_old, double om_new);

    /** Implement side effects of changing educ_one_required_teachers in agent Person. */
    void om_side_effects_educ_one_required_teachers(double om_old, double om_new);

    /** Implement side effects of changing educ_one_status in agent Person. */
    void om_side_effects_educ_one_status(EDUC_ONE_STATUS om_old, EDUC_ONE_STATUS om_new);

    /** Implement side effects of changing educ_one_to_process in agent Person. */
    void om_side_effects_educ_one_to_process(bool om_old, bool om_new);

    /** Implement side effects of changing educ_two_delay in agent Person. */
    void om_side_effects_educ_two_delay(int om_old, int om_new);

    /** Implement side effects of changing educ_two_geo in agent Person. */
    void om_side_effects_educ_two_geo(EDUC_TWO_GEO om_old, EDUC_TWO_GEO om_new);

    /** Implement side effects of changing educ_two_grade_attended in agent Person. */
    void om_side_effects_educ_two_grade_attended(EDUC_TWO_GRADE0 om_old, EDUC_TWO_GRADE0 om_new);

    /** Implement side effects of changing educ_two_grade_passed in agent Person. */
    void om_side_effects_educ_two_grade_passed(EDUC_TWO_GRADE0 om_old, EDUC_TWO_GRADE0 om_new);

    /** Implement side effects of changing educ_two_group in agent Person. */
    void om_side_effects_educ_two_group(EDUC_TWO_GROUP om_old, EDUC_TWO_GROUP om_new);

    /** Implement side effects of changing educ_two_level in agent Person. */
    void om_side_effects_educ_two_level(EDUC_TWO_LEVEL om_old, EDUC_TWO_LEVEL om_new);

    /** Implement side effects of changing educ_two_status in agent Person. */
    void om_side_effects_educ_two_status(EDUC_TWO_STATUS om_old, EDUC_TWO_STATUS om_new);

    /** Implement side effects of changing educ_two_to_process in agent Person. */
    void om_side_effects_educ_two_to_process(bool om_old, bool om_new);

    /** Implement side effects of changing entity_id in agent Person. */
    void om_side_effects_entity_id(int om_old, int om_new);

    /** Implement side effects of changing ethnicity in agent Person. */
    void om_side_effects_ethnicity(ETHNICITY om_old, ETHNICITY om_new);

    /** Implement side effects of changing ethnicity_short in agent Person. */
    void om_side_effects_ethnicity_short(ETHNICITY_SHORT om_old, ETHNICITY_SHORT om_new);

    /** Implement side effects of changing events in agent Person. */
    void om_side_effects_events(counter om_old, counter om_new);

    /** Implement side effects of changing ever_resident in agent Person. */
    void om_side_effects_ever_resident(bool om_old, bool om_new);

    /** Implement side effects of changing ever_union in agent Person. */
    void om_side_effects_ever_union(bool om_old, bool om_new);

    /** Implement side effects of changing family_role in agent Person. */
    void om_side_effects_family_role(FAM_ROLE om_old, FAM_ROLE om_new);

    /** Implement side effects of changing female_spouse_age in agent Person. */
    void om_side_effects_female_spouse_age(FEMALE_SPOUSE_AGE om_old, FEMALE_SPOUSE_AGE om_new);

    /** Implement side effects of changing fertile_age in agent Person. */
    void om_side_effects_fertile_age(FERTILE_AGE_RANGE om_old, FERTILE_AGE_RANGE om_new);

    /** Implement side effects of changing first_move_done in agent Person. */
    void om_side_effects_first_move_done(bool om_old, bool om_new);

    /** Implement side effects of changing geo in agent Person. */
    void om_side_effects_geo(GEO om_old, GEO om_new);

    /** Implement side effects of changing geo_birth in agent Person. */
    void om_side_effects_geo_birth(GEO om_old, GEO om_new);

    /** Implement side effects of changing geo_nat in agent Person. */
    void om_side_effects_geo_nat(GEO_NAT om_old, GEO_NAT om_new);

    /** Implement side effects of changing geo_prev in agent Person. */
    void om_side_effects_geo_prev(GEO om_old, GEO om_new);

    /** Implement side effects of changing geo_want_to_move in agent Person. */
    void om_side_effects_geo_want_to_move(GEO om_old, GEO om_new);

    /** Implement side effects of changing got_prenat_care in agent Person. */
    void om_side_effects_got_prenat_care(GOT_PRENAT_CARE om_old, GOT_PRENAT_CARE om_new);

    /** Implement side effects of changing has_passed_primary in agent Person. */
    void om_side_effects_has_passed_primary(bool om_old, bool om_new);

    /** Implement side effects of changing has_spouse in agent Person. */
    void om_side_effects_has_spouse(bool om_old, bool om_new);

    /** Implement side effects of changing in_hci_sample in agent Person. */
    void om_side_effects_in_hci_sample(bool om_old, bool om_new);

    /** Implement side effects of changing in_projected_time in agent Person. */
    void om_side_effects_in_projected_time(bool om_old, bool om_new);

    /** Implement side effects of changing in_sel_years in agent Person. */
    void om_side_effects_in_sel_years(bool om_old, bool om_new);

    /** Implement side effects of changing in_selected_year in agent Person. */
    void om_side_effects_in_selected_year(bool om_old, bool om_new);

    /** Implement side effects of changing ind_hci in agent Person. */
    void om_side_effects_ind_hci(double om_old, double om_new);

    /** Implement side effects of changing integer_age in agent Person. */
    void om_side_effects_integer_age(AGE_RANGE om_old, AGE_RANGE om_new);

    /** Implement side effects of changing is_aded0 in agent Person. */
    void om_side_effects_is_aded0(bool om_old, bool om_new);

    /** Implement side effects of changing is_aded1 in agent Person. */
    void om_side_effects_is_aded1(bool om_old, bool om_new);

    /** Implement side effects of changing is_aded2 in agent Person. */
    void om_side_effects_is_aded2(bool om_old, bool om_new);

    /** Implement side effects of changing is_adult in agent Person. */
    void om_side_effects_is_adult(bool om_old, bool om_new);

    /** Implement side effects of changing is_alive in agent Person. */
    void om_side_effects_is_alive(bool om_old, bool om_new);

    /** Implement side effects of changing is_blocked_from_marriage in agent Person. */
    void om_side_effects_is_blocked_from_marriage(bool om_old, bool om_new);

    /** Implement side effects of changing is_child in agent Person. */
    void om_side_effects_is_child(bool om_old, bool om_new);

    /** Implement side effects of changing is_educ_one_student in agent Person. */
    void om_side_effects_is_educ_one_student(bool om_old, bool om_new);

    /** Implement side effects of changing is_fertile in agent Person. */
    void om_side_effects_is_fertile(bool om_old, bool om_new);

    /** Implement side effects of changing is_immunized in agent Person. */
    void om_side_effects_is_immunized(bool om_old, bool om_new);

    /** Implement side effects of changing is_mortal in agent Person. */
    void om_side_effects_is_mortal(bool om_old, bool om_new);

    /** Implement side effects of changing is_old in agent Person. */
    void om_side_effects_is_old(bool om_old, bool om_new);

    /** Implement side effects of changing is_ready_for_birthtables in agent Person. */
    void om_side_effects_is_ready_for_birthtables(bool om_old, bool om_new);

    /** Implement side effects of changing is_resident in agent Person. */
    void om_side_effects_is_resident(bool om_old, bool om_new);

    /** Implement side effects of changing is_stunted in agent Person. */
    void om_side_effects_is_stunted(bool om_old, bool om_new);

    /** Implement side effects of changing lBioFather in agent Person. */
    void om_side_effects_lBioFather(entity_ptr<Person> om_old, entity_ptr<Person> om_new);

    /** Implement side effects of changing lBioMother in agent Person. */
    void om_side_effects_lBioMother(entity_ptr<Person> om_old, entity_ptr<Person> om_new);

    /** Implement side effects of changing lCalibrator in agent Person. */
    void om_side_effects_lCalibrator(entity_ptr<Calibrator> om_old, entity_ptr<Calibrator> om_new);

    /** Implement side effects of changing lHHFather in agent Person. */
    void om_side_effects_lHHFather(entity_ptr<Person> om_old, entity_ptr<Person> om_new);

    /** Implement side effects of changing lHHMother in agent Person. */
    void om_side_effects_lHHMother(entity_ptr<Person> om_old, entity_ptr<Person> om_new);

    /** Implement side effects of changing lSpouse in agent Person. */
    void om_side_effects_lSpouse(entity_ptr<Person> om_old, entity_ptr<Person> om_new);

    /** Implement side effects of changing lStartValues in agent Person. */
    void om_side_effects_lStartValues(entity_ptr<StartpopValues> om_old, entity_ptr<StartpopValues> om_new);

    /** Implement side effects of changing lives_with_dependent_child in agent Person. */
    void om_side_effects_lives_with_dependent_child(bool om_old, bool om_new);

    /** Implement side effects of changing male_age in agent Person. */
    void om_side_effects_male_age(MALE_SPOUSE_AGE om_old, MALE_SPOUSE_AGE om_new);

    /** Implement side effects of changing male_spouse_age in agent Person. */
    void om_side_effects_male_spouse_age(MALE_SPOUSE_AGE om_old, MALE_SPOUSE_AGE om_new);

    /** Implement side effects of changing moth_agegr in agent Person. */
    void om_side_effects_moth_agegr(MOTH_AGEGR om_old, MOTH_AGEGR om_new);

    /** Implement side effects of changing moth_agegr_part in agent Person. */
    void om_side_effects_moth_agegr_part(int om_old, int om_new);

    /** Implement side effects of changing mother_age_at_birth in agent Person. */
    void om_side_effects_mother_age_at_birth(double om_old, double om_new);

    /** Implement side effects of changing om_active_spell_duration_FOR_this_parity_spell_X_true in agent Person. */
    void om_side_effects_om_active_spell_duration_FOR_this_parity_spell_X_true(Time om_old, Time om_new);

    /** Implement side effects of changing om_aggregate_FOR_ethnicity_X_ETHNICITY_SHORT in agent Person. */
    void om_side_effects_om_aggregate_FOR_ethnicity_X_ETHNICITY_SHORT(ETHNICITY_SHORT om_old, ETHNICITY_SHORT om_new);

    /** Implement side effects of changing om_aggregate_FOR_geo_X_GEO_NAT in agent Person. */
    void om_side_effects_om_aggregate_FOR_geo_X_GEO_NAT(GEO_NAT om_old, GEO_NAT om_new);

    /** Implement side effects of changing om_aggregate_FOR_geo_X_REGION_INT in agent Person. */
    void om_side_effects_om_aggregate_FOR_geo_X_REGION_INT(REGION_INT om_old, REGION_INT om_new);

    /** Implement side effects of changing om_aggregate_FOR_geo_birth_X_GEO_NAT in agent Person. */
    void om_side_effects_om_aggregate_FOR_geo_birth_X_GEO_NAT(GEO_NAT om_old, GEO_NAT om_new);

    /** Implement side effects of changing om_aggregate_FOR_geo_birth_X_REGION_INT in agent Person. */
    void om_side_effects_om_aggregate_FOR_geo_birth_X_REGION_INT(REGION_INT om_old, REGION_INT om_new);

    /** Implement side effects of changing om_aggregate_FOR_region_birth_X_REGION_NAT in agent Person. */
    void om_side_effects_om_aggregate_FOR_region_birth_X_REGION_NAT(REGION_NAT om_old, REGION_NAT om_new);

    /** Implement side effects of changing om_aggregate_FOR_region_int_X_REGION_NAT in agent Person. */
    void om_side_effects_om_aggregate_FOR_region_int_X_REGION_NAT(REGION_NAT om_old, REGION_NAT om_new);

    /** Implement side effects of changing om_aia_0 in agent Person. */
    void om_side_effects_om_aia_0(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_1 in agent Person. */
    void om_side_effects_om_aia_1(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_10 in agent Person. */
    void om_side_effects_om_aia_10(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_11 in agent Person. */
    void om_side_effects_om_aia_11(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_12 in agent Person. */
    void om_side_effects_om_aia_12(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_13 in agent Person. */
    void om_side_effects_om_aia_13(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_14 in agent Person. */
    void om_side_effects_om_aia_14(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_15 in agent Person. */
    void om_side_effects_om_aia_15(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_16 in agent Person. */
    void om_side_effects_om_aia_16(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_17 in agent Person. */
    void om_side_effects_om_aia_17(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_18 in agent Person. */
    void om_side_effects_om_aia_18(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_19 in agent Person. */
    void om_side_effects_om_aia_19(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_2 in agent Person. */
    void om_side_effects_om_aia_2(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_20 in agent Person. */
    void om_side_effects_om_aia_20(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_21 in agent Person. */
    void om_side_effects_om_aia_21(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_22 in agent Person. */
    void om_side_effects_om_aia_22(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_23 in agent Person. */
    void om_side_effects_om_aia_23(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_24 in agent Person. */
    void om_side_effects_om_aia_24(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_25 in agent Person. */
    void om_side_effects_om_aia_25(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_26 in agent Person. */
    void om_side_effects_om_aia_26(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_27 in agent Person. */
    void om_side_effects_om_aia_27(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_28 in agent Person. */
    void om_side_effects_om_aia_28(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_29 in agent Person. */
    void om_side_effects_om_aia_29(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_3 in agent Person. */
    void om_side_effects_om_aia_3(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_30 in agent Person. */
    void om_side_effects_om_aia_30(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_31 in agent Person. */
    void om_side_effects_om_aia_31(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_32 in agent Person. */
    void om_side_effects_om_aia_32(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_33 in agent Person. */
    void om_side_effects_om_aia_33(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_34 in agent Person. */
    void om_side_effects_om_aia_34(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_35 in agent Person. */
    void om_side_effects_om_aia_35(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_36 in agent Person. */
    void om_side_effects_om_aia_36(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_37 in agent Person. */
    void om_side_effects_om_aia_37(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_38 in agent Person. */
    void om_side_effects_om_aia_38(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_39 in agent Person. */
    void om_side_effects_om_aia_39(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_4 in agent Person. */
    void om_side_effects_om_aia_4(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_40 in agent Person. */
    void om_side_effects_om_aia_40(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_5 in agent Person. */
    void om_side_effects_om_aia_5(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_6 in agent Person. */
    void om_side_effects_om_aia_6(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_7 in agent Person. */
    void om_side_effects_om_aia_7(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_8 in agent Person. */
    void om_side_effects_om_aia_8(bool om_old, bool om_new);

    /** Implement side effects of changing om_aia_9 in agent Person. */
    void om_side_effects_om_aia_9(bool om_old, bool om_new);

    /** Implement side effects of changing om_asAllFertilePersonsForFertilityAlignmentByAge_filter in agent Person. */
    void om_side_effects_om_asAllFertilePersonsForFertilityAlignmentByAge_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asAllFertilePersonsForFertilityAlignment_filter in agent Person. */
    void om_side_effects_om_asAllFertilePersonsForFertilityAlignment_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asAllPerson_filter in agent Person. */
    void om_side_effects_om_asAllPerson_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asAvailableMaleByTypeImmiScratch_filter in agent Person. */
    void om_side_effects_om_asAvailableMaleByTypeImmiScratch_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asAvailableMaleByType_filter in agent Person. */
    void om_side_effects_om_asAvailableMaleByType_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asAvailableMaleImmiScratch_filter in agent Person. */
    void om_side_effects_om_asAvailableMaleImmiScratch_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asAvailableMale_filter in agent Person. */
    void om_side_effects_om_asAvailableMale_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_filter in agent Person. */
    void om_side_effects_om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asFemaleInUnionByAgeAndPartnerAge_filter in agent Person. */
    void om_side_effects_om_asFemaleInUnionByAgeAndPartnerAge_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asPotentialImmigrantMothers_filter in agent Person. */
    void om_side_effects_om_asPotentialImmigrantMothers_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asPotentialSchoolOneStudentToProcess_filter in agent Person. */
    void om_side_effects_om_asPotentialSchoolOneStudentToProcess_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asPotentialSchoolOneStudent_filter in agent Person. */
    void om_side_effects_om_asPotentialSchoolOneStudent_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asPotentialSchoolTwoStudentToProcess_filter in agent Person. */
    void om_side_effects_om_asPotentialSchoolTwoStudentToProcess_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asPotentialSchoolTwoStudent_filter in agent Person. */
    void om_side_effects_om_asPotentialSchoolTwoStudent_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asResidentBabies_filter in agent Person. */
    void om_side_effects_om_asResidentBabies_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asResidentsAge0SexGeo_filter in agent Person. */
    void om_side_effects_om_asResidentsAge0SexGeo_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asResidentsAge0Sex_filter in agent Person. */
    void om_side_effects_om_asResidentsAge0Sex_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asSimBornAge0_filter in agent Person. */
    void om_side_effects_om_asSimBornAge0_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asWantToMove_filter in agent Person. */
    void om_side_effects_om_asWantToMove_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asWomenNoChildren_filter in agent Person. */
    void om_side_effects_om_asWomenNoChildren_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_asWomenWithChildren_filter in agent Person. */
    void om_side_effects_om_asWomenWithChildren_filter(bool om_old, bool om_new);

    /** Implement side effects of changing om_duration in agent Person. */
    void om_side_effects_om_duration(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_educ_one_fate_X_EOL_HIGH in agent Person. */
    void om_side_effects_om_duration_FOR_educ_one_fate_X_EOL_HIGH(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_educ_one_fate_X_EOL_LOW in agent Person. */
    void om_side_effects_om_duration_FOR_educ_one_fate_X_EOL_LOW(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_educ_one_fate_X_EOL_MEDIUM in agent Person. */
    void om_side_effects_om_duration_FOR_educ_one_fate_X_EOL_MEDIUM(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_educ_one_level_X_EOL_HIGH in agent Person. */
    void om_side_effects_om_duration_FOR_educ_one_level_X_EOL_HIGH(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_educ_one_level_X_EOL_LOW in agent Person. */
    void om_side_effects_om_duration_FOR_educ_one_level_X_EOL_LOW(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_educ_one_level_X_EOL_MEDIUM in agent Person. */
    void om_side_effects_om_duration_FOR_educ_one_level_X_EOL_MEDIUM(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_educ_two_level_X_ETL_GRADUATE in agent Person. */
    void om_side_effects_om_duration_FOR_educ_two_level_X_ETL_GRADUATE(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_educ_two_level_X_ETL_INCOMPLETE in agent Person. */
    void om_side_effects_om_duration_FOR_educ_two_level_X_ETL_INCOMPLETE(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_educ_two_level_X_ETL_NEVER in agent Person. */
    void om_side_effects_om_duration_FOR_educ_two_level_X_ETL_NEVER(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_ever_union_X_true in agent Person. */
    void om_side_effects_om_duration_FOR_ever_union_X_true(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_got_prenat_care_X_GPC_YES in agent Person. */
    void om_side_effects_om_duration_FOR_got_prenat_care_X_GPC_YES(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_has_spouse_X_true in agent Person. */
    void om_side_effects_om_duration_FOR_has_spouse_X_true(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_is_aded0_X_true in agent Person. */
    void om_side_effects_om_duration_FOR_is_aded0_X_true(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_is_aded1_X_true in agent Person. */
    void om_side_effects_om_duration_FOR_is_aded1_X_true(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_is_aded2_X_true in agent Person. */
    void om_side_effects_om_duration_FOR_is_aded2_X_true(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_is_child_X_true in agent Person. */
    void om_side_effects_om_duration_FOR_is_child_X_true(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_is_immunized_X_true in agent Person. */
    void om_side_effects_om_duration_FOR_is_immunized_X_true(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_is_old_X_true in agent Person. */
    void om_side_effects_om_duration_FOR_is_old_X_true(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_tab_out_of_primary_X_true in agent Person. */
    void om_side_effects_om_duration_FOR_tab_out_of_primary_X_true(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_years_preschool_X_0 in agent Person. */
    void om_side_effects_om_duration_FOR_years_preschool_X_0(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_years_preschool_X_1 in agent Person. */
    void om_side_effects_om_duration_FOR_years_preschool_X_1(Time om_old, Time om_new);

    /** Implement side effects of changing om_duration_FOR_years_preschool_X_2 in agent Person. */
    void om_side_effects_om_duration_FOR_years_preschool_X_2(Time om_old, Time om_new);

    /** Implement side effects of changing om_entrances_FOR_educ_one_grade_attended_X_1 in agent Person. */
    void om_side_effects_om_entrances_FOR_educ_one_grade_attended_X_1(counter om_old, counter om_new);

    /** Implement side effects of changing om_entrances_FOR_has_passed_primary_X_true in agent Person. */
    void om_side_effects_om_entrances_FOR_has_passed_primary_X_true(counter om_old, counter om_new);

    /** Implement side effects of changing om_mlHHFatherChildren_count in agent Person. */
    void om_side_effects_om_mlHHFatherChildren_count(counter om_old, counter om_new);

    /** Implement side effects of changing om_mlHHFatherChildren_sum_over_is_alive in agent Person. */
    void om_side_effects_om_mlHHFatherChildren_sum_over_is_alive(integer om_old, integer om_new);

    /** Implement side effects of changing om_mlHHMotherChildren_count in agent Person. */
    void om_side_effects_om_mlHHMotherChildren_count(counter om_old, counter om_new);

    /** Implement side effects of changing om_mlHHMotherChildren_min_over_integer_age in agent Person. */
    void om_side_effects_om_mlHHMotherChildren_min_over_integer_age(AGE_RANGE om_old, AGE_RANGE om_new);

    /** Implement side effects of changing om_mlHHMotherChildren_sum_over_is_alive in agent Person. */
    void om_side_effects_om_mlHHMotherChildren_sum_over_is_alive(integer om_old, integer om_new);

    /** Implement side effects of changing om_self_scheduling_split_FOR_age_X_AGE_MIG_PART in agent Person. */
    void om_side_effects_om_self_scheduling_split_FOR_age_X_AGE_MIG_PART(AGE_MIG_PART om_old, AGE_MIG_PART om_new);

    /** Implement side effects of changing om_self_scheduling_split_FOR_om_active_spell_duration_FOR_this_parity_spell_X_true_X_DUR_TIME_IN_PARITY in agent Person. */
    void om_side_effects_om_self_scheduling_split_FOR_om_active_spell_duration_FOR_this_parity_spell_X_true_X_DUR_TIME_IN_PARITY(DUR_TIME_IN_PARITY om_old, DUR_TIME_IN_PARITY om_new);

    /** Implement side effects of changing om_split_FOR_age_last_birth_X_MOTH_AGEGR_PART in agent Person. */
    void om_side_effects_om_split_FOR_age_last_birth_X_MOTH_AGEGR_PART(MOTH_AGEGR_PART om_old, MOTH_AGEGR_PART om_new);

    /** Implement side effects of changing om_split_FOR_age_youngest_child_X_CHILD_AGEGR_PART in agent Person. */
    void om_side_effects_om_split_FOR_age_youngest_child_X_CHILD_AGEGR_PART(CHILD_AGEGR_PART om_old, CHILD_AGEGR_PART om_new);

    /** Implement side effects of changing om_split_FOR_integer_age_X_TAB_AGEC5 in agent Person. */
    void om_side_effects_om_split_FOR_integer_age_X_TAB_AGEC5(TAB_AGEC5 om_old, TAB_AGEC5 om_new);

    /** Implement side effects of changing om_transitions_FOR_integer_age_X_14_X_15 in agent Person. */
    void om_side_effects_om_transitions_FOR_integer_age_X_14_X_15(counter om_old, counter om_new);

    /** Implement side effects of changing om_transitions_FOR_is_alive_X_false_X_true in agent Person. */
    void om_side_effects_om_transitions_FOR_is_alive_X_false_X_true(counter om_old, counter om_new);

    /** Implement side effects of changing om_transitions_FOR_is_alive_X_true_X_false in agent Person. */
    void om_side_effects_om_transitions_FOR_is_alive_X_true_X_false(counter om_old, counter om_new);

    /** Implement side effects of changing om_transitions_FOR_survived_early_years_X_false_X_true in agent Person. */
    void om_side_effects_om_transitions_FOR_survived_early_years_X_false_X_true(counter om_old, counter om_new);

    /** Implement side effects of changing om_trigger_changes_FOR_calendar_year in agent Person. */
    void om_side_effects_om_trigger_changes_FOR_calendar_year(bool om_old, bool om_new);

    /** Implement side effects of changing om_trigger_changes_FOR_geo in agent Person. */
    void om_side_effects_om_trigger_changes_FOR_geo(bool om_old, bool om_new);

    /** Implement side effects of changing om_trigger_entrances_FOR_is_ready_for_birthtables_X_true in agent Person. */
    void om_side_effects_om_trigger_entrances_FOR_is_ready_for_birthtables_X_true(bool om_old, bool om_new);

    /** Implement side effects of changing om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false in agent Person. */
    void om_side_effects_om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false(real om_old, real om_new);

    /** Implement side effects of changing om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false in agent Person. */
    void om_side_effects_om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false(real om_old, real om_new);

    /** Implement side effects of changing om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false in agent Person. */
    void om_side_effects_om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false(integer om_old, integer om_new);

    /** Implement side effects of changing om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false in agent Person. */
    void om_side_effects_om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false(real om_old, real om_new);

    /** Implement side effects of changing om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false in agent Person. */
    void om_side_effects_om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false(integer om_old, integer om_new);

    /** Implement side effects of changing om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false in agent Person. */
    void om_side_effects_om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false(integer om_old, integer om_new);

    /** Implement side effects of changing parity in agent Person. */
    void om_side_effects_parity(PARITY_RANGE om_old, PARITY_RANGE om_new);

    /** Implement side effects of changing preschool_is_decided in agent Person. */
    void om_side_effects_preschool_is_decided(bool om_old, bool om_new);

    /** Implement side effects of changing quality_adjusted_schooling in agent Person. */
    void om_side_effects_quality_adjusted_schooling(double om_old, double om_new);

    /** Implement side effects of changing quality_of_schooling in agent Person. */
    void om_side_effects_quality_of_schooling(double om_old, double om_new);

    /** Implement side effects of changing ready_to_set_alive in agent Person. */
    void om_side_effects_ready_to_set_alive(bool om_old, bool om_new);

    /** Implement side effects of changing region_birth in agent Person. */
    void om_side_effects_region_birth(REGION_INT om_old, REGION_INT om_new);

    /** Implement side effects of changing region_int in agent Person. */
    void om_side_effects_region_int(REGION_INT om_old, REGION_INT om_new);

    /** Implement side effects of changing region_nat in agent Person. */
    void om_side_effects_region_nat(REGION_NAT om_old, REGION_NAT om_new);

    /** Implement side effects of changing sel_years in agent Person. */
    void om_side_effects_sel_years(TAB_SEL_YEARS om_old, TAB_SEL_YEARS om_new);

    /** Implement side effects of changing selected_year10 in agent Person. */
    void om_side_effects_selected_year10(SELECTED_YEAR10 om_old, SELECTED_YEAR10 om_new);

    /** Implement side effects of changing sex in agent Person. */
    void om_side_effects_sex(SEX om_old, SEX om_new);

    /** Implement side effects of changing sim_year in agent Person. */
    void om_side_effects_sim_year(SIM_YEAR_RANGE om_old, SIM_YEAR_RANGE om_new);

    /** Implement side effects of changing spouse_group in agent Person. */
    void om_side_effects_spouse_group(SPOUSE_GROUP om_old, SPOUSE_GROUP om_new);

    /** Implement side effects of changing survived_early_years in agent Person. */
    void om_side_effects_survived_early_years(bool om_old, bool om_new);

    /** Implement side effects of changing tab_out_of_primary in agent Person. */
    void om_side_effects_tab_out_of_primary(bool om_old, bool om_new);

    /** Implement side effects of changing tab_sim_yob in agent Person. */
    void om_side_effects_tab_sim_yob(SIM_YEAR_RANGE om_old, SIM_YEAR_RANGE om_new);

    /** Implement side effects of changing this_parity_spell in agent Person. */
    void om_side_effects_this_parity_spell(bool om_old, bool om_new);

    /** Implement side effects of changing time in agent Person. */
    void om_side_effects_time(Time om_old, Time om_new);

    /** Implement side effects of changing time_first_move in agent Person. */
    void om_side_effects_time_first_move(Time om_old, Time om_new);

    /** Implement side effects of changing time_in_parity in agent Person. */
    void om_side_effects_time_in_parity(int om_old, int om_new);

    /** Implement side effects of changing time_last_move in agent Person. */
    void om_side_effects_time_last_move(Time om_old, Time om_new);

    /** Implement side effects of changing time_next_birthday in agent Person. */
    void om_side_effects_time_next_birthday(Time om_old, Time om_new);

    /** Implement side effects of changing time_of_birth in agent Person. */
    void om_side_effects_time_of_birth(Time om_old, Time om_new);

    /** Implement side effects of changing time_of_first_immigration in agent Person. */
    void om_side_effects_time_of_first_immigration(Time om_old, Time om_new);

    /** Implement side effects of changing union1_group in agent Person. */
    void om_side_effects_union1_group(UNION1_GROUP om_old, UNION1_GROUP om_new);

    /** Implement side effects of changing year_of_birth in agent Person. */
    void om_side_effects_year_of_birth(ALL_YEAR_RANGE om_old, ALL_YEAR_RANGE om_new);

    /** Implement side effects of changing year_of_first_immigration in agent Person. */
    void om_side_effects_year_of_first_immigration(SIM_YEAR_RANGE om_old, SIM_YEAR_RANGE om_new);

    /** Implement side effects of changing years_of_schooling in agent Person. */
    void om_side_effects_years_of_schooling(int om_old, int om_new);

    /** Implement side effects of changing years_preschool in agent Person. */
    void om_side_effects_years_preschool(int om_old, int om_new);

    /** Implement function for the self-scheduling event. */
    void om_ss_event();

    /** Time function for the self-scheduling event. */
    Time om_ss_time();

    /** Compute the current cell index of table tabBirthsYearPlace using attributes in the Person entity. */
    int om_tabBirthsYearPlace_current_cell();

    /** Initialize the increment for the active table cell in tabBirthsYearPlace. */
    void om_tabBirthsYearPlace_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in tabBirthsYearPlace. */
    void om_tabBirthsYearPlace_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table tabEducationFateGeobirYob using attributes in the Person entity. */
    int om_tabEducationFateGeobirYob_current_cell();

    /** Initialize the increment for the active table cell in tabEducationFateGeobirYob. */
    void om_tabEducationFateGeobirYob_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in tabEducationFateGeobirYob. */
    void om_tabEducationFateGeobirYob_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table tabHCI using attributes in the Person entity. */
    int om_tabHCI_current_cell();

    /** Initialize the increment for the active table cell in tabHCI. */
    void om_tabHCI_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in tabHCI. */
    void om_tabHCI_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table tabHavingSpouse using attributes in the Person entity. */
    int om_tabHavingSpouse_current_cell();

    /** Initialize the increment for the active table cell in tabHavingSpouse. */
    void om_tabHavingSpouse_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in tabHavingSpouse. */
    void om_tabHavingSpouse_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table tabMigrationOriginDestination using attributes in the Person entity. */
    int om_tabMigrationOriginDestination_current_cell();

    /** Initialize the increment for the active table cell in tabMigrationOriginDestination. */
    void om_tabMigrationOriginDestination_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in tabMigrationOriginDestination. */
    void om_tabMigrationOriginDestination_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table tabPopulationYearPlace using attributes in the Person entity. */
    int om_tabPopulationYearPlace_current_cell();

    /** Initialize the increment for the active table cell in tabPopulationYearPlace. */
    void om_tabPopulationYearPlace_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in tabPopulationYearPlace. */
    void om_tabPopulationYearPlace_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table tabPreSchool using attributes in the Person entity. */
    int om_tabPreSchool_current_cell();

    /** Initialize the increment for the active table cell in tabPreSchool. */
    void om_tabPreSchool_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in tabPreSchool. */
    void om_tabPreSchool_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table tabStuntingSexRegMotherYob using attributes in the Person entity. */
    int om_tabStuntingSexRegMotherYob_current_cell();

    /** Initialize the increment for the active table cell in tabStuntingSexRegMotherYob. */
    void om_tabStuntingSexRegMotherYob_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in tabStuntingSexRegMotherYob. */
    void om_tabStuntingSexRegMotherYob_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Compute the current cell index of table tabStuntingSexRegYob using attributes in the Person entity. */
    int om_tabStuntingSexRegYob_current_cell();

    /** Initialize the increment for the active table cell in tabStuntingSexRegYob. */
    void om_tabStuntingSexRegYob_init_increment(int pending, big_counter pending_event_counter);

    /** Finalize the increment and push it to the accumulators in tabStuntingSexRegYob. */
    void om_tabStuntingSexRegYob_push_increment(int cell_in, int pending, big_counter pending_event_counter);

    /** Evaluate and assign expression for region_birth. */
    void region_birth_update_identity();

    /** Evaluate and assign expression for region_int. */
    void region_int_update_identity();

    /** Evaluate and assign expression for region_nat. */
    void region_nat_update_identity();

    /** Evaluate and assign expression for sel_years. */
    void sel_years_update_identity();

    /** Evaluate and assign expression for selected_year10. */
    void selected_year10_update_identity();

    /** Evaluate and assign expression for sim_year. */
    void sim_year_update_identity();

    /** Evaluate and assign expression for spouse_group. */
    void spouse_group_update_identity();

    /** Evaluate and assign expression for survived_early_years. */
    void survived_early_years_update_identity();

    /** Evaluate and assign expression for tab_out_of_primary. */
    void tab_out_of_primary_update_identity();

    /** Evaluate and assign expression for tab_sim_yob. */
    void tab_sim_yob_update_identity();

    /** Return the time to the event BackMigrationEvent in the Person agent (model code). */
    Time timeBackMigrationEvent();

    /** Return the time to the event BirthdayEvent in the Person agent (model code). */
    Time timeBirthdayEvent();

    /** Return the time to the event DeathAtMaxLifespanEvent in the Person agent (model code). */
    Time timeDeathAtMaxLifespanEvent();

    /** Return the time to the event EmigrationEvent in the Person agent (model code). */
    Time timeEmigrationEvent();

    /** Return the time to the event FertilityBaseEvent in the Person agent (model code). */
    Time timeFertilityBaseEvent();

    /** Return the time to the event FertilityDetailedEvent in the Person agent (model code). */
    Time timeFertilityDetailedEvent();

    /** Return the time to the event FirstImmigrationFromPoolEvent in the Person agent (model code). */
    Time timeFirstImmigrationFromPoolEvent();

    /** Return the time to the event FirstImmigrationFromScratchEvent in the Person agent (model code). */
    Time timeFirstImmigrationFromScratchEvent();

    /** Return the time to the event FirstUnionFormationEvent in the Person agent (model code). */
    Time timeFirstUnionFormationEvent();

    /** Return the time to the event LeavingHomeEvent in the Person agent (model code). */
    Time timeLeavingHomeEvent();

    /** Return the time to the event MigrationEvent in the Person agent (model code). */
    Time timeMigrationEvent();

    /** Return the time to the event MortalityBaseEvent in the Person agent (model code). */
    Time timeMortalityBaseEvent();

    /** Return the time to the event MortalityDetailedEvent in the Person agent (model code). */
    Time timeMortalityDetailedEvent();

    /** Return the time to the event SetAliveEvent in the Person agent (model code). */
    Time timeSetAliveEvent();

    /** Return the time to the event SetPreschoolYearsEvent in the Person agent (model code). */
    Time timeSetPreschoolYearsEvent();

    /** Evaluate and assign expression for time_in_parity. */
    void time_in_parity_update_identity();

    /** Evaluate and assign expression for union1_group. */
    void union1_group_update_identity();

    /** Evaluate and assign expression for year_of_birth. */
    void year_of_birth_update_identity();

    /** Evaluate and assign expression for year_of_first_immigration. */
    void year_of_first_immigration_update_identity();

    /** Evaluate and assign expression for years_of_schooling. */
    void years_of_schooling_update_identity();


    //
    // Entity table increment members in Person entity
    //


    static const std::string om_name_om_PopPyramidByEduc_incr;
    /** Increment for table PopPyramidByEduc */
    Increment<Person, &om_name_om_PopPyramidByEduc_incr, &Person::om_PopPyramidByEduc_init_increment, &Person::om_PopPyramidByEduc_push_increment>
    om_PopPyramidByEduc_incr;

    static const std::string om_name_om_TabChildVaccination_incr;
    /** Increment for table TabChildVaccination */
    Increment<Person, &om_name_om_TabChildVaccination_incr, &Person::om_TabChildVaccination_init_increment, &Person::om_TabChildVaccination_push_increment>
    om_TabChildVaccination_incr;

    static const std::string om_name_om_TabEduc15ByDistrict_incr;
    /** Increment for table TabEduc15ByDistrict */
    Increment<Person, &om_name_om_TabEduc15ByDistrict_incr, &Person::om_TabEduc15ByDistrict_init_increment, &Person::om_TabEduc15ByDistrict_push_increment>
    om_TabEduc15ByDistrict_incr;

    static const std::string om_name_om_TabEduc15ByDistrictBirth_incr;
    /** Increment for table TabEduc15ByDistrictBirth */
    Increment<Person, &om_name_om_TabEduc15ByDistrictBirth_incr, &Person::om_TabEduc15ByDistrictBirth_init_increment, &Person::om_TabEduc15ByDistrictBirth_push_increment>
    om_TabEduc15ByDistrictBirth_incr;

    static const std::string om_name_om_TabEducFateByGroup_incr;
    /** Increment for table TabEducFateByGroup */
    Increment<Person, &om_name_om_TabEducFateByGroup_incr, &Person::om_TabEducFateByGroup_init_increment, &Person::om_TabEducFateByGroup_push_increment>
    om_TabEducFateByGroup_incr;

    static const std::string om_name_om_TabEducFateDistrYob_incr;
    /** Increment for table TabEducFateDistrYob */
    Increment<Person, &om_name_om_TabEducFateDistrYob_incr, &Person::om_TabEducFateDistrYob_init_increment, &Person::om_TabEducFateDistrYob_push_increment>
    om_TabEducFateDistrYob_incr;

    static const std::string om_name_om_TabHCIDistrict_incr;
    /** Increment for table TabHCIDistrict */
    Increment<Person, &om_name_om_TabHCIDistrict_incr, &Person::om_TabHCIDistrict_init_increment, &Person::om_TabHCIDistrict_push_increment>
    om_TabHCIDistrict_incr;

    static const std::string om_name_om_TabImmunizationChildren_incr;
    /** Increment for table TabImmunizationChildren */
    Increment<Person, &om_name_om_TabImmunizationChildren_incr, &Person::om_TabImmunizationChildren_init_increment, &Person::om_TabImmunizationChildren_push_increment>
    om_TabImmunizationChildren_incr;

    static const std::string om_name_om_TabPopProvAgeEducSex_incr;
    /** Increment for table TabPopProvAgeEducSex */
    Increment<Person, &om_name_om_TabPopProvAgeEducSex_incr, &Person::om_TabPopProvAgeEducSex_init_increment, &Person::om_TabPopProvAgeEducSex_push_increment>
    om_TabPopProvAgeEducSex_incr;

    static const std::string om_name_om_TabPrenatCare_incr;
    /** Increment for table TabPrenatCare */
    Increment<Person, &om_name_om_TabPrenatCare_incr, &Person::om_TabPrenatCare_init_increment, &Person::om_TabPrenatCare_push_increment>
    om_TabPrenatCare_incr;

    static const std::string om_name_om_TabPrimSchoolEntries_incr;
    /** Increment for table TabPrimSchoolEntries */
    Increment<Person, &om_name_om_TabPrimSchoolEntries_incr, &Person::om_TabPrimSchoolEntries_init_increment, &Person::om_TabPrimSchoolEntries_push_increment>
    om_TabPrimSchoolEntries_incr;

    static const std::string om_name_om_TabPrimSchoolGraduations_incr;
    /** Increment for table TabPrimSchoolGraduations */
    Increment<Person, &om_name_om_TabPrimSchoolGraduations_incr, &Person::om_TabPrimSchoolGraduations_init_increment, &Person::om_TabPrimSchoolGraduations_push_increment>
    om_TabPrimSchoolGraduations_incr;

    static const std::string om_name_om_TabPrimSchoolOutOfSchool9to11_incr;
    /** Increment for table TabPrimSchoolOutOfSchool9to11 */
    Increment<Person, &om_name_om_TabPrimSchoolOutOfSchool9to11_incr, &Person::om_TabPrimSchoolOutOfSchool9to11_init_increment, &Person::om_TabPrimSchoolOutOfSchool9to11_push_increment>
    om_TabPrimSchoolOutOfSchool9to11_incr;

    static const std::string om_name_om_TabPrimarySchoolPlanning_incr;
    /** Increment for table TabPrimarySchoolPlanning */
    Increment<Person, &om_name_om_TabPrimarySchoolPlanning_incr, &Person::om_TabPrimarySchoolPlanning_init_increment, &Person::om_TabPrimarySchoolPlanning_push_increment>
    om_TabPrimarySchoolPlanning_incr;

    static const std::string om_name_om_TabSchool2AttainmentsTab_incr;
    /** Increment for table TabSchool2AttainmentsTab */
    Increment<Person, &om_name_om_TabSchool2AttainmentsTab_incr, &Person::om_TabSchool2AttainmentsTab_init_increment, &Person::om_TabSchool2AttainmentsTab_push_increment>
    om_TabSchool2AttainmentsTab_incr;

    static const std::string om_name_om_TabSchool2TrackTab_incr;
    /** Increment for table TabSchool2TrackTab */
    Increment<Person, &om_name_om_TabSchool2TrackTab_incr, &Person::om_TabSchool2TrackTab_init_increment, &Person::om_TabSchool2TrackTab_push_increment>
    om_TabSchool2TrackTab_incr;

    static const std::string om_name_om_tabBirthsYearPlace_incr;
    /** Increment for table tabBirthsYearPlace */
    Increment<Person, &om_name_om_tabBirthsYearPlace_incr, &Person::om_tabBirthsYearPlace_init_increment, &Person::om_tabBirthsYearPlace_push_increment>
    om_tabBirthsYearPlace_incr;

    static const std::string om_name_om_tabEducationFateGeobirYob_incr;
    /** Increment for table tabEducationFateGeobirYob */
    Increment<Person, &om_name_om_tabEducationFateGeobirYob_incr, &Person::om_tabEducationFateGeobirYob_init_increment, &Person::om_tabEducationFateGeobirYob_push_increment>
    om_tabEducationFateGeobirYob_incr;

    static const std::string om_name_om_tabHCI_incr;
    /** Increment for table tabHCI */
    Increment<Person, &om_name_om_tabHCI_incr, &Person::om_tabHCI_init_increment, &Person::om_tabHCI_push_increment>
    om_tabHCI_incr;

    static const std::string om_name_om_tabHavingSpouse_incr;
    /** Increment for table tabHavingSpouse */
    Increment<Person, &om_name_om_tabHavingSpouse_incr, &Person::om_tabHavingSpouse_init_increment, &Person::om_tabHavingSpouse_push_increment>
    om_tabHavingSpouse_incr;

    static const std::string om_name_om_tabMigrationOriginDestination_incr;
    /** Increment for table tabMigrationOriginDestination */
    Increment<Person, &om_name_om_tabMigrationOriginDestination_incr, &Person::om_tabMigrationOriginDestination_init_increment, &Person::om_tabMigrationOriginDestination_push_increment>
    om_tabMigrationOriginDestination_incr;

    static const std::string om_name_om_tabPopulationYearPlace_incr;
    /** Increment for table tabPopulationYearPlace */
    Increment<Person, &om_name_om_tabPopulationYearPlace_incr, &Person::om_tabPopulationYearPlace_init_increment, &Person::om_tabPopulationYearPlace_push_increment>
    om_tabPopulationYearPlace_incr;

    static const std::string om_name_om_tabPreSchool_incr;
    /** Increment for table tabPreSchool */
    Increment<Person, &om_name_om_tabPreSchool_incr, &Person::om_tabPreSchool_init_increment, &Person::om_tabPreSchool_push_increment>
    om_tabPreSchool_incr;

    static const std::string om_name_om_tabStuntingSexRegMotherYob_incr;
    /** Increment for table tabStuntingSexRegMotherYob */
    Increment<Person, &om_name_om_tabStuntingSexRegMotherYob_incr, &Person::om_tabStuntingSexRegMotherYob_init_increment, &Person::om_tabStuntingSexRegMotherYob_push_increment>
    om_tabStuntingSexRegMotherYob_incr;

    static const std::string om_name_om_tabStuntingSexRegYob_incr;
    /** Increment for table tabStuntingSexRegYob */
    Increment<Person, &om_name_om_tabStuntingSexRegYob_incr, &Person::om_tabStuntingSexRegYob_init_increment, &Person::om_tabStuntingSexRegYob_push_increment>
    om_tabStuntingSexRegYob_incr;


    //
    // data members in Person agent
    //


    /** adult_survival */
    static const std::string om_name_adult_survival;
    AssignableAgentVar<double, void, Person, &om_name_adult_survival, &Person::om_side_effects_adult_survival, false, &Person::om_notify_adult_survival, false>
    adult_survival;

    /** age */
    static const std::string om_name_age;
    AssignableAgentVar<Time, double, Person, &om_name_age, &Person::om_side_effects_age, true, &Person::om_notify_age, false>
    age;

    /** age_last_birth */
    static const std::string om_name_age_last_birth;
    AgentVar<double, void, Person, &om_name_age_last_birth, &Person::om_side_effects_age_last_birth, true, &Person::om_notify_age_last_birth, false>
    age_last_birth;

    /** age_mig */
    static const std::string om_name_age_mig;
    AgentVar<AGE_MIG, int, Person, &om_name_age_mig, &Person::om_side_effects_age_mig, true, &Person::om_notify_age_mig, false>
    age_mig;

    /** age_youngest_child */
    static const std::string om_name_age_youngest_child;
    AgentVar<double, void, Person, &om_name_age_youngest_child, &Person::om_side_effects_age_youngest_child, true, &Person::om_notify_age_youngest_child, false>
    age_youngest_child;

    /** all_year */
    static const std::string om_name_all_year;
    AgentVar<ALL_YEAR_RANGE, int, Person, &om_name_all_year, &Person::om_side_effects_all_year, false, &Person::om_notify_all_year, false>
    all_year;

    /** calendar_year */
    static const std::string om_name_calendar_year;
    AssignableAgentVar<ALL_YEAR_RANGE, int, Person, &om_name_calendar_year, &Person::om_side_effects_calendar_year, true, &Person::om_notify_calendar_year, false>
    calendar_year;

    /** case_seed */
    static const std::string om_name_case_seed;
    AssignableAgentVar<double, void, Person, &om_name_case_seed, &Person::om_side_effects_case_seed, false, &Person::om_notify_case_seed, false>
    case_seed;

    /** child_agegr */
    static const std::string om_name_child_agegr;
    AgentVar<CHILD_AGEGR, int, Person, &om_name_child_agegr, &Person::om_side_effects_child_agegr, true, &Person::om_notify_child_agegr, false>
    child_agegr;

    /** child_agegr_part */
    static const std::string om_name_child_agegr_part;
    AgentVar<int, void, Person, &om_name_child_agegr_part, &Person::om_side_effects_child_agegr_part, true, &Person::om_notify_child_agegr_part, false>
    child_agegr_part;

    /** child_mortality */
    static const std::string om_name_child_mortality;
    AgentVar<double, void, Person, &om_name_child_mortality, &Person::om_side_effects_child_mortality, true, &Person::om_notify_child_mortality, false>
    child_mortality;

    /** child_mortality_group */
    static const std::string om_name_child_mortality_group;
    AgentVar<CHILD_MORTALITY_GROUP, int, Person, &om_name_child_mortality_group, &Person::om_side_effects_child_mortality_group, true, &Person::om_notify_child_mortality_group, false>
    child_mortality_group;

    /** children_in_household */
    static const std::string om_name_children_in_household;
    AgentVar<short, void, Person, &om_name_children_in_household, &Person::om_side_effects_children_in_household, false, &Person::om_notify_children_in_household, false>
    children_in_household;

    /** creation_type */
    static const std::string om_name_creation_type;
    AssignableAgentVar<CREATION_TYPE, int, Person, &om_name_creation_type, &Person::om_side_effects_creation_type, true, &Person::om_notify_creation_type, false>
    creation_type;

    /** educ1_group */
    static const std::string om_name_educ1_group;
    AgentVar<EDUC1_GROUP, int, Person, &om_name_educ1_group, &Person::om_side_effects_educ1_group, true, &Person::om_notify_educ1_group, true>
    educ1_group;

    /** educ_mother */
    static const std::string om_name_educ_mother;
    AssignableAgentVar<EDUC_ONE_LEVEL, int, Person, &om_name_educ_mother, &Person::om_side_effects_educ_mother, true, &Person::om_notify_educ_mother, true>
    educ_mother;

    /** educ_one_entry_age */
    static const std::string om_name_educ_one_entry_age;
    AssignableAgentVar<EDUC_ONE_ENTRY_AGE, int, Person, &om_name_educ_one_entry_age, &Person::om_side_effects_educ_one_entry_age, false, &Person::om_notify_educ_one_entry_age, false>
    educ_one_entry_age;

    /** educ_one_fate */
    static const std::string om_name_educ_one_fate;
    AssignableAgentVar<EDUC_ONE_LEVEL, int, Person, &om_name_educ_one_fate, &Person::om_side_effects_educ_one_fate, true, &Person::om_notify_educ_one_fate, true>
    educ_one_fate;

    /** educ_one_geo */
    static const std::string om_name_educ_one_geo;
    AssignableAgentVar<EDUC_ONE_GEO, int, Person, &om_name_educ_one_geo, &Person::om_side_effects_educ_one_geo, false, &Person::om_notify_educ_one_geo, false>
    educ_one_geo;

    /** educ_one_grade */
    static const std::string om_name_educ_one_grade;
    AgentVar<EDUC_ONE_GRADE, int, Person, &om_name_educ_one_grade, &Person::om_side_effects_educ_one_grade, true, &Person::om_notify_educ_one_grade, true>
    educ_one_grade;

    /** educ_one_grade_attended */
    static const std::string om_name_educ_one_grade_attended;
    AssignableAgentVar<EDUC_ONE_GRADE0, int, Person, &om_name_educ_one_grade_attended, &Person::om_side_effects_educ_one_grade_attended, true, &Person::om_notify_educ_one_grade_attended, false>
    educ_one_grade_attended;

    /** educ_one_grade_fate */
    static const std::string om_name_educ_one_grade_fate;
    AssignableAgentVar<EDUC_ONE_GRADE, int, Person, &om_name_educ_one_grade_fate, &Person::om_side_effects_educ_one_grade_fate, false, &Person::om_notify_educ_one_grade_fate, false>
    educ_one_grade_fate;

    /** educ_one_grade_passed */
    static const std::string om_name_educ_one_grade_passed;
    AssignableAgentVar<EDUC_ONE_GRADE0, int, Person, &om_name_educ_one_grade_passed, &Person::om_side_effects_educ_one_grade_passed, true, &Person::om_notify_educ_one_grade_passed, false>
    educ_one_grade_passed;

    /** educ_one_group */
    static const std::string om_name_educ_one_group;
    AssignableAgentVar<EDUC_ONE_GROUP, int, Person, &om_name_educ_one_group, &Person::om_side_effects_educ_one_group, false, &Person::om_notify_educ_one_group, false>
    educ_one_group;

    /** educ_one_level */
    static const std::string om_name_educ_one_level;
    AgentVar<EDUC_ONE_LEVEL, int, Person, &om_name_educ_one_level, &Person::om_side_effects_educ_one_level, true, &Person::om_notify_educ_one_level, false>
    educ_one_level;

    /** educ_one_required_rooms */
    static const std::string om_name_educ_one_required_rooms;
    AgentVar<double, void, Person, &om_name_educ_one_required_rooms, &Person::om_side_effects_educ_one_required_rooms, false, &Person::om_notify_educ_one_required_rooms, true>
    educ_one_required_rooms;

    /** educ_one_required_teachers */
    static const std::string om_name_educ_one_required_teachers;
    AgentVar<double, void, Person, &om_name_educ_one_required_teachers, &Person::om_side_effects_educ_one_required_teachers, false, &Person::om_notify_educ_one_required_teachers, true>
    educ_one_required_teachers;

    /** educ_one_status */
    static const std::string om_name_educ_one_status;
    AssignableAgentVar<EDUC_ONE_STATUS, int, Person, &om_name_educ_one_status, &Person::om_side_effects_educ_one_status, true, &Person::om_notify_educ_one_status, false>
    educ_one_status;

    /** educ_one_to_process */
    static const std::string om_name_educ_one_to_process;
    AssignableAgentVar<bool, void, Person, &om_name_educ_one_to_process, &Person::om_side_effects_educ_one_to_process, true, &Person::om_notify_educ_one_to_process, false>
    educ_one_to_process;

    /** educ_two_delay */
    static const std::string om_name_educ_two_delay;
    AssignableAgentVar<int, void, Person, &om_name_educ_two_delay, &Person::om_side_effects_educ_two_delay, true, &Person::om_notify_educ_two_delay, false>
    educ_two_delay;

    /** educ_two_geo */
    static const std::string om_name_educ_two_geo;
    AssignableAgentVar<EDUC_TWO_GEO, int, Person, &om_name_educ_two_geo, &Person::om_side_effects_educ_two_geo, false, &Person::om_notify_educ_two_geo, false>
    educ_two_geo;

    /** educ_two_grade_attended */
    static const std::string om_name_educ_two_grade_attended;
    AssignableAgentVar<EDUC_TWO_GRADE0, int, Person, &om_name_educ_two_grade_attended, &Person::om_side_effects_educ_two_grade_attended, true, &Person::om_notify_educ_two_grade_attended, true>
    educ_two_grade_attended;

    /** educ_two_grade_passed */
    static const std::string om_name_educ_two_grade_passed;
    AssignableAgentVar<EDUC_TWO_GRADE0, int, Person, &om_name_educ_two_grade_passed, &Person::om_side_effects_educ_two_grade_passed, true, &Person::om_notify_educ_two_grade_passed, false>
    educ_two_grade_passed;

    /** educ_two_group */
    static const std::string om_name_educ_two_group;
    AssignableAgentVar<EDUC_TWO_GROUP, int, Person, &om_name_educ_two_group, &Person::om_side_effects_educ_two_group, false, &Person::om_notify_educ_two_group, false>
    educ_two_group;

    /** educ_two_level */
    static const std::string om_name_educ_two_level;
    AgentVar<EDUC_TWO_LEVEL, int, Person, &om_name_educ_two_level, &Person::om_side_effects_educ_two_level, true, &Person::om_notify_educ_two_level, false>
    educ_two_level;

    /** educ_two_status */
    static const std::string om_name_educ_two_status;
    AssignableAgentVar<EDUC_TWO_STATUS, int, Person, &om_name_educ_two_status, &Person::om_side_effects_educ_two_status, true, &Person::om_notify_educ_two_status, false>
    educ_two_status;

    /** educ_two_to_process */
    static const std::string om_name_educ_two_to_process;
    AssignableAgentVar<bool, void, Person, &om_name_educ_two_to_process, &Person::om_side_effects_educ_two_to_process, true, &Person::om_notify_educ_two_to_process, false>
    educ_two_to_process;

    /** entity_id */
    static const std::string om_name_entity_id;
    AssignableAgentVar<int, void, Person, &om_name_entity_id, &Person::om_side_effects_entity_id, false, &Person::om_notify_entity_id, false>
    entity_id;

    /** ethnicity */
    static const std::string om_name_ethnicity;
    AssignableAgentVar<ETHNICITY, int, Person, &om_name_ethnicity, &Person::om_side_effects_ethnicity, true, &Person::om_notify_ethnicity, false>
    ethnicity;

    /** ethnicity_short */
    static const std::string om_name_ethnicity_short;
    AgentVar<ETHNICITY_SHORT, int, Person, &om_name_ethnicity_short, &Person::om_side_effects_ethnicity_short, true, &Person::om_notify_ethnicity_short, true>
    ethnicity_short;

    /** events */
    static const std::string om_name_events;
    AssignableAgentVar<counter, void, Person, &om_name_events, &Person::om_side_effects_events, false, &Person::om_notify_events, false>
    events;

    /** ever_resident */
    static const std::string om_name_ever_resident;
    AssignableAgentVar<bool, void, Person, &om_name_ever_resident, &Person::om_side_effects_ever_resident, true, &Person::om_notify_ever_resident, false>
    ever_resident;

    /** ever_union */
    static const std::string om_name_ever_union;
    AssignableAgentVar<bool, void, Person, &om_name_ever_union, &Person::om_side_effects_ever_union, true, &Person::om_notify_ever_union, false>
    ever_union;

    /** family_role */
    static const std::string om_name_family_role;
    AgentVar<FAM_ROLE, int, Person, &om_name_family_role, &Person::om_side_effects_family_role, true, &Person::om_notify_family_role, false>
    family_role;

    /** female_spouse_age */
    static const std::string om_name_female_spouse_age;
    AgentVar<FEMALE_SPOUSE_AGE, int, Person, &om_name_female_spouse_age, &Person::om_side_effects_female_spouse_age, true, &Person::om_notify_female_spouse_age, false>
    female_spouse_age;

    /** fertile_age */
    static const std::string om_name_fertile_age;
    AgentVar<FERTILE_AGE_RANGE, int, Person, &om_name_fertile_age, &Person::om_side_effects_fertile_age, true, &Person::om_notify_fertile_age, false>
    fertile_age;

    /** first_move_done */
    static const std::string om_name_first_move_done;
    AssignableAgentVar<bool, void, Person, &om_name_first_move_done, &Person::om_side_effects_first_move_done, false, &Person::om_notify_first_move_done, false>
    first_move_done;

    /** geo */
    static const std::string om_name_geo;
    AssignableAgentVar<GEO, int, Person, &om_name_geo, &Person::om_side_effects_geo, true, &Person::om_notify_geo, true>
    geo;

    /** geo_birth */
    static const std::string om_name_geo_birth;
    AssignableAgentVar<GEO, int, Person, &om_name_geo_birth, &Person::om_side_effects_geo_birth, true, &Person::om_notify_geo_birth, true>
    geo_birth;

    /** geo_nat */
    static const std::string om_name_geo_nat;
    AgentVar<GEO_NAT, int, Person, &om_name_geo_nat, &Person::om_side_effects_geo_nat, true, &Person::om_notify_geo_nat, true>
    geo_nat;

    /** geo_prev */
    static const std::string om_name_geo_prev;
    AssignableAgentVar<GEO, int, Person, &om_name_geo_prev, &Person::om_side_effects_geo_prev, true, &Person::om_notify_geo_prev, true>
    geo_prev;

    /** geo_want_to_move */
    static const std::string om_name_geo_want_to_move;
    AssignableAgentVar<GEO, int, Person, &om_name_geo_want_to_move, &Person::om_side_effects_geo_want_to_move, true, &Person::om_notify_geo_want_to_move, false>
    geo_want_to_move;

    /** got_prenat_care */
    static const std::string om_name_got_prenat_care;
    AssignableAgentVar<GOT_PRENAT_CARE, int, Person, &om_name_got_prenat_care, &Person::om_side_effects_got_prenat_care, true, &Person::om_notify_got_prenat_care, true>
    got_prenat_care;

    /** has_passed_primary */
    static const std::string om_name_has_passed_primary;
    AgentVar<bool, void, Person, &om_name_has_passed_primary, &Person::om_side_effects_has_passed_primary, true, &Person::om_notify_has_passed_primary, false>
    has_passed_primary;

    /** has_spouse */
    static const std::string om_name_has_spouse;
    AgentVar<bool, void, Person, &om_name_has_spouse, &Person::om_side_effects_has_spouse, true, &Person::om_notify_has_spouse, false>
    has_spouse;

    /** in_hci_sample */
    static const std::string om_name_in_hci_sample;
    AgentVar<bool, void, Person, &om_name_in_hci_sample, &Person::om_side_effects_in_hci_sample, true, &Person::om_notify_in_hci_sample, false>
    in_hci_sample;

    /** in_projected_time */
    static const std::string om_name_in_projected_time;
    AgentVar<bool, void, Person, &om_name_in_projected_time, &Person::om_side_effects_in_projected_time, true, &Person::om_notify_in_projected_time, false>
    in_projected_time;

    /** in_sel_years */
    static const std::string om_name_in_sel_years;
    AgentVar<bool, void, Person, &om_name_in_sel_years, &Person::om_side_effects_in_sel_years, true, &Person::om_notify_in_sel_years, false>
    in_sel_years;

    /** in_selected_year */
    static const std::string om_name_in_selected_year;
    AgentVar<bool, void, Person, &om_name_in_selected_year, &Person::om_side_effects_in_selected_year, true, &Person::om_notify_in_selected_year, false>
    in_selected_year;

    /** ind_hci */
    static const std::string om_name_ind_hci;
    AssignableAgentVar<double, void, Person, &om_name_ind_hci, &Person::om_side_effects_ind_hci, false, &Person::om_notify_ind_hci, false>
    ind_hci;

    /** integer_age */
    static const std::string om_name_integer_age;
    AssignableAgentVar<AGE_RANGE, int, Person, &om_name_integer_age, &Person::om_side_effects_integer_age, true, &Person::om_notify_integer_age, true>
    integer_age;

    /** is_aded0 */
    static const std::string om_name_is_aded0;
    AgentVar<bool, void, Person, &om_name_is_aded0, &Person::om_side_effects_is_aded0, true, &Person::om_notify_is_aded0, false>
    is_aded0;

    /** is_aded1 */
    static const std::string om_name_is_aded1;
    AgentVar<bool, void, Person, &om_name_is_aded1, &Person::om_side_effects_is_aded1, true, &Person::om_notify_is_aded1, false>
    is_aded1;

    /** is_aded2 */
    static const std::string om_name_is_aded2;
    AgentVar<bool, void, Person, &om_name_is_aded2, &Person::om_side_effects_is_aded2, true, &Person::om_notify_is_aded2, false>
    is_aded2;

    /** is_adult */
    static const std::string om_name_is_adult;
    AgentVar<bool, void, Person, &om_name_is_adult, &Person::om_side_effects_is_adult, false, &Person::om_notify_is_adult, false>
    is_adult;

    /** is_alive */
    static const std::string om_name_is_alive;
    AssignableAgentVar<bool, void, Person, &om_name_is_alive, &Person::om_side_effects_is_alive, true, &Person::om_notify_is_alive, true>
    is_alive;

    /** is_blocked_from_marriage */
    static const std::string om_name_is_blocked_from_marriage;
    AssignableAgentVar<bool, void, Person, &om_name_is_blocked_from_marriage, &Person::om_side_effects_is_blocked_from_marriage, true, &Person::om_notify_is_blocked_from_marriage, false>
    is_blocked_from_marriage;

    /** is_child */
    static const std::string om_name_is_child;
    AgentVar<bool, void, Person, &om_name_is_child, &Person::om_side_effects_is_child, true, &Person::om_notify_is_child, false>
    is_child;

    /** is_educ_one_student */
    static const std::string om_name_is_educ_one_student;
    AgentVar<bool, void, Person, &om_name_is_educ_one_student, &Person::om_side_effects_is_educ_one_student, true, &Person::om_notify_is_educ_one_student, false>
    is_educ_one_student;

    /** is_fertile */
    static const std::string om_name_is_fertile;
    AgentVar<bool, void, Person, &om_name_is_fertile, &Person::om_side_effects_is_fertile, true, &Person::om_notify_is_fertile, false>
    is_fertile;

    /** is_immunized */
    static const std::string om_name_is_immunized;
    AssignableAgentVar<bool, void, Person, &om_name_is_immunized, &Person::om_side_effects_is_immunized, true, &Person::om_notify_is_immunized, false>
    is_immunized;

    /** is_mortal */
    static const std::string om_name_is_mortal;
    AgentVar<bool, void, Person, &om_name_is_mortal, &Person::om_side_effects_is_mortal, true, &Person::om_notify_is_mortal, false>
    is_mortal;

    /** is_old */
    static const std::string om_name_is_old;
    AgentVar<bool, void, Person, &om_name_is_old, &Person::om_side_effects_is_old, true, &Person::om_notify_is_old, false>
    is_old;

    /** is_ready_for_birthtables */
    static const std::string om_name_is_ready_for_birthtables;
    AssignableAgentVar<bool, void, Person, &om_name_is_ready_for_birthtables, &Person::om_side_effects_is_ready_for_birthtables, true, &Person::om_notify_is_ready_for_birthtables, false>
    is_ready_for_birthtables;

    /** is_resident */
    static const std::string om_name_is_resident;
    AgentVar<bool, void, Person, &om_name_is_resident, &Person::om_side_effects_is_resident, true, &Person::om_notify_is_resident, false>
    is_resident;

    /** is_stunted */
    static const std::string om_name_is_stunted;
    AssignableAgentVar<bool, void, Person, &om_name_is_stunted, &Person::om_side_effects_is_stunted, false, &Person::om_notify_is_stunted, true>
    is_stunted;

    /** lBioFather */
    static const std::string om_name_lBioFather;
    LinkAgentVar<entity_ptr<Person>, bool, Person, Person, &om_name_lBioFather, &Person::om_side_effects_lBioFather, true, &Person::om_notify_lBioFather, false>
    lBioFather;

    /** lBioMother */
    static const std::string om_name_lBioMother;
    LinkAgentVar<entity_ptr<Person>, bool, Person, Person, &om_name_lBioMother, &Person::om_side_effects_lBioMother, true, &Person::om_notify_lBioMother, false>
    lBioMother;

    /** lCalibrator */
    static const std::string om_name_lCalibrator;
    LinkAgentVar<entity_ptr<Calibrator>, bool, Person, Calibrator, &om_name_lCalibrator, &Person::om_side_effects_lCalibrator, true, &Person::om_notify_lCalibrator, false>
    lCalibrator;

    /** lHHFather */
    static const std::string om_name_lHHFather;
    LinkAgentVar<entity_ptr<Person>, bool, Person, Person, &om_name_lHHFather, &Person::om_side_effects_lHHFather, true, &Person::om_notify_lHHFather, false>
    lHHFather;

    /** lHHMother */
    static const std::string om_name_lHHMother;
    LinkAgentVar<entity_ptr<Person>, bool, Person, Person, &om_name_lHHMother, &Person::om_side_effects_lHHMother, true, &Person::om_notify_lHHMother, false>
    lHHMother;

    /** lSpouse */
    static const std::string om_name_lSpouse;
    LinkAgentVar<entity_ptr<Person>, bool, Person, Person, &om_name_lSpouse, &Person::om_side_effects_lSpouse, true, &Person::om_notify_lSpouse, false>
    lSpouse;

    /** lStartValues */
    static const std::string om_name_lStartValues;
    LinkAgentVar<entity_ptr<StartpopValues>, bool, Person, StartpopValues, &om_name_lStartValues, &Person::om_side_effects_lStartValues, true, &Person::om_notify_lStartValues, false>
    lStartValues;

    /** lives_with_dependent_child */
    static const std::string om_name_lives_with_dependent_child;
    AgentVar<bool, void, Person, &om_name_lives_with_dependent_child, &Person::om_side_effects_lives_with_dependent_child, true, &Person::om_notify_lives_with_dependent_child, false>
    lives_with_dependent_child;

    /** male_age */
    static const std::string om_name_male_age;
    AgentVar<MALE_SPOUSE_AGE, int, Person, &om_name_male_age, &Person::om_side_effects_male_age, true, &Person::om_notify_male_age, false>
    male_age;

    /** male_spouse_age */
    static const std::string om_name_male_spouse_age;
    AgentVar<MALE_SPOUSE_AGE, int, Person, &om_name_male_spouse_age, &Person::om_side_effects_male_spouse_age, true, &Person::om_notify_male_spouse_age, false>
    male_spouse_age;

    /** mlBioFatherChildren */
    Multilink<entity_ptr<Person>, Person, Person, &Person::om_mlBioFatherChildren_side_effects, &Person::om_mlBioFatherChildren_insert, &Person::om_mlBioFatherChildren_erase> 
    mlBioFatherChildren;

    /** mlBioMotherChildren */
    Multilink<entity_ptr<Person>, Person, Person, &Person::om_mlBioMotherChildren_side_effects, &Person::om_mlBioMotherChildren_insert, &Person::om_mlBioMotherChildren_erase> 
    mlBioMotherChildren;

    /** mlHHFatherChildren */
    Multilink<entity_ptr<Person>, Person, Person, &Person::om_mlHHFatherChildren_side_effects, &Person::om_mlHHFatherChildren_insert, &Person::om_mlHHFatherChildren_erase> 
    mlHHFatherChildren;

    /** mlHHMotherChildren */
    Multilink<entity_ptr<Person>, Person, Person, &Person::om_mlHHMotherChildren_side_effects, &Person::om_mlHHMotherChildren_insert, &Person::om_mlHHMotherChildren_erase> 
    mlHHMotherChildren;

    /** moth_agegr */
    static const std::string om_name_moth_agegr;
    AgentVar<MOTH_AGEGR, int, Person, &om_name_moth_agegr, &Person::om_side_effects_moth_agegr, true, &Person::om_notify_moth_agegr, false>
    moth_agegr;

    /** moth_agegr_part */
    static const std::string om_name_moth_agegr_part;
    AgentVar<int, void, Person, &om_name_moth_agegr_part, &Person::om_side_effects_moth_agegr_part, true, &Person::om_notify_moth_agegr_part, false>
    moth_agegr_part;

    /** mother_age_at_birth */
    static const std::string om_name_mother_age_at_birth;
    AssignableAgentVar<double, void, Person, &om_name_mother_age_at_birth, &Person::om_side_effects_mother_age_at_birth, true, &Person::om_notify_mother_age_at_birth, false>
    mother_age_at_birth;

    /** om_BackMigrationEvent_om_event */
    Event<Person, 0, 0, 0, &Person::BackMigrationEvent, &Person::timeBackMigrationEvent>
    om_BackMigrationEvent_om_event;

    /** om_BirthdayEvent_om_event */
    Event<Person, 1, 0, 1, &Person::BirthdayEvent, &Person::timeBirthdayEvent>
    om_BirthdayEvent_om_event;

    /** om_DeathAtMaxLifespanEvent_om_event */
    Event<Person, 6, 0, 2, &Person::DeathAtMaxLifespanEvent, &Person::timeDeathAtMaxLifespanEvent>
    om_DeathAtMaxLifespanEvent_om_event;

    /** om_EmigrationEvent_om_event */
    Event<Person, 7, 0, 3, &Person::EmigrationEvent, &Person::timeEmigrationEvent>
    om_EmigrationEvent_om_event;

    /** om_FertilityBaseEvent_om_event */
    Event<Person, 10, 0, 4, &Person::FertilityBaseEvent, &Person::timeFertilityBaseEvent>
    om_FertilityBaseEvent_om_event;

    /** om_FertilityDetailedEvent_om_event */
    Event<Person, 11, 0, 5, &Person::FertilityDetailedEvent, &Person::timeFertilityDetailedEvent>
    om_FertilityDetailedEvent_om_event;

    /** om_FirstImmigrationFromPoolEvent_om_event */
    Event<Person, 12, 0, 6, &Person::FirstImmigrationFromPoolEvent, &Person::timeFirstImmigrationFromPoolEvent>
    om_FirstImmigrationFromPoolEvent_om_event;

    /** om_FirstImmigrationFromScratchEvent_om_event */
    Event<Person, 13, 0, 7, &Person::FirstImmigrationFromScratchEvent, &Person::timeFirstImmigrationFromScratchEvent>
    om_FirstImmigrationFromScratchEvent_om_event;

    /** om_FirstUnionFormationEvent_om_event */
    Event<Person, 15, 0, 8, &Person::FirstUnionFormationEvent, &Person::timeFirstUnionFormationEvent>
    om_FirstUnionFormationEvent_om_event;

    /** om_LeavingHomeEvent_om_event */
    Event<Person, 19, 0, 9, &Person::LeavingHomeEvent, &Person::timeLeavingHomeEvent>
    om_LeavingHomeEvent_om_event;

    /** om_MigrationEvent_om_event */
    Event<Person, 20, 0, 10, &Person::MigrationEvent, &Person::timeMigrationEvent>
    om_MigrationEvent_om_event;

    /** om_MortalityBaseEvent_om_event */
    Event<Person, 21, 0, 11, &Person::MortalityBaseEvent, &Person::timeMortalityBaseEvent>
    om_MortalityBaseEvent_om_event;

    /** om_MortalityDetailedEvent_om_event */
    Event<Person, 22, 0, 12, &Person::MortalityDetailedEvent, &Person::timeMortalityDetailedEvent>
    om_MortalityDetailedEvent_om_event;

    /** om_PopPyramidByEduc_in_om_duration_FOR_educ_one_level_X_EOL_HIGH */
    Time om_PopPyramidByEduc_in_om_duration_FOR_educ_one_level_X_EOL_HIGH;

    /** om_PopPyramidByEduc_in_om_duration_FOR_educ_one_level_X_EOL_LOW */
    Time om_PopPyramidByEduc_in_om_duration_FOR_educ_one_level_X_EOL_LOW;

    /** om_PopPyramidByEduc_in_om_duration_FOR_educ_one_level_X_EOL_MEDIUM */
    Time om_PopPyramidByEduc_in_om_duration_FOR_educ_one_level_X_EOL_MEDIUM;

    /** om_SetAliveEvent_om_event */
    Event<Person, 23, 0, 13, &Person::SetAliveEvent, &Person::timeSetAliveEvent>
    om_SetAliveEvent_om_event;

    /** om_SetPreschoolYearsEvent_om_event */
    Event<Person, 26, 0, 14, &Person::SetPreschoolYearsEvent, &Person::timeSetPreschoolYearsEvent>
    om_SetPreschoolYearsEvent_om_event;

    /** om_TabChildVaccination_in_om_duration */
    Time om_TabChildVaccination_in_om_duration;

    /** om_TabChildVaccination_in_om_duration_FOR_is_immunized_X_true */
    Time om_TabChildVaccination_in_om_duration_FOR_is_immunized_X_true;

    /** om_TabEduc15ByDistrictBirth_in_om_duration */
    Time om_TabEduc15ByDistrictBirth_in_om_duration;

    /** om_TabEduc15ByDistrictBirth_in_om_duration_FOR_educ_one_fate_X_EOL_HIGH */
    Time om_TabEduc15ByDistrictBirth_in_om_duration_FOR_educ_one_fate_X_EOL_HIGH;

    /** om_TabEduc15ByDistrictBirth_in_om_duration_FOR_educ_one_fate_X_EOL_LOW */
    Time om_TabEduc15ByDistrictBirth_in_om_duration_FOR_educ_one_fate_X_EOL_LOW;

    /** om_TabEduc15ByDistrictBirth_in_om_duration_FOR_educ_one_fate_X_EOL_MEDIUM */
    Time om_TabEduc15ByDistrictBirth_in_om_duration_FOR_educ_one_fate_X_EOL_MEDIUM;

    /** om_TabEduc15ByDistrict_in_om_duration */
    Time om_TabEduc15ByDistrict_in_om_duration;

    /** om_TabEduc15ByDistrict_in_om_duration_FOR_educ_one_fate_X_EOL_HIGH */
    Time om_TabEduc15ByDistrict_in_om_duration_FOR_educ_one_fate_X_EOL_HIGH;

    /** om_TabEduc15ByDistrict_in_om_duration_FOR_educ_one_fate_X_EOL_LOW */
    Time om_TabEduc15ByDistrict_in_om_duration_FOR_educ_one_fate_X_EOL_LOW;

    /** om_TabEduc15ByDistrict_in_om_duration_FOR_educ_one_fate_X_EOL_MEDIUM */
    Time om_TabEduc15ByDistrict_in_om_duration_FOR_educ_one_fate_X_EOL_MEDIUM;

    /** om_TabHCIDistrict_in_om_transitions_FOR_integer_age_X_14_X_15 */
    counter om_TabHCIDistrict_in_om_transitions_FOR_integer_age_X_14_X_15;

    /** om_TabHCIDistrict_in_om_transitions_FOR_is_alive_X_true_X_false */
    counter om_TabHCIDistrict_in_om_transitions_FOR_is_alive_X_true_X_false;

    /** om_TabHCIDistrict_in_om_transitions_FOR_survived_early_years_X_false_X_true */
    counter om_TabHCIDistrict_in_om_transitions_FOR_survived_early_years_X_false_X_true;

    /** om_TabHCIDistrict_in_om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false */
    real om_TabHCIDistrict_in_om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false;

    /** om_TabHCIDistrict_in_om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false */
    real om_TabHCIDistrict_in_om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false;

    /** om_TabHCIDistrict_in_om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false */
    integer om_TabHCIDistrict_in_om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false;

    /** om_TabHCIDistrict_in_om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false */
    real om_TabHCIDistrict_in_om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false;

    /** om_TabHCIDistrict_in_om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false */
    integer om_TabHCIDistrict_in_om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false;

    /** om_TabHCIDistrict_in_om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false */
    integer om_TabHCIDistrict_in_om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false;

    /** om_TabImmunizationChildren_in_om_duration */
    Time om_TabImmunizationChildren_in_om_duration;

    /** om_TabImmunizationChildren_in_om_duration_FOR_is_immunized_X_true */
    Time om_TabImmunizationChildren_in_om_duration_FOR_is_immunized_X_true;

    /** om_TabPopProvAgeEducSex_in_om_duration_FOR_is_aded0_X_true */
    Time om_TabPopProvAgeEducSex_in_om_duration_FOR_is_aded0_X_true;

    /** om_TabPopProvAgeEducSex_in_om_duration_FOR_is_aded1_X_true */
    Time om_TabPopProvAgeEducSex_in_om_duration_FOR_is_aded1_X_true;

    /** om_TabPopProvAgeEducSex_in_om_duration_FOR_is_aded2_X_true */
    Time om_TabPopProvAgeEducSex_in_om_duration_FOR_is_aded2_X_true;

    /** om_TabPopProvAgeEducSex_in_om_duration_FOR_is_child_X_true */
    Time om_TabPopProvAgeEducSex_in_om_duration_FOR_is_child_X_true;

    /** om_TabPopProvAgeEducSex_in_om_duration_FOR_is_old_X_true */
    Time om_TabPopProvAgeEducSex_in_om_duration_FOR_is_old_X_true;

    /** om_TabPrenatCare_in_om_duration */
    Time om_TabPrenatCare_in_om_duration;

    /** om_TabPrenatCare_in_om_duration_FOR_got_prenat_care_X_GPC_YES */
    Time om_TabPrenatCare_in_om_duration_FOR_got_prenat_care_X_GPC_YES;

    /** om_TabPrimSchoolEntries_in_om_entrances_FOR_educ_one_grade_attended_X_1 */
    counter om_TabPrimSchoolEntries_in_om_entrances_FOR_educ_one_grade_attended_X_1;

    /** om_TabPrimSchoolGraduations_in_om_entrances_FOR_has_passed_primary_X_true */
    counter om_TabPrimSchoolGraduations_in_om_entrances_FOR_has_passed_primary_X_true;

    /** om_TabPrimSchoolOutOfSchool9to11_in_om_duration */
    Time om_TabPrimSchoolOutOfSchool9to11_in_om_duration;

    /** om_TabPrimSchoolOutOfSchool9to11_in_om_duration_FOR_tab_out_of_primary_X_true */
    Time om_TabPrimSchoolOutOfSchool9to11_in_om_duration_FOR_tab_out_of_primary_X_true;

    /** om_TabSchool2AttainmentsTab_in_om_duration */
    Time om_TabSchool2AttainmentsTab_in_om_duration;

    /** om_TabSchool2AttainmentsTab_in_om_duration_FOR_educ_two_level_X_ETL_GRADUATE */
    Time om_TabSchool2AttainmentsTab_in_om_duration_FOR_educ_two_level_X_ETL_GRADUATE;

    /** om_TabSchool2AttainmentsTab_in_om_duration_FOR_educ_two_level_X_ETL_INCOMPLETE */
    Time om_TabSchool2AttainmentsTab_in_om_duration_FOR_educ_two_level_X_ETL_INCOMPLETE;

    /** om_TabSchool2AttainmentsTab_in_om_duration_FOR_educ_two_level_X_ETL_NEVER */
    Time om_TabSchool2AttainmentsTab_in_om_duration_FOR_educ_two_level_X_ETL_NEVER;

    /** active_spell_duration(this_parity_spell, true) */
    static const std::string om_name_om_active_spell_duration_FOR_this_parity_spell_X_true;
    AgentVar<Time, double, Person, &om_name_om_active_spell_duration_FOR_this_parity_spell_X_true, &Person::om_side_effects_om_active_spell_duration_FOR_this_parity_spell_X_true, false, &Person::om_notify_om_active_spell_duration_FOR_this_parity_spell_X_true, false>
    om_active_spell_duration_FOR_this_parity_spell_X_true;

    /** aggregate(ethnicity, ETHNICITY_SHORT) */
    static const std::string om_name_om_aggregate_FOR_ethnicity_X_ETHNICITY_SHORT;
    AgentVar<ETHNICITY_SHORT, int, Person, &om_name_om_aggregate_FOR_ethnicity_X_ETHNICITY_SHORT, &Person::om_side_effects_om_aggregate_FOR_ethnicity_X_ETHNICITY_SHORT, true, &Person::om_notify_om_aggregate_FOR_ethnicity_X_ETHNICITY_SHORT, false>
    om_aggregate_FOR_ethnicity_X_ETHNICITY_SHORT;

    /** aggregate(geo, GEO_NAT) */
    static const std::string om_name_om_aggregate_FOR_geo_X_GEO_NAT;
    AgentVar<GEO_NAT, int, Person, &om_name_om_aggregate_FOR_geo_X_GEO_NAT, &Person::om_side_effects_om_aggregate_FOR_geo_X_GEO_NAT, true, &Person::om_notify_om_aggregate_FOR_geo_X_GEO_NAT, false>
    om_aggregate_FOR_geo_X_GEO_NAT;

    /** aggregate(geo, REGION_INT) */
    static const std::string om_name_om_aggregate_FOR_geo_X_REGION_INT;
    AgentVar<REGION_INT, int, Person, &om_name_om_aggregate_FOR_geo_X_REGION_INT, &Person::om_side_effects_om_aggregate_FOR_geo_X_REGION_INT, true, &Person::om_notify_om_aggregate_FOR_geo_X_REGION_INT, false>
    om_aggregate_FOR_geo_X_REGION_INT;

    /** aggregate(geo_birth, GEO_NAT) */
    static const std::string om_name_om_aggregate_FOR_geo_birth_X_GEO_NAT;
    AgentVar<GEO_NAT, int, Person, &om_name_om_aggregate_FOR_geo_birth_X_GEO_NAT, &Person::om_side_effects_om_aggregate_FOR_geo_birth_X_GEO_NAT, true, &Person::om_notify_om_aggregate_FOR_geo_birth_X_GEO_NAT, true>
    om_aggregate_FOR_geo_birth_X_GEO_NAT;

    /** aggregate(geo_birth, REGION_INT) */
    static const std::string om_name_om_aggregate_FOR_geo_birth_X_REGION_INT;
    AgentVar<REGION_INT, int, Person, &om_name_om_aggregate_FOR_geo_birth_X_REGION_INT, &Person::om_side_effects_om_aggregate_FOR_geo_birth_X_REGION_INT, true, &Person::om_notify_om_aggregate_FOR_geo_birth_X_REGION_INT, false>
    om_aggregate_FOR_geo_birth_X_REGION_INT;

    /** aggregate(region_birth, REGION_NAT) */
    static const std::string om_name_om_aggregate_FOR_region_birth_X_REGION_NAT;
    AgentVar<REGION_NAT, int, Person, &om_name_om_aggregate_FOR_region_birth_X_REGION_NAT, &Person::om_side_effects_om_aggregate_FOR_region_birth_X_REGION_NAT, true, &Person::om_notify_om_aggregate_FOR_region_birth_X_REGION_NAT, true>
    om_aggregate_FOR_region_birth_X_REGION_NAT;

    /** aggregate(region_int, REGION_NAT) */
    static const std::string om_name_om_aggregate_FOR_region_int_X_REGION_NAT;
    AgentVar<REGION_NAT, int, Person, &om_name_om_aggregate_FOR_region_int_X_REGION_NAT, &Person::om_side_effects_om_aggregate_FOR_region_int_X_REGION_NAT, true, &Person::om_notify_om_aggregate_FOR_region_int_X_REGION_NAT, false>
    om_aggregate_FOR_region_int_X_REGION_NAT;

    /** om_aia_0 */
    static const std::string om_name_om_aia_0;
    AgentVar<bool, void, Person, &om_name_om_aia_0, &Person::om_side_effects_om_aia_0, true, &Person::om_notify_om_aia_0, false>
    om_aia_0;

    /** om_aia_1 */
    static const std::string om_name_om_aia_1;
    AgentVar<bool, void, Person, &om_name_om_aia_1, &Person::om_side_effects_om_aia_1, true, &Person::om_notify_om_aia_1, true>
    om_aia_1;

    /** om_aia_10 */
    static const std::string om_name_om_aia_10;
    AgentVar<bool, void, Person, &om_name_om_aia_10, &Person::om_side_effects_om_aia_10, false, &Person::om_notify_om_aia_10, false>
    om_aia_10;

    /** om_aia_11 */
    static const std::string om_name_om_aia_11;
    AgentVar<bool, void, Person, &om_name_om_aia_11, &Person::om_side_effects_om_aia_11, false, &Person::om_notify_om_aia_11, false>
    om_aia_11;

    /** om_aia_12 */
    static const std::string om_name_om_aia_12;
    AgentVar<bool, void, Person, &om_name_om_aia_12, &Person::om_side_effects_om_aia_12, false, &Person::om_notify_om_aia_12, false>
    om_aia_12;

    /** om_aia_13 */
    static const std::string om_name_om_aia_13;
    AgentVar<bool, void, Person, &om_name_om_aia_13, &Person::om_side_effects_om_aia_13, true, &Person::om_notify_om_aia_13, true>
    om_aia_13;

    /** om_aia_14 */
    static const std::string om_name_om_aia_14;
    AgentVar<bool, void, Person, &om_name_om_aia_14, &Person::om_side_effects_om_aia_14, true, &Person::om_notify_om_aia_14, true>
    om_aia_14;

    /** om_aia_15 */
    static const std::string om_name_om_aia_15;
    AgentVar<bool, void, Person, &om_name_om_aia_15, &Person::om_side_effects_om_aia_15, true, &Person::om_notify_om_aia_15, true>
    om_aia_15;

    /** om_aia_16 */
    static const std::string om_name_om_aia_16;
    AgentVar<bool, void, Person, &om_name_om_aia_16, &Person::om_side_effects_om_aia_16, false, &Person::om_notify_om_aia_16, false>
    om_aia_16;

    /** om_aia_17 */
    static const std::string om_name_om_aia_17;
    AgentVar<bool, void, Person, &om_name_om_aia_17, &Person::om_side_effects_om_aia_17, false, &Person::om_notify_om_aia_17, false>
    om_aia_17;

    /** om_aia_18 */
    static const std::string om_name_om_aia_18;
    AgentVar<bool, void, Person, &om_name_om_aia_18, &Person::om_side_effects_om_aia_18, false, &Person::om_notify_om_aia_18, false>
    om_aia_18;

    /** om_aia_19 */
    static const std::string om_name_om_aia_19;
    AgentVar<bool, void, Person, &om_name_om_aia_19, &Person::om_side_effects_om_aia_19, false, &Person::om_notify_om_aia_19, false>
    om_aia_19;

    /** om_aia_2 */
    static const std::string om_name_om_aia_2;
    AgentVar<bool, void, Person, &om_name_om_aia_2, &Person::om_side_effects_om_aia_2, false, &Person::om_notify_om_aia_2, false>
    om_aia_2;

    /** om_aia_20 */
    static const std::string om_name_om_aia_20;
    AgentVar<bool, void, Person, &om_name_om_aia_20, &Person::om_side_effects_om_aia_20, false, &Person::om_notify_om_aia_20, false>
    om_aia_20;

    /** om_aia_21 */
    static const std::string om_name_om_aia_21;
    AgentVar<bool, void, Person, &om_name_om_aia_21, &Person::om_side_effects_om_aia_21, true, &Person::om_notify_om_aia_21, true>
    om_aia_21;

    /** om_aia_22 */
    static const std::string om_name_om_aia_22;
    AgentVar<bool, void, Person, &om_name_om_aia_22, &Person::om_side_effects_om_aia_22, true, &Person::om_notify_om_aia_22, true>
    om_aia_22;

    /** om_aia_23 */
    static const std::string om_name_om_aia_23;
    AgentVar<bool, void, Person, &om_name_om_aia_23, &Person::om_side_effects_om_aia_23, true, &Person::om_notify_om_aia_23, true>
    om_aia_23;

    /** om_aia_24 */
    static const std::string om_name_om_aia_24;
    AgentVar<bool, void, Person, &om_name_om_aia_24, &Person::om_side_effects_om_aia_24, false, &Person::om_notify_om_aia_24, false>
    om_aia_24;

    /** om_aia_25 */
    static const std::string om_name_om_aia_25;
    AgentVar<bool, void, Person, &om_name_om_aia_25, &Person::om_side_effects_om_aia_25, true, &Person::om_notify_om_aia_25, true>
    om_aia_25;

    /** om_aia_26 */
    static const std::string om_name_om_aia_26;
    AgentVar<bool, void, Person, &om_name_om_aia_26, &Person::om_side_effects_om_aia_26, true, &Person::om_notify_om_aia_26, true>
    om_aia_26;

    /** om_aia_27 */
    static const std::string om_name_om_aia_27;
    AgentVar<bool, void, Person, &om_name_om_aia_27, &Person::om_side_effects_om_aia_27, false, &Person::om_notify_om_aia_27, false>
    om_aia_27;

    /** om_aia_28 */
    static const std::string om_name_om_aia_28;
    AgentVar<bool, void, Person, &om_name_om_aia_28, &Person::om_side_effects_om_aia_28, false, &Person::om_notify_om_aia_28, false>
    om_aia_28;

    /** om_aia_29 */
    static const std::string om_name_om_aia_29;
    AgentVar<bool, void, Person, &om_name_om_aia_29, &Person::om_side_effects_om_aia_29, false, &Person::om_notify_om_aia_29, false>
    om_aia_29;

    /** om_aia_3 */
    static const std::string om_name_om_aia_3;
    AgentVar<bool, void, Person, &om_name_om_aia_3, &Person::om_side_effects_om_aia_3, false, &Person::om_notify_om_aia_3, false>
    om_aia_3;

    /** om_aia_30 */
    static const std::string om_name_om_aia_30;
    AgentVar<bool, void, Person, &om_name_om_aia_30, &Person::om_side_effects_om_aia_30, true, &Person::om_notify_om_aia_30, true>
    om_aia_30;

    /** om_aia_31 */
    static const std::string om_name_om_aia_31;
    AgentVar<bool, void, Person, &om_name_om_aia_31, &Person::om_side_effects_om_aia_31, false, &Person::om_notify_om_aia_31, false>
    om_aia_31;

    /** om_aia_32 */
    static const std::string om_name_om_aia_32;
    AgentVar<bool, void, Person, &om_name_om_aia_32, &Person::om_side_effects_om_aia_32, false, &Person::om_notify_om_aia_32, false>
    om_aia_32;

    /** om_aia_33 */
    static const std::string om_name_om_aia_33;
    AgentVar<bool, void, Person, &om_name_om_aia_33, &Person::om_side_effects_om_aia_33, true, &Person::om_notify_om_aia_33, true>
    om_aia_33;

    /** om_aia_34 */
    static const std::string om_name_om_aia_34;
    AgentVar<bool, void, Person, &om_name_om_aia_34, &Person::om_side_effects_om_aia_34, true, &Person::om_notify_om_aia_34, true>
    om_aia_34;

    /** om_aia_35 */
    static const std::string om_name_om_aia_35;
    AgentVar<bool, void, Person, &om_name_om_aia_35, &Person::om_side_effects_om_aia_35, true, &Person::om_notify_om_aia_35, true>
    om_aia_35;

    /** om_aia_36 */
    static const std::string om_name_om_aia_36;
    AgentVar<bool, void, Person, &om_name_om_aia_36, &Person::om_side_effects_om_aia_36, true, &Person::om_notify_om_aia_36, true>
    om_aia_36;

    /** om_aia_37 */
    static const std::string om_name_om_aia_37;
    AgentVar<bool, void, Person, &om_name_om_aia_37, &Person::om_side_effects_om_aia_37, true, &Person::om_notify_om_aia_37, true>
    om_aia_37;

    /** om_aia_38 */
    static const std::string om_name_om_aia_38;
    AgentVar<bool, void, Person, &om_name_om_aia_38, &Person::om_side_effects_om_aia_38, false, &Person::om_notify_om_aia_38, false>
    om_aia_38;

    /** om_aia_39 */
    static const std::string om_name_om_aia_39;
    AgentVar<bool, void, Person, &om_name_om_aia_39, &Person::om_side_effects_om_aia_39, false, &Person::om_notify_om_aia_39, false>
    om_aia_39;

    /** om_aia_4 */
    static const std::string om_name_om_aia_4;
    AgentVar<bool, void, Person, &om_name_om_aia_4, &Person::om_side_effects_om_aia_4, false, &Person::om_notify_om_aia_4, false>
    om_aia_4;

    /** om_aia_40 */
    static const std::string om_name_om_aia_40;
    AgentVar<bool, void, Person, &om_name_om_aia_40, &Person::om_side_effects_om_aia_40, true, &Person::om_notify_om_aia_40, true>
    om_aia_40;

    /** om_aia_5 */
    static const std::string om_name_om_aia_5;
    AgentVar<bool, void, Person, &om_name_om_aia_5, &Person::om_side_effects_om_aia_5, true, &Person::om_notify_om_aia_5, true>
    om_aia_5;

    /** om_aia_6 */
    static const std::string om_name_om_aia_6;
    AgentVar<bool, void, Person, &om_name_om_aia_6, &Person::om_side_effects_om_aia_6, false, &Person::om_notify_om_aia_6, false>
    om_aia_6;

    /** om_aia_7 */
    static const std::string om_name_om_aia_7;
    AgentVar<bool, void, Person, &om_name_om_aia_7, &Person::om_side_effects_om_aia_7, false, &Person::om_notify_om_aia_7, false>
    om_aia_7;

    /** om_aia_8 */
    static const std::string om_name_om_aia_8;
    AgentVar<bool, void, Person, &om_name_om_aia_8, &Person::om_side_effects_om_aia_8, false, &Person::om_notify_om_aia_8, false>
    om_aia_8;

    /** om_aia_9 */
    static const std::string om_name_om_aia_9;
    AgentVar<bool, void, Person, &om_name_om_aia_9, &Person::om_side_effects_om_aia_9, true, &Person::om_notify_om_aia_9, true>
    om_aia_9;

    /** om_asAllFertilePersonsForFertilityAlignmentByAge_cell */
    int om_asAllFertilePersonsForFertilityAlignmentByAge_cell;

    /** om_asAllFertilePersonsForFertilityAlignmentByAge_filter */
    static const std::string om_name_om_asAllFertilePersonsForFertilityAlignmentByAge_filter;
    AgentVar<bool, void, Person, &om_name_om_asAllFertilePersonsForFertilityAlignmentByAge_filter, &Person::om_side_effects_om_asAllFertilePersonsForFertilityAlignmentByAge_filter, true, &Person::om_notify_om_asAllFertilePersonsForFertilityAlignmentByAge_filter, false>
    om_asAllFertilePersonsForFertilityAlignmentByAge_filter;

    /** om_asAllFertilePersonsForFertilityAlignment_cell */
    int om_asAllFertilePersonsForFertilityAlignment_cell;

    /** om_asAllFertilePersonsForFertilityAlignment_filter */
    static const std::string om_name_om_asAllFertilePersonsForFertilityAlignment_filter;
    AgentVar<bool, void, Person, &om_name_om_asAllFertilePersonsForFertilityAlignment_filter, &Person::om_side_effects_om_asAllFertilePersonsForFertilityAlignment_filter, true, &Person::om_notify_om_asAllFertilePersonsForFertilityAlignment_filter, false>
    om_asAllFertilePersonsForFertilityAlignment_filter;

    /** om_asAllPerson_cell */
    int om_asAllPerson_cell;

    /** om_asAllPerson_filter */
    static const std::string om_name_om_asAllPerson_filter;
    AgentVar<bool, void, Person, &om_name_om_asAllPerson_filter, &Person::om_side_effects_om_asAllPerson_filter, true, &Person::om_notify_om_asAllPerson_filter, false>
    om_asAllPerson_filter;

    /** om_asAvailableMaleByTypeImmiScratch_cell */
    int om_asAvailableMaleByTypeImmiScratch_cell;

    /** om_asAvailableMaleByTypeImmiScratch_filter */
    static const std::string om_name_om_asAvailableMaleByTypeImmiScratch_filter;
    AgentVar<bool, void, Person, &om_name_om_asAvailableMaleByTypeImmiScratch_filter, &Person::om_side_effects_om_asAvailableMaleByTypeImmiScratch_filter, true, &Person::om_notify_om_asAvailableMaleByTypeImmiScratch_filter, false>
    om_asAvailableMaleByTypeImmiScratch_filter;

    /** om_asAvailableMaleByType_cell */
    int om_asAvailableMaleByType_cell;

    /** om_asAvailableMaleByType_filter */
    static const std::string om_name_om_asAvailableMaleByType_filter;
    AgentVar<bool, void, Person, &om_name_om_asAvailableMaleByType_filter, &Person::om_side_effects_om_asAvailableMaleByType_filter, true, &Person::om_notify_om_asAvailableMaleByType_filter, false>
    om_asAvailableMaleByType_filter;

    /** om_asAvailableMaleImmiScratch_cell */
    int om_asAvailableMaleImmiScratch_cell;

    /** om_asAvailableMaleImmiScratch_filter */
    static const std::string om_name_om_asAvailableMaleImmiScratch_filter;
    AgentVar<bool, void, Person, &om_name_om_asAvailableMaleImmiScratch_filter, &Person::om_side_effects_om_asAvailableMaleImmiScratch_filter, true, &Person::om_notify_om_asAvailableMaleImmiScratch_filter, false>
    om_asAvailableMaleImmiScratch_filter;

    /** om_asAvailableMale_cell */
    int om_asAvailableMale_cell;

    /** om_asAvailableMale_filter */
    static const std::string om_name_om_asAvailableMale_filter;
    AgentVar<bool, void, Person, &om_name_om_asAvailableMale_filter, &Person::om_side_effects_om_asAvailableMale_filter, true, &Person::om_notify_om_asAvailableMale_filter, false>
    om_asAvailableMale_filter;

    /** om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_cell */
    int om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_cell;

    /** om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_filter */
    static const std::string om_name_om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_filter;
    AgentVar<bool, void, Person, &om_name_om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_filter, &Person::om_side_effects_om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_filter, true, &Person::om_notify_om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_filter, false>
    om_asFemaleInUnionByAgeAndPartnerAgeImmiScratch_filter;

    /** om_asFemaleInUnionByAgeAndPartnerAge_cell */
    int om_asFemaleInUnionByAgeAndPartnerAge_cell;

    /** om_asFemaleInUnionByAgeAndPartnerAge_filter */
    static const std::string om_name_om_asFemaleInUnionByAgeAndPartnerAge_filter;
    AgentVar<bool, void, Person, &om_name_om_asFemaleInUnionByAgeAndPartnerAge_filter, &Person::om_side_effects_om_asFemaleInUnionByAgeAndPartnerAge_filter, true, &Person::om_notify_om_asFemaleInUnionByAgeAndPartnerAge_filter, false>
    om_asFemaleInUnionByAgeAndPartnerAge_filter;

    /** om_asPotentialImmigrantMothers_cell */
    int om_asPotentialImmigrantMothers_cell;

    /** om_asPotentialImmigrantMothers_filter */
    static const std::string om_name_om_asPotentialImmigrantMothers_filter;
    AgentVar<bool, void, Person, &om_name_om_asPotentialImmigrantMothers_filter, &Person::om_side_effects_om_asPotentialImmigrantMothers_filter, true, &Person::om_notify_om_asPotentialImmigrantMothers_filter, false>
    om_asPotentialImmigrantMothers_filter;

    /** om_asPotentialSchoolOneStudentToProcess_cell */
    int om_asPotentialSchoolOneStudentToProcess_cell;

    /** om_asPotentialSchoolOneStudentToProcess_filter */
    static const std::string om_name_om_asPotentialSchoolOneStudentToProcess_filter;
    AgentVar<bool, void, Person, &om_name_om_asPotentialSchoolOneStudentToProcess_filter, &Person::om_side_effects_om_asPotentialSchoolOneStudentToProcess_filter, true, &Person::om_notify_om_asPotentialSchoolOneStudentToProcess_filter, false>
    om_asPotentialSchoolOneStudentToProcess_filter;

    /** om_asPotentialSchoolOneStudent_cell */
    int om_asPotentialSchoolOneStudent_cell;

    /** om_asPotentialSchoolOneStudent_filter */
    static const std::string om_name_om_asPotentialSchoolOneStudent_filter;
    AgentVar<bool, void, Person, &om_name_om_asPotentialSchoolOneStudent_filter, &Person::om_side_effects_om_asPotentialSchoolOneStudent_filter, true, &Person::om_notify_om_asPotentialSchoolOneStudent_filter, false>
    om_asPotentialSchoolOneStudent_filter;

    /** om_asPotentialSchoolTwoStudentToProcess_cell */
    int om_asPotentialSchoolTwoStudentToProcess_cell;

    /** om_asPotentialSchoolTwoStudentToProcess_filter */
    static const std::string om_name_om_asPotentialSchoolTwoStudentToProcess_filter;
    AgentVar<bool, void, Person, &om_name_om_asPotentialSchoolTwoStudentToProcess_filter, &Person::om_side_effects_om_asPotentialSchoolTwoStudentToProcess_filter, true, &Person::om_notify_om_asPotentialSchoolTwoStudentToProcess_filter, false>
    om_asPotentialSchoolTwoStudentToProcess_filter;

    /** om_asPotentialSchoolTwoStudent_cell */
    int om_asPotentialSchoolTwoStudent_cell;

    /** om_asPotentialSchoolTwoStudent_filter */
    static const std::string om_name_om_asPotentialSchoolTwoStudent_filter;
    AgentVar<bool, void, Person, &om_name_om_asPotentialSchoolTwoStudent_filter, &Person::om_side_effects_om_asPotentialSchoolTwoStudent_filter, true, &Person::om_notify_om_asPotentialSchoolTwoStudent_filter, false>
    om_asPotentialSchoolTwoStudent_filter;

    /** om_asResidentBabies_cell */
    int om_asResidentBabies_cell;

    /** om_asResidentBabies_filter */
    static const std::string om_name_om_asResidentBabies_filter;
    AgentVar<bool, void, Person, &om_name_om_asResidentBabies_filter, &Person::om_side_effects_om_asResidentBabies_filter, true, &Person::om_notify_om_asResidentBabies_filter, false>
    om_asResidentBabies_filter;

    /** om_asResidentsAge0SexGeo_cell */
    int om_asResidentsAge0SexGeo_cell;

    /** om_asResidentsAge0SexGeo_filter */
    static const std::string om_name_om_asResidentsAge0SexGeo_filter;
    AgentVar<bool, void, Person, &om_name_om_asResidentsAge0SexGeo_filter, &Person::om_side_effects_om_asResidentsAge0SexGeo_filter, true, &Person::om_notify_om_asResidentsAge0SexGeo_filter, false>
    om_asResidentsAge0SexGeo_filter;

    /** om_asResidentsAge0Sex_cell */
    int om_asResidentsAge0Sex_cell;

    /** om_asResidentsAge0Sex_filter */
    static const std::string om_name_om_asResidentsAge0Sex_filter;
    AgentVar<bool, void, Person, &om_name_om_asResidentsAge0Sex_filter, &Person::om_side_effects_om_asResidentsAge0Sex_filter, true, &Person::om_notify_om_asResidentsAge0Sex_filter, false>
    om_asResidentsAge0Sex_filter;

    /** om_asSimBornAge0_cell */
    int om_asSimBornAge0_cell;

    /** om_asSimBornAge0_filter */
    static const std::string om_name_om_asSimBornAge0_filter;
    AgentVar<bool, void, Person, &om_name_om_asSimBornAge0_filter, &Person::om_side_effects_om_asSimBornAge0_filter, true, &Person::om_notify_om_asSimBornAge0_filter, false>
    om_asSimBornAge0_filter;

    /** om_asWantToMove_cell */
    int om_asWantToMove_cell;

    /** om_asWantToMove_filter */
    static const std::string om_name_om_asWantToMove_filter;
    AgentVar<bool, void, Person, &om_name_om_asWantToMove_filter, &Person::om_side_effects_om_asWantToMove_filter, true, &Person::om_notify_om_asWantToMove_filter, false>
    om_asWantToMove_filter;

    /** om_asWomenNoChildren_cell */
    int om_asWomenNoChildren_cell;

    /** om_asWomenNoChildren_filter */
    static const std::string om_name_om_asWomenNoChildren_filter;
    AgentVar<bool, void, Person, &om_name_om_asWomenNoChildren_filter, &Person::om_side_effects_om_asWomenNoChildren_filter, true, &Person::om_notify_om_asWomenNoChildren_filter, false>
    om_asWomenNoChildren_filter;

    /** om_asWomenWithChildren_cell */
    int om_asWomenWithChildren_cell;

    /** om_asWomenWithChildren_filter */
    static const std::string om_name_om_asWomenWithChildren_filter;
    AgentVar<bool, void, Person, &om_name_om_asWomenWithChildren_filter, &Person::om_side_effects_om_asWomenWithChildren_filter, true, &Person::om_notify_om_asWomenWithChildren_filter, false>
    om_asWomenWithChildren_filter;

    /** duration() */
    static const std::string om_name_om_duration;
    AgentVar<Time, double, Person, &om_name_om_duration, &Person::om_side_effects_om_duration, false, &Person::om_notify_om_duration, true>
    om_duration;

    /** duration(educ_one_fate, EOL_HIGH) */
    static const std::string om_name_om_duration_FOR_educ_one_fate_X_EOL_HIGH;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_educ_one_fate_X_EOL_HIGH, &Person::om_side_effects_om_duration_FOR_educ_one_fate_X_EOL_HIGH, false, &Person::om_notify_om_duration_FOR_educ_one_fate_X_EOL_HIGH, true>
    om_duration_FOR_educ_one_fate_X_EOL_HIGH;

    /** duration(educ_one_fate, EOL_LOW) */
    static const std::string om_name_om_duration_FOR_educ_one_fate_X_EOL_LOW;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_educ_one_fate_X_EOL_LOW, &Person::om_side_effects_om_duration_FOR_educ_one_fate_X_EOL_LOW, false, &Person::om_notify_om_duration_FOR_educ_one_fate_X_EOL_LOW, true>
    om_duration_FOR_educ_one_fate_X_EOL_LOW;

    /** duration(educ_one_fate, EOL_MEDIUM) */
    static const std::string om_name_om_duration_FOR_educ_one_fate_X_EOL_MEDIUM;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_educ_one_fate_X_EOL_MEDIUM, &Person::om_side_effects_om_duration_FOR_educ_one_fate_X_EOL_MEDIUM, false, &Person::om_notify_om_duration_FOR_educ_one_fate_X_EOL_MEDIUM, true>
    om_duration_FOR_educ_one_fate_X_EOL_MEDIUM;

    /** duration(educ_one_level, EOL_HIGH) */
    static const std::string om_name_om_duration_FOR_educ_one_level_X_EOL_HIGH;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_educ_one_level_X_EOL_HIGH, &Person::om_side_effects_om_duration_FOR_educ_one_level_X_EOL_HIGH, false, &Person::om_notify_om_duration_FOR_educ_one_level_X_EOL_HIGH, true>
    om_duration_FOR_educ_one_level_X_EOL_HIGH;

    /** duration(educ_one_level, EOL_LOW) */
    static const std::string om_name_om_duration_FOR_educ_one_level_X_EOL_LOW;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_educ_one_level_X_EOL_LOW, &Person::om_side_effects_om_duration_FOR_educ_one_level_X_EOL_LOW, false, &Person::om_notify_om_duration_FOR_educ_one_level_X_EOL_LOW, true>
    om_duration_FOR_educ_one_level_X_EOL_LOW;

    /** duration(educ_one_level, EOL_MEDIUM) */
    static const std::string om_name_om_duration_FOR_educ_one_level_X_EOL_MEDIUM;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_educ_one_level_X_EOL_MEDIUM, &Person::om_side_effects_om_duration_FOR_educ_one_level_X_EOL_MEDIUM, false, &Person::om_notify_om_duration_FOR_educ_one_level_X_EOL_MEDIUM, true>
    om_duration_FOR_educ_one_level_X_EOL_MEDIUM;

    /** duration(educ_two_level, ETL_GRADUATE) */
    static const std::string om_name_om_duration_FOR_educ_two_level_X_ETL_GRADUATE;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_educ_two_level_X_ETL_GRADUATE, &Person::om_side_effects_om_duration_FOR_educ_two_level_X_ETL_GRADUATE, false, &Person::om_notify_om_duration_FOR_educ_two_level_X_ETL_GRADUATE, true>
    om_duration_FOR_educ_two_level_X_ETL_GRADUATE;

    /** duration(educ_two_level, ETL_INCOMPLETE) */
    static const std::string om_name_om_duration_FOR_educ_two_level_X_ETL_INCOMPLETE;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_educ_two_level_X_ETL_INCOMPLETE, &Person::om_side_effects_om_duration_FOR_educ_two_level_X_ETL_INCOMPLETE, false, &Person::om_notify_om_duration_FOR_educ_two_level_X_ETL_INCOMPLETE, true>
    om_duration_FOR_educ_two_level_X_ETL_INCOMPLETE;

    /** duration(educ_two_level, ETL_NEVER) */
    static const std::string om_name_om_duration_FOR_educ_two_level_X_ETL_NEVER;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_educ_two_level_X_ETL_NEVER, &Person::om_side_effects_om_duration_FOR_educ_two_level_X_ETL_NEVER, false, &Person::om_notify_om_duration_FOR_educ_two_level_X_ETL_NEVER, true>
    om_duration_FOR_educ_two_level_X_ETL_NEVER;

    /** duration(ever_union, true) */
    static const std::string om_name_om_duration_FOR_ever_union_X_true;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_ever_union_X_true, &Person::om_side_effects_om_duration_FOR_ever_union_X_true, false, &Person::om_notify_om_duration_FOR_ever_union_X_true, true>
    om_duration_FOR_ever_union_X_true;

    /** duration(got_prenat_care, GPC_YES) */
    static const std::string om_name_om_duration_FOR_got_prenat_care_X_GPC_YES;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_got_prenat_care_X_GPC_YES, &Person::om_side_effects_om_duration_FOR_got_prenat_care_X_GPC_YES, false, &Person::om_notify_om_duration_FOR_got_prenat_care_X_GPC_YES, true>
    om_duration_FOR_got_prenat_care_X_GPC_YES;

    /** duration(has_spouse, true) */
    static const std::string om_name_om_duration_FOR_has_spouse_X_true;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_has_spouse_X_true, &Person::om_side_effects_om_duration_FOR_has_spouse_X_true, false, &Person::om_notify_om_duration_FOR_has_spouse_X_true, true>
    om_duration_FOR_has_spouse_X_true;

    /** duration(is_aded0, true) */
    static const std::string om_name_om_duration_FOR_is_aded0_X_true;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_is_aded0_X_true, &Person::om_side_effects_om_duration_FOR_is_aded0_X_true, false, &Person::om_notify_om_duration_FOR_is_aded0_X_true, true>
    om_duration_FOR_is_aded0_X_true;

    /** duration(is_aded1, true) */
    static const std::string om_name_om_duration_FOR_is_aded1_X_true;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_is_aded1_X_true, &Person::om_side_effects_om_duration_FOR_is_aded1_X_true, false, &Person::om_notify_om_duration_FOR_is_aded1_X_true, true>
    om_duration_FOR_is_aded1_X_true;

    /** duration(is_aded2, true) */
    static const std::string om_name_om_duration_FOR_is_aded2_X_true;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_is_aded2_X_true, &Person::om_side_effects_om_duration_FOR_is_aded2_X_true, false, &Person::om_notify_om_duration_FOR_is_aded2_X_true, true>
    om_duration_FOR_is_aded2_X_true;

    /** duration(is_child, true) */
    static const std::string om_name_om_duration_FOR_is_child_X_true;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_is_child_X_true, &Person::om_side_effects_om_duration_FOR_is_child_X_true, false, &Person::om_notify_om_duration_FOR_is_child_X_true, true>
    om_duration_FOR_is_child_X_true;

    /** duration(is_immunized, true) */
    static const std::string om_name_om_duration_FOR_is_immunized_X_true;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_is_immunized_X_true, &Person::om_side_effects_om_duration_FOR_is_immunized_X_true, false, &Person::om_notify_om_duration_FOR_is_immunized_X_true, true>
    om_duration_FOR_is_immunized_X_true;

    /** duration(is_old, true) */
    static const std::string om_name_om_duration_FOR_is_old_X_true;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_is_old_X_true, &Person::om_side_effects_om_duration_FOR_is_old_X_true, false, &Person::om_notify_om_duration_FOR_is_old_X_true, true>
    om_duration_FOR_is_old_X_true;

    /** duration(tab_out_of_primary, true) */
    static const std::string om_name_om_duration_FOR_tab_out_of_primary_X_true;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_tab_out_of_primary_X_true, &Person::om_side_effects_om_duration_FOR_tab_out_of_primary_X_true, false, &Person::om_notify_om_duration_FOR_tab_out_of_primary_X_true, true>
    om_duration_FOR_tab_out_of_primary_X_true;

    /** duration(years_preschool, 0) */
    static const std::string om_name_om_duration_FOR_years_preschool_X_0;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_years_preschool_X_0, &Person::om_side_effects_om_duration_FOR_years_preschool_X_0, false, &Person::om_notify_om_duration_FOR_years_preschool_X_0, true>
    om_duration_FOR_years_preschool_X_0;

    /** duration(years_preschool, 1) */
    static const std::string om_name_om_duration_FOR_years_preschool_X_1;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_years_preschool_X_1, &Person::om_side_effects_om_duration_FOR_years_preschool_X_1, false, &Person::om_notify_om_duration_FOR_years_preschool_X_1, true>
    om_duration_FOR_years_preschool_X_1;

    /** duration(years_preschool, 2) */
    static const std::string om_name_om_duration_FOR_years_preschool_X_2;
    AgentVar<Time, double, Person, &om_name_om_duration_FOR_years_preschool_X_2, &Person::om_side_effects_om_duration_FOR_years_preschool_X_2, false, &Person::om_notify_om_duration_FOR_years_preschool_X_2, true>
    om_duration_FOR_years_preschool_X_2;

    /** entrances(educ_one_grade_attended, 1) */
    static const std::string om_name_om_entrances_FOR_educ_one_grade_attended_X_1;
    AgentVar<counter, void, Person, &om_name_om_entrances_FOR_educ_one_grade_attended_X_1, &Person::om_side_effects_om_entrances_FOR_educ_one_grade_attended_X_1, false, &Person::om_notify_om_entrances_FOR_educ_one_grade_attended_X_1, true>
    om_entrances_FOR_educ_one_grade_attended_X_1;

    /** entrances(has_passed_primary, true) */
    static const std::string om_name_om_entrances_FOR_has_passed_primary_X_true;
    AgentVar<counter, void, Person, &om_name_om_entrances_FOR_has_passed_primary_X_true, &Person::om_side_effects_om_entrances_FOR_has_passed_primary_X_true, false, &Person::om_notify_om_entrances_FOR_has_passed_primary_X_true, true>
    om_entrances_FOR_has_passed_primary_X_true;

    /** om_mlHHFatherChildren_count */
    static const std::string om_name_om_mlHHFatherChildren_count;
    AgentVar<counter, void, Person, &om_name_om_mlHHFatherChildren_count, &Person::om_side_effects_om_mlHHFatherChildren_count, true, &Person::om_notify_om_mlHHFatherChildren_count, false>
    om_mlHHFatherChildren_count;


    /** om_mlHHFatherChildren_sum_over_is_alive */
    static const std::string om_name_om_mlHHFatherChildren_sum_over_is_alive;
    AgentVar<integer, void, Person, &om_name_om_mlHHFatherChildren_sum_over_is_alive, &Person::om_side_effects_om_mlHHFatherChildren_sum_over_is_alive, true, &Person::om_notify_om_mlHHFatherChildren_sum_over_is_alive, false>
    om_mlHHFatherChildren_sum_over_is_alive;


    /** om_mlHHMotherChildren_count */
    static const std::string om_name_om_mlHHMotherChildren_count;
    AgentVar<counter, void, Person, &om_name_om_mlHHMotherChildren_count, &Person::om_side_effects_om_mlHHMotherChildren_count, true, &Person::om_notify_om_mlHHMotherChildren_count, false>
    om_mlHHMotherChildren_count;


    /** om_mlHHMotherChildren_min_over_integer_age */
    static const std::string om_name_om_mlHHMotherChildren_min_over_integer_age;
    AgentVar<AGE_RANGE, int, Person, &om_name_om_mlHHMotherChildren_min_over_integer_age, &Person::om_side_effects_om_mlHHMotherChildren_min_over_integer_age, true, &Person::om_notify_om_mlHHMotherChildren_min_over_integer_age, false>
    om_mlHHMotherChildren_min_over_integer_age;


    /** om_mlHHMotherChildren_sum_over_is_alive */
    static const std::string om_name_om_mlHHMotherChildren_sum_over_is_alive;
    AgentVar<integer, void, Person, &om_name_om_mlHHMotherChildren_sum_over_is_alive, &Person::om_side_effects_om_mlHHMotherChildren_sum_over_is_alive, true, &Person::om_notify_om_mlHHMotherChildren_sum_over_is_alive, false>
    om_mlHHMotherChildren_sum_over_is_alive;


    /** self_scheduling_split(age, AGE_MIG_PART) */
    static const std::string om_name_om_self_scheduling_split_FOR_age_X_AGE_MIG_PART;
    AgentVar<AGE_MIG_PART, int, Person, &om_name_om_self_scheduling_split_FOR_age_X_AGE_MIG_PART, &Person::om_side_effects_om_self_scheduling_split_FOR_age_X_AGE_MIG_PART, true, &Person::om_notify_om_self_scheduling_split_FOR_age_X_AGE_MIG_PART, false>
    om_self_scheduling_split_FOR_age_X_AGE_MIG_PART;

    /** self_scheduling_split(active_spell_duration(this_parity_spell, true), DUR_TIME_IN_PARITY) */
    static const std::string om_name_om_self_scheduling_split_FOR_om_active_spell_duration_FOR_this_parity_spell_X_true_X_DUR_TIME_IN_PARITY;
    AgentVar<DUR_TIME_IN_PARITY, int, Person, &om_name_om_self_scheduling_split_FOR_om_active_spell_duration_FOR_this_parity_spell_X_true_X_DUR_TIME_IN_PARITY, &Person::om_side_effects_om_self_scheduling_split_FOR_om_active_spell_duration_FOR_this_parity_spell_X_true_X_DUR_TIME_IN_PARITY, true, &Person::om_notify_om_self_scheduling_split_FOR_om_active_spell_duration_FOR_this_parity_spell_X_true_X_DUR_TIME_IN_PARITY, false>
    om_self_scheduling_split_FOR_om_active_spell_duration_FOR_this_parity_spell_X_true_X_DUR_TIME_IN_PARITY;

    /** split(age_last_birth, MOTH_AGEGR_PART) */
    static const std::string om_name_om_split_FOR_age_last_birth_X_MOTH_AGEGR_PART;
    AgentVar<MOTH_AGEGR_PART, int, Person, &om_name_om_split_FOR_age_last_birth_X_MOTH_AGEGR_PART, &Person::om_side_effects_om_split_FOR_age_last_birth_X_MOTH_AGEGR_PART, true, &Person::om_notify_om_split_FOR_age_last_birth_X_MOTH_AGEGR_PART, false>
    om_split_FOR_age_last_birth_X_MOTH_AGEGR_PART;

    /** split(age_youngest_child, CHILD_AGEGR_PART) */
    static const std::string om_name_om_split_FOR_age_youngest_child_X_CHILD_AGEGR_PART;
    AgentVar<CHILD_AGEGR_PART, int, Person, &om_name_om_split_FOR_age_youngest_child_X_CHILD_AGEGR_PART, &Person::om_side_effects_om_split_FOR_age_youngest_child_X_CHILD_AGEGR_PART, true, &Person::om_notify_om_split_FOR_age_youngest_child_X_CHILD_AGEGR_PART, false>
    om_split_FOR_age_youngest_child_X_CHILD_AGEGR_PART;

    /** split(integer_age, TAB_AGEC5) */
    static const std::string om_name_om_split_FOR_integer_age_X_TAB_AGEC5;
    AgentVar<TAB_AGEC5, int, Person, &om_name_om_split_FOR_integer_age_X_TAB_AGEC5, &Person::om_side_effects_om_split_FOR_integer_age_X_TAB_AGEC5, true, &Person::om_notify_om_split_FOR_integer_age_X_TAB_AGEC5, true>
    om_split_FOR_integer_age_X_TAB_AGEC5;

    /** om_ss_time_om_self_scheduling_split_FOR_age_X_AGE_MIG_PART */
    Time om_ss_time_om_self_scheduling_split_FOR_age_X_AGE_MIG_PART;

    /** om_ss_time_om_self_scheduling_split_FOR_om_active_spell_duration_FOR_this_parity_spell_X_true_X_DUR_TIME_IN_PARITY */
    Time om_ss_time_om_self_scheduling_split_FOR_om_active_spell_duration_FOR_this_parity_spell_X_true_X_DUR_TIME_IN_PARITY;

    /** om_ss_time_om_trigger_changes_FOR_calendar_year */
    Time om_ss_time_om_trigger_changes_FOR_calendar_year;

    /** om_ss_time_om_trigger_changes_FOR_geo */
    Time om_ss_time_om_trigger_changes_FOR_geo;

    /** om_ss_time_om_trigger_entrances_FOR_is_ready_for_birthtables_X_true */
    Time om_ss_time_om_trigger_entrances_FOR_is_ready_for_birthtables_X_true;

    /** om_tabBirthsYearPlace_in_om_transitions_FOR_is_alive_X_false_X_true */
    counter om_tabBirthsYearPlace_in_om_transitions_FOR_is_alive_X_false_X_true;

    /** om_tabEducationFateGeobirYob_in_om_duration */
    Time om_tabEducationFateGeobirYob_in_om_duration;

    /** om_tabEducationFateGeobirYob_in_om_duration_FOR_educ_one_fate_X_EOL_HIGH */
    Time om_tabEducationFateGeobirYob_in_om_duration_FOR_educ_one_fate_X_EOL_HIGH;

    /** om_tabEducationFateGeobirYob_in_om_duration_FOR_educ_one_fate_X_EOL_LOW */
    Time om_tabEducationFateGeobirYob_in_om_duration_FOR_educ_one_fate_X_EOL_LOW;

    /** om_tabEducationFateGeobirYob_in_om_duration_FOR_educ_one_fate_X_EOL_MEDIUM */
    Time om_tabEducationFateGeobirYob_in_om_duration_FOR_educ_one_fate_X_EOL_MEDIUM;

    /** om_tabHCI_in_om_transitions_FOR_integer_age_X_14_X_15 */
    counter om_tabHCI_in_om_transitions_FOR_integer_age_X_14_X_15;

    /** om_tabHCI_in_om_transitions_FOR_is_alive_X_true_X_false */
    counter om_tabHCI_in_om_transitions_FOR_is_alive_X_true_X_false;

    /** om_tabHCI_in_om_transitions_FOR_survived_early_years_X_false_X_true */
    counter om_tabHCI_in_om_transitions_FOR_survived_early_years_X_false_X_true;

    /** om_tabHCI_in_om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false */
    real om_tabHCI_in_om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false;

    /** om_tabHCI_in_om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false */
    real om_tabHCI_in_om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false;

    /** om_tabHCI_in_om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false */
    integer om_tabHCI_in_om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false;

    /** om_tabHCI_in_om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false */
    real om_tabHCI_in_om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false;

    /** om_tabHCI_in_om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false */
    integer om_tabHCI_in_om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false;

    /** om_tabHCI_in_om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false */
    integer om_tabHCI_in_om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false;

    /** om_tabHavingSpouse_in_om_duration */
    Time om_tabHavingSpouse_in_om_duration;

    /** om_tabHavingSpouse_in_om_duration_FOR_ever_union_X_true */
    Time om_tabHavingSpouse_in_om_duration_FOR_ever_union_X_true;

    /** om_tabHavingSpouse_in_om_duration_FOR_has_spouse_X_true */
    Time om_tabHavingSpouse_in_om_duration_FOR_has_spouse_X_true;

    /** om_tabMigrationOriginDestination_in_is_alive */
    bool om_tabMigrationOriginDestination_in_is_alive;

    /** om_tabPopulationYearPlace_in_om_duration */
    Time om_tabPopulationYearPlace_in_om_duration;

    /** om_tabPreSchool_in_om_duration */
    Time om_tabPreSchool_in_om_duration;

    /** om_tabPreSchool_in_om_duration_FOR_years_preschool_X_0 */
    Time om_tabPreSchool_in_om_duration_FOR_years_preschool_X_0;

    /** om_tabPreSchool_in_om_duration_FOR_years_preschool_X_1 */
    Time om_tabPreSchool_in_om_duration_FOR_years_preschool_X_1;

    /** om_tabPreSchool_in_om_duration_FOR_years_preschool_X_2 */
    Time om_tabPreSchool_in_om_duration_FOR_years_preschool_X_2;

    /** om_tabStuntingSexRegMotherYob_in_is_stunted */
    bool om_tabStuntingSexRegMotherYob_in_is_stunted;

    /** om_tabStuntingSexRegYob_in_is_stunted */
    bool om_tabStuntingSexRegYob_in_is_stunted;

    /** transitions(integer_age, 14, 15) */
    static const std::string om_name_om_transitions_FOR_integer_age_X_14_X_15;
    AgentVar<counter, void, Person, &om_name_om_transitions_FOR_integer_age_X_14_X_15, &Person::om_side_effects_om_transitions_FOR_integer_age_X_14_X_15, false, &Person::om_notify_om_transitions_FOR_integer_age_X_14_X_15, true>
    om_transitions_FOR_integer_age_X_14_X_15;

    /** transitions(is_alive, false, true) */
    static const std::string om_name_om_transitions_FOR_is_alive_X_false_X_true;
    AgentVar<counter, void, Person, &om_name_om_transitions_FOR_is_alive_X_false_X_true, &Person::om_side_effects_om_transitions_FOR_is_alive_X_false_X_true, false, &Person::om_notify_om_transitions_FOR_is_alive_X_false_X_true, true>
    om_transitions_FOR_is_alive_X_false_X_true;

    /** transitions(is_alive, true, false) */
    static const std::string om_name_om_transitions_FOR_is_alive_X_true_X_false;
    AgentVar<counter, void, Person, &om_name_om_transitions_FOR_is_alive_X_true_X_false, &Person::om_side_effects_om_transitions_FOR_is_alive_X_true_X_false, false, &Person::om_notify_om_transitions_FOR_is_alive_X_true_X_false, true>
    om_transitions_FOR_is_alive_X_true_X_false;

    /** transitions(survived_early_years, false, true) */
    static const std::string om_name_om_transitions_FOR_survived_early_years_X_false_X_true;
    AgentVar<counter, void, Person, &om_name_om_transitions_FOR_survived_early_years_X_false_X_true, &Person::om_side_effects_om_transitions_FOR_survived_early_years_X_false_X_true, false, &Person::om_notify_om_transitions_FOR_survived_early_years_X_false_X_true, true>
    om_transitions_FOR_survived_early_years_X_false_X_true;

    /** trigger_changes(calendar_year) */
    static const std::string om_name_om_trigger_changes_FOR_calendar_year;
    AgentVar<bool, void, Person, &om_name_om_trigger_changes_FOR_calendar_year, &Person::om_side_effects_om_trigger_changes_FOR_calendar_year, true, &Person::om_notify_om_trigger_changes_FOR_calendar_year, false>
    om_trigger_changes_FOR_calendar_year;

    /** trigger_changes(geo) */
    static const std::string om_name_om_trigger_changes_FOR_geo;
    AgentVar<bool, void, Person, &om_name_om_trigger_changes_FOR_geo, &Person::om_side_effects_om_trigger_changes_FOR_geo, true, &Person::om_notify_om_trigger_changes_FOR_geo, false>
    om_trigger_changes_FOR_geo;

    /** trigger_entrances(is_ready_for_birthtables, true) */
    static const std::string om_name_om_trigger_entrances_FOR_is_ready_for_birthtables_X_true;
    AgentVar<bool, void, Person, &om_name_om_trigger_entrances_FOR_is_ready_for_birthtables_X_true, &Person::om_side_effects_om_trigger_entrances_FOR_is_ready_for_birthtables_X_true, true, &Person::om_notify_om_trigger_entrances_FOR_is_ready_for_birthtables_X_true, false>
    om_trigger_entrances_FOR_is_ready_for_birthtables_X_true;

    /** value_at_transitions(is_alive, true, false, adult_survival) */
    static const std::string om_name_om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false;
    AgentVar<real, void, Person, &om_name_om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false, &Person::om_side_effects_om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false, false, &Person::om_notify_om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false, true>
    om_value_at_transitions_FOR_is_alive_X_true_X_adult_survival_X_false;

    /** value_at_transitions(is_alive, true, false, ind_hci) */
    static const std::string om_name_om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false;
    AgentVar<real, void, Person, &om_name_om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false, &Person::om_side_effects_om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false, false, &Person::om_notify_om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false, true>
    om_value_at_transitions_FOR_is_alive_X_true_X_ind_hci_X_false;

    /** value_at_transitions(is_alive, true, false, is_stunted) */
    static const std::string om_name_om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false;
    AgentVar<integer, void, Person, &om_name_om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false, &Person::om_side_effects_om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false, false, &Person::om_notify_om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false, true>
    om_value_at_transitions_FOR_is_alive_X_true_X_is_stunted_X_false;

    /** value_at_transitions(is_alive, true, false, quality_of_schooling) */
    static const std::string om_name_om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false;
    AgentVar<real, void, Person, &om_name_om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false, &Person::om_side_effects_om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false, false, &Person::om_notify_om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false, true>
    om_value_at_transitions_FOR_is_alive_X_true_X_quality_of_schooling_X_false;

    /** value_at_transitions(is_alive, true, false, survived_early_years) */
    static const std::string om_name_om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false;
    AgentVar<integer, void, Person, &om_name_om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false, &Person::om_side_effects_om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false, false, &Person::om_notify_om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false, true>
    om_value_at_transitions_FOR_is_alive_X_true_X_survived_early_years_X_false;

    /** value_at_transitions(is_alive, true, false, years_of_schooling) */
    static const std::string om_name_om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false;
    AgentVar<integer, void, Person, &om_name_om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false, &Person::om_side_effects_om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false, false, &Person::om_notify_om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false, true>
    om_value_at_transitions_FOR_is_alive_X_true_X_years_of_schooling_X_false;

    /** parity */
    static const std::string om_name_parity;
    AssignableAgentVar<PARITY_RANGE, int, Person, &om_name_parity, &Person::om_side_effects_parity, true, &Person::om_notify_parity, false>
    parity;

    /** preschool_is_decided */
    static const std::string om_name_preschool_is_decided;
    AssignableAgentVar<bool, void, Person, &om_name_preschool_is_decided, &Person::om_side_effects_preschool_is_decided, true, &Person::om_notify_preschool_is_decided, false>
    preschool_is_decided;

    /** ptr_creator */
    Person_ptr ptr_creator;

    /** ptr_observation */
    Observation_ptr ptr_observation;

    /** quality_adjusted_schooling */
    static const std::string om_name_quality_adjusted_schooling;
    AssignableAgentVar<double, void, Person, &om_name_quality_adjusted_schooling, &Person::om_side_effects_quality_adjusted_schooling, false, &Person::om_notify_quality_adjusted_schooling, false>
    quality_adjusted_schooling;

    /** quality_of_schooling */
    static const std::string om_name_quality_of_schooling;
    AssignableAgentVar<double, void, Person, &om_name_quality_of_schooling, &Person::om_side_effects_quality_of_schooling, false, &Person::om_notify_quality_of_schooling, false>
    quality_of_schooling;

    /** ready_to_set_alive */
    static const std::string om_name_ready_to_set_alive;
    AssignableAgentVar<bool, void, Person, &om_name_ready_to_set_alive, &Person::om_side_effects_ready_to_set_alive, true, &Person::om_notify_ready_to_set_alive, false>
    ready_to_set_alive;

    /** region_birth */
    static const std::string om_name_region_birth;
    AgentVar<REGION_INT, int, Person, &om_name_region_birth, &Person::om_side_effects_region_birth, true, &Person::om_notify_region_birth, false>
    region_birth;

    /** region_int */
    static const std::string om_name_region_int;
    AgentVar<REGION_INT, int, Person, &om_name_region_int, &Person::om_side_effects_region_int, true, &Person::om_notify_region_int, false>
    region_int;

    /** region_nat */
    static const std::string om_name_region_nat;
    AgentVar<REGION_NAT, int, Person, &om_name_region_nat, &Person::om_side_effects_region_nat, true, &Person::om_notify_region_nat, true>
    region_nat;

    /** sel_years */
    static const std::string om_name_sel_years;
    AgentVar<TAB_SEL_YEARS, int, Person, &om_name_sel_years, &Person::om_side_effects_sel_years, true, &Person::om_notify_sel_years, true>
    sel_years;

    /** selected_year10 */
    static const std::string om_name_selected_year10;
    AgentVar<SELECTED_YEAR10, int, Person, &om_name_selected_year10, &Person::om_side_effects_selected_year10, true, &Person::om_notify_selected_year10, true>
    selected_year10;

    /** sex */
    static const std::string om_name_sex;
    AssignableAgentVar<SEX, int, Person, &om_name_sex, &Person::om_side_effects_sex, true, &Person::om_notify_sex, true>
    sex;

    /** sim_year */
    static const std::string om_name_sim_year;
    AgentVar<SIM_YEAR_RANGE, int, Person, &om_name_sim_year, &Person::om_side_effects_sim_year, true, &Person::om_notify_sim_year, true>
    sim_year;

    /** spouse_group */
    static const std::string om_name_spouse_group;
    AgentVar<SPOUSE_GROUP, int, Person, &om_name_spouse_group, &Person::om_side_effects_spouse_group, true, &Person::om_notify_spouse_group, false>
    spouse_group;

    /** survived_early_years */
    static const std::string om_name_survived_early_years;
    AgentVar<bool, void, Person, &om_name_survived_early_years, &Person::om_side_effects_survived_early_years, true, &Person::om_notify_survived_early_years, false>
    survived_early_years;

    /** tab_out_of_primary */
    static const std::string om_name_tab_out_of_primary;
    AgentVar<bool, void, Person, &om_name_tab_out_of_primary, &Person::om_side_effects_tab_out_of_primary, true, &Person::om_notify_tab_out_of_primary, false>
    tab_out_of_primary;

    /** tab_sim_yob */
    static const std::string om_name_tab_sim_yob;
    AgentVar<SIM_YEAR_RANGE, int, Person, &om_name_tab_sim_yob, &Person::om_side_effects_tab_sim_yob, true, &Person::om_notify_tab_sim_yob, true>
    tab_sim_yob;

    /** this_parity_spell */
    static const std::string om_name_this_parity_spell;
    AssignableAgentVar<bool, void, Person, &om_name_this_parity_spell, &Person::om_side_effects_this_parity_spell, true, &Person::om_notify_this_parity_spell, false>
    this_parity_spell;

    /** time */
    static const std::string om_name_time;
    AssignableAgentVar<Time, double, Person, &om_name_time, &Person::om_side_effects_time, true, &Person::om_notify_time, false>
    time;

    /** time_first_move */
    static const std::string om_name_time_first_move;
    AssignableAgentVar<Time, double, Person, &om_name_time_first_move, &Person::om_side_effects_time_first_move, false, &Person::om_notify_time_first_move, false>
    time_first_move;

    /** time_in_parity */
    static const std::string om_name_time_in_parity;
    AgentVar<int, void, Person, &om_name_time_in_parity, &Person::om_side_effects_time_in_parity, true, &Person::om_notify_time_in_parity, false>
    time_in_parity;

    /** time_last_move */
    static const std::string om_name_time_last_move;
    AssignableAgentVar<Time, double, Person, &om_name_time_last_move, &Person::om_side_effects_time_last_move, true, &Person::om_notify_time_last_move, false>
    time_last_move;

    /** time_next_birthday */
    static const std::string om_name_time_next_birthday;
    AssignableAgentVar<Time, double, Person, &om_name_time_next_birthday, &Person::om_side_effects_time_next_birthday, true, &Person::om_notify_time_next_birthday, false>
    time_next_birthday;

    /** time_of_birth */
    static const std::string om_name_time_of_birth;
    AssignableAgentVar<Time, double, Person, &om_name_time_of_birth, &Person::om_side_effects_time_of_birth, true, &Person::om_notify_time_of_birth, false>
    time_of_birth;

    /** time_of_first_immigration */
    static const std::string om_name_time_of_first_immigration;
    AssignableAgentVar<Time, double, Person, &om_name_time_of_first_immigration, &Person::om_side_effects_time_of_first_immigration, true, &Person::om_notify_time_of_first_immigration, false>
    time_of_first_immigration;

    /** union1_group */
    static const std::string om_name_union1_group;
    AgentVar<UNION1_GROUP, int, Person, &om_name_union1_group, &Person::om_side_effects_union1_group, true, &Person::om_notify_union1_group, false>
    union1_group;

    /** year_of_birth */
    static const std::string om_name_year_of_birth;
    AgentVar<ALL_YEAR_RANGE, int, Person, &om_name_year_of_birth, &Person::om_side_effects_year_of_birth, true, &Person::om_notify_year_of_birth, true>
    year_of_birth;

    /** year_of_first_immigration */
    static const std::string om_name_year_of_first_immigration;
    AgentVar<SIM_YEAR_RANGE, int, Person, &om_name_year_of_first_immigration, &Person::om_side_effects_year_of_first_immigration, true, &Person::om_notify_year_of_first_immigration, false>
    year_of_first_immigration;

    /** years_of_schooling */
    static const std::string om_name_years_of_schooling;
    AgentVar<int, void, Person, &om_name_years_of_schooling, &Person::om_side_effects_years_of_schooling, false, &Person::om_notify_years_of_schooling, false>
    years_of_schooling;

    /** years_preschool */
    static const std::string om_name_years_preschool;
    AssignableAgentVar<int, void, Person, &om_name_years_preschool, &Person::om_side_effects_years_preschool, true, &Person::om_notify_years_preschool, false>
    years_preschool;

    /** zzz_om_om_ss_event_om_event */
    Event<Person, 31, 255, 15, &Person::om_ss_event, &Person::om_ss_time>
    zzz_om_om_ss_event_om_event;

    // The declaration of the static member Person
    // used to retrieve (zero) values when dereferencing nullptr link attributes.
    static thread_local Person om_null_agent;
}; // class Person

// model agent classes
class StartpopValues : public Agent<StartpopValues>
{
public:

    //
    // function members in StartpopValues agent
    //

    // operator overload for entity comparison based on entity_id
    bool operator< ( StartpopValues & rhs )
    {
        return entity_id < rhs.entity_id;
    }

    /** Finishes the Clock */
    void Finish();

    /** Implement the event FirstMoveEvent when it occurs in the StartpopValues agent (model code). */
    void FirstMoveEvent();

    /** Implement the event FirstUnionImputationEvent when it occurs in the StartpopValues agent (model code). */
    void FirstUnionImputationEvent();

    /** Implement the event LastBirthImputationEvent when it occurs in the StartpopValues agent (model code). */
    void LastBirthImputationEvent();

    /** Implement the event LastMoveEvent when it occurs in the StartpopValues agent (model code). */
    void LastMoveEvent();

    /** Implement the event SetFirstUnionClock when it occurs in the StartpopValues agent (model code). */
    void SetFirstUnionClock();

    /** Implement the event SetLastBirthClock when it occurs in the StartpopValues agent (model code). */
    void SetLastBirthClock();

    /** Implement the event SetResidentialMoveClock when it occurs in the StartpopValues agent (model code). */
    void SetResidentialMoveClock();

    /** Starts the Clock */
    void Start(TIME dTime);

    /** Implement the event SuicideEvent when it occurs in the StartpopValues agent (model code). */
    void SuicideEvent();

    /** Age the entity to the given time. */
    void age_agent(Time t);

    /** Check that argument is not in past of entity, else throw run-time exception. */
    Time check_time(Time t);

    /** Evaluate and assign expression for is_removeable. */
    void is_removeable_update_identity();

    /** One-time calculation of the offsets of attributes and increments in the containing entity. */
    void om_assign_member_offsets();

    /** Check that starting value of time is valid and raise run-time error if not. */
    void om_check_starting_time();

    /** Remove the entity in each entity set when it leaves the simulation. */
    void om_finalize_entity_sets();

    /** Remove each event in the entity from the event queue when it leaves the simulation. */
    void om_finalize_events();

    /** Set all links in agent to nullptr when the entity leaves the simulation. */
    void om_finalize_links();

    /** Empty all multilinks in agent when the entity leaves the simulation. */
    void om_finalize_multilinks();

    /** Finish the entity's pending increments in each table when it leaves the simulation. */
    void om_finalize_tables();

    /** Return unique entity_id of this entity. */
    int om_get_entity_id();

    /** Return current time of this entity. */
    Time om_get_time();

    /** Initialization of data members before the entity enters simulation. */
    void om_initialize_data_members();

    /** Initialization of data members of the 'zero' entity to default values for the type (0). */
    void om_initialize_data_members0();

    /** Initialize derived attributes before the entity enters the simulation. */
    void om_initialize_derived_attributes();

    /** Insert the entity in each entity set when it enters the simulation. */
    void om_initialize_entity_sets();

    /** Force event time calculation for each event in the entity when it enters simulation. */
    void om_initialize_events();

    /** Initialize each identity attribute before developer code in Start executes. */
    void om_initialize_identity_attributes();

    /** Initialize the entity's increments in each table when it enters the simulation. */
    void om_initialize_tables();

    /** Initialize time and age for this entity. */
    void om_initialize_time_and_age();

    /** Implement notification before changing age in agent StartpopValues. */
    void om_notify_age();

    /** Implement notification before changing case_seed in agent StartpopValues. */
    void om_notify_case_seed();

    /** Implement notification before changing entity_id in agent StartpopValues. */
    void om_notify_entity_id();

    /** Implement notification before changing events in agent StartpopValues. */
    void om_notify_events();

    /** Implement notification before changing is_activated in agent StartpopValues. */
    void om_notify_is_activated();

    /** Implement notification before changing is_removeable in agent StartpopValues. */
    void om_notify_is_removeable();

    /** Implement notification before changing is_set_first_union_clock in agent StartpopValues. */
    void om_notify_is_set_first_union_clock();

    /** Implement notification before changing is_set_last_birth_clock in agent StartpopValues. */
    void om_notify_is_set_last_birth_clock();

    /** Implement notification before changing is_set_residential_move_clock in agent StartpopValues. */
    void om_notify_is_set_residential_move_clock();

    /** Implement notification before changing lPersonStartpop in agent StartpopValues. */
    void om_notify_lPersonStartpop();

    /** Implement notification before changing scheduled_time_first_move in agent StartpopValues. */
    void om_notify_scheduled_time_first_move();

    /** Implement notification before changing scheduled_time_last_move in agent StartpopValues. */
    void om_notify_scheduled_time_last_move();

    /** Implement notification before changing time in agent StartpopValues. */
    void om_notify_time();

    /** Implement notification before changing time_first_union_imputation in agent StartpopValues. */
    void om_notify_time_first_union_imputation();

    /** Implement notification before changing time_last_birth_imputation in agent StartpopValues. */
    void om_notify_time_last_birth_imputation();

    /** Reset derived attributes before the entity enters the simulation. */
    void om_reset_derived_attributes();

    /** Set the unique entity_id of this entity. */
    void om_set_entity_id();

    /** Implement side effects of changing age in agent StartpopValues. */
    void om_side_effects_age(Time om_old, Time om_new);

    /** Implement side effects of changing case_seed in agent StartpopValues. */
    void om_side_effects_case_seed(double om_old, double om_new);

    /** Implement side effects of changing entity_id in agent StartpopValues. */
    void om_side_effects_entity_id(int om_old, int om_new);

    /** Implement side effects of changing events in agent StartpopValues. */
    void om_side_effects_events(counter om_old, counter om_new);

    /** Implement side effects of changing is_activated in agent StartpopValues. */
    void om_side_effects_is_activated(bool om_old, bool om_new);

    /** Implement side effects of changing is_removeable in agent StartpopValues. */
    void om_side_effects_is_removeable(bool om_old, bool om_new);

    /** Implement side effects of changing is_set_first_union_clock in agent StartpopValues. */
    void om_side_effects_is_set_first_union_clock(bool om_old, bool om_new);

    /** Implement side effects of changing is_set_last_birth_clock in agent StartpopValues. */
    void om_side_effects_is_set_last_birth_clock(bool om_old, bool om_new);

    /** Implement side effects of changing is_set_residential_move_clock in agent StartpopValues. */
    void om_side_effects_is_set_residential_move_clock(bool om_old, bool om_new);

    /** Implement side effects of changing lPersonStartpop in agent StartpopValues. */
    void om_side_effects_lPersonStartpop(entity_ptr<Person> om_old, entity_ptr<Person> om_new);

    /** Implement side effects of changing scheduled_time_first_move in agent StartpopValues. */
    void om_side_effects_scheduled_time_first_move(Time om_old, Time om_new);

    /** Implement side effects of changing scheduled_time_last_move in agent StartpopValues. */
    void om_side_effects_scheduled_time_last_move(Time om_old, Time om_new);

    /** Implement side effects of changing time in agent StartpopValues. */
    void om_side_effects_time(Time om_old, Time om_new);

    /** Implement side effects of changing time_first_union_imputation in agent StartpopValues. */
    void om_side_effects_time_first_union_imputation(Time om_old, Time om_new);

    /** Implement side effects of changing time_last_birth_imputation in agent StartpopValues. */
    void om_side_effects_time_last_birth_imputation(Time om_old, Time om_new);

    /** Return the time to the event FirstMoveEvent in the StartpopValues agent (model code). */
    Time timeFirstMoveEvent();

    /** Return the time to the event FirstUnionImputationEvent in the StartpopValues agent (model code). */
    Time timeFirstUnionImputationEvent();

    /** Return the time to the event LastBirthImputationEvent in the StartpopValues agent (model code). */
    Time timeLastBirthImputationEvent();

    /** Return the time to the event LastMoveEvent in the StartpopValues agent (model code). */
    Time timeLastMoveEvent();

    /** Return the time to the event SetFirstUnionClock in the StartpopValues agent (model code). */
    Time timeSetFirstUnionClock();

    /** Return the time to the event SetLastBirthClock in the StartpopValues agent (model code). */
    Time timeSetLastBirthClock();

    /** Return the time to the event SetResidentialMoveClock in the StartpopValues agent (model code). */
    Time timeSetResidentialMoveClock();

    /** Return the time to the event SuicideEvent in the StartpopValues agent (model code). */
    Time timeSuicideEvent();


    //
    // Entity table increment members in StartpopValues entity
    //



    //
    // data members in StartpopValues agent
    //


    /** StartPopValue */
    double StartPopValue[PERSON_MICRODATA_COLUMNS::size];

    /** age */
    static const std::string om_name_age;
    AssignableAgentVar<Time, double, StartpopValues, &om_name_age, &StartpopValues::om_side_effects_age, false, &StartpopValues::om_notify_age, false>
    age;

    /** case_seed */
    static const std::string om_name_case_seed;
    AssignableAgentVar<double, void, StartpopValues, &om_name_case_seed, &StartpopValues::om_side_effects_case_seed, false, &StartpopValues::om_notify_case_seed, false>
    case_seed;

    /** entity_id */
    static const std::string om_name_entity_id;
    AssignableAgentVar<int, void, StartpopValues, &om_name_entity_id, &StartpopValues::om_side_effects_entity_id, false, &StartpopValues::om_notify_entity_id, false>
    entity_id;

    /** events */
    static const std::string om_name_events;
    AssignableAgentVar<counter, void, StartpopValues, &om_name_events, &StartpopValues::om_side_effects_events, false, &StartpopValues::om_notify_events, false>
    events;

    /** is_activated */
    static const std::string om_name_is_activated;
    AssignableAgentVar<bool, void, StartpopValues, &om_name_is_activated, &StartpopValues::om_side_effects_is_activated, true, &StartpopValues::om_notify_is_activated, false>
    is_activated;

    /** is_removeable */
    static const std::string om_name_is_removeable;
    AgentVar<bool, void, StartpopValues, &om_name_is_removeable, &StartpopValues::om_side_effects_is_removeable, true, &StartpopValues::om_notify_is_removeable, false>
    is_removeable;

    /** is_set_first_union_clock */
    static const std::string om_name_is_set_first_union_clock;
    AssignableAgentVar<bool, void, StartpopValues, &om_name_is_set_first_union_clock, &StartpopValues::om_side_effects_is_set_first_union_clock, true, &StartpopValues::om_notify_is_set_first_union_clock, false>
    is_set_first_union_clock;

    /** is_set_last_birth_clock */
    static const std::string om_name_is_set_last_birth_clock;
    AssignableAgentVar<bool, void, StartpopValues, &om_name_is_set_last_birth_clock, &StartpopValues::om_side_effects_is_set_last_birth_clock, true, &StartpopValues::om_notify_is_set_last_birth_clock, false>
    is_set_last_birth_clock;

    /** is_set_residential_move_clock */
    static const std::string om_name_is_set_residential_move_clock;
    AssignableAgentVar<bool, void, StartpopValues, &om_name_is_set_residential_move_clock, &StartpopValues::om_side_effects_is_set_residential_move_clock, true, &StartpopValues::om_notify_is_set_residential_move_clock, false>
    is_set_residential_move_clock;

    /** lPersonStartpop */
    static const std::string om_name_lPersonStartpop;
    LinkAgentVar<entity_ptr<Person>, bool, StartpopValues, Person, &om_name_lPersonStartpop, &StartpopValues::om_side_effects_lPersonStartpop, true, &StartpopValues::om_notify_lPersonStartpop, false>
    lPersonStartpop;

    /** om_FirstMoveEvent_om_event */
    Event<StartpopValues, 14, 0, 0, &StartpopValues::FirstMoveEvent, &StartpopValues::timeFirstMoveEvent>
    om_FirstMoveEvent_om_event;

    /** om_FirstUnionImputationEvent_om_event */
    Event<StartpopValues, 16, 0, 1, &StartpopValues::FirstUnionImputationEvent, &StartpopValues::timeFirstUnionImputationEvent>
    om_FirstUnionImputationEvent_om_event;

    /** om_LastBirthImputationEvent_om_event */
    Event<StartpopValues, 17, 0, 2, &StartpopValues::LastBirthImputationEvent, &StartpopValues::timeLastBirthImputationEvent>
    om_LastBirthImputationEvent_om_event;

    /** om_LastMoveEvent_om_event */
    Event<StartpopValues, 18, 0, 3, &StartpopValues::LastMoveEvent, &StartpopValues::timeLastMoveEvent>
    om_LastMoveEvent_om_event;

    /** om_SetFirstUnionClock_om_event */
    Event<StartpopValues, 24, 0, 4, &StartpopValues::SetFirstUnionClock, &StartpopValues::timeSetFirstUnionClock>
    om_SetFirstUnionClock_om_event;

    /** om_SetLastBirthClock_om_event */
    Event<StartpopValues, 25, 0, 5, &StartpopValues::SetLastBirthClock, &StartpopValues::timeSetLastBirthClock>
    om_SetLastBirthClock_om_event;

    /** om_SetResidentialMoveClock_om_event */
    Event<StartpopValues, 27, 0, 6, &StartpopValues::SetResidentialMoveClock, &StartpopValues::timeSetResidentialMoveClock>
    om_SetResidentialMoveClock_om_event;

    /** om_SuicideEvent_om_event */
    Event<StartpopValues, 30, 0, 7, &StartpopValues::SuicideEvent, &StartpopValues::timeSuicideEvent>
    om_SuicideEvent_om_event;

    /** scheduled_time_first_move */
    static const std::string om_name_scheduled_time_first_move;
    AssignableAgentVar<Time, double, StartpopValues, &om_name_scheduled_time_first_move, &StartpopValues::om_side_effects_scheduled_time_first_move, true, &StartpopValues::om_notify_scheduled_time_first_move, false>
    scheduled_time_first_move;

    /** scheduled_time_last_move */
    static const std::string om_name_scheduled_time_last_move;
    AssignableAgentVar<Time, double, StartpopValues, &om_name_scheduled_time_last_move, &StartpopValues::om_side_effects_scheduled_time_last_move, true, &StartpopValues::om_notify_scheduled_time_last_move, false>
    scheduled_time_last_move;

    /** time */
    static const std::string om_name_time;
    AssignableAgentVar<Time, double, StartpopValues, &om_name_time, &StartpopValues::om_side_effects_time, true, &StartpopValues::om_notify_time, false>
    time;

    /** time_first_union_imputation */
    static const std::string om_name_time_first_union_imputation;
    AssignableAgentVar<Time, double, StartpopValues, &om_name_time_first_union_imputation, &StartpopValues::om_side_effects_time_first_union_imputation, true, &StartpopValues::om_notify_time_first_union_imputation, false>
    time_first_union_imputation;

    /** time_last_birth_imputation */
    static const std::string om_name_time_last_birth_imputation;
    AssignableAgentVar<Time, double, StartpopValues, &om_name_time_last_birth_imputation, &StartpopValues::om_side_effects_time_last_birth_imputation, true, &StartpopValues::om_notify_time_last_birth_imputation, false>
    time_last_birth_imputation;

    // The declaration of the static member StartpopValues
    // used to retrieve (zero) values when dereferencing nullptr link attributes.
    static thread_local StartpopValues om_null_agent;
}; // class StartpopValues

// entity sets
extern thread_local EntitySet<Person> * asAllFertilePersonsForFertilityAlignment[2];

extern thread_local EntitySet<Person> * asAllFertilePersonsForFertilityAlignmentByAge[38][2];

extern thread_local EntitySet<Person> * asAllPerson;

extern thread_local EntitySet<Person> * asAvailableMale[86][13];

extern thread_local EntitySet<Person> * asAvailableMaleByType[86][3][13];

extern thread_local EntitySet<Person> * asAvailableMaleByTypeImmiScratch[86][3][13][151];

extern thread_local EntitySet<Person> * asAvailableMaleImmiScratch[86][13][151];

extern thread_local EntitySet<Calibrator> * asCalibrator;

extern thread_local EntitySet<Clock> * asClock;

extern thread_local EntitySet<Person> * asFemaleInUnionByAgeAndPartnerAge[51][86];

extern thread_local EntitySet<Person> * asFemaleInUnionByAgeAndPartnerAgeImmiScratch[51][86][151];

extern thread_local EntitySet<Observation> * asObservationAll[4];

extern thread_local EntitySet<Observation> * asObservationByFam[2000001];

extern thread_local EntitySet<Observation> * asObservationByFamOldest[2000001];

extern thread_local EntitySet<Observation> * asObservationHeads[4];

extern thread_local EntitySet<Observation> * asObservationNonHeads[2000001][4];

extern thread_local EntitySet<Observation> * asObservations;

extern thread_local EntitySet<Person> * asPotentialImmigrantMothers[101][151][13];

extern thread_local EntitySet<Person> * asPotentialSchoolOneStudent;

extern thread_local EntitySet<Person> * asPotentialSchoolOneStudentToProcess;

extern thread_local EntitySet<Person> * asPotentialSchoolTwoStudent;

extern thread_local EntitySet<Person> * asPotentialSchoolTwoStudentToProcess;

extern thread_local EntitySet<Person> * asResidentBabies;

extern thread_local EntitySet<Person> * asResidentsAge0Sex[2];

extern thread_local EntitySet<Person> * asResidentsAge0SexGeo[2][13];

extern thread_local EntitySet<Person> * asSimBornAge0[2][13][3];

extern thread_local EntitySet<Observation> * asSimulatedObservationHeads[4];

extern thread_local EntitySet<Person> * asWantToMove[13][13][2][13];

extern thread_local EntitySet<Person> * asWomenNoChildren[3][51][2];

extern thread_local EntitySet<Person> * asWomenWithChildren[3][7][6][2];


void StartSimulation(int id);
void EndSimulation();
