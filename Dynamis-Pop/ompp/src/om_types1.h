/**
 * @file   om_types1.h
 * Types for model 'Dynamis-Pop-3-06-ABC' - Generated by openM++ compiler
 *  
 *  Model version = 1.0.1.0
 *  Model created = 2021-03-17 14:19:34.883
 *  Model digest = 6eccce191106d267b262a54392186270
 */

#pragma once
#include "om_types0.h"
#include "omc/Range.h"
#include "omc/Partition.h"
#include "omc/Classification.h"
#include "omc/entity_ptr.h"

// templated types
/**
 * Range: FAM_ID
 */
typedef Range<ulong, 0, 2000000> FAM_ID; 
typedef int FAM_ID_t; // For use in model code

/**
 * Classification: SEX
 */
enum om_enum_SEX : char {
    /** FEMALE */
    FEMALE = 0,

    /** MALE */
    MALE,

};
typedef Classification<om_enum_SEX, 2> SEX;
typedef int SEX_t; // For use in model code

/**
 * Classification: CREATION_TYPE
 */
enum om_enum_CREATION_TYPE : char {
    /** CT_START */
    CT_START = 0,

    /** CT_POOL */
    CT_POOL,

    /** CT_BIRTH */
    CT_BIRTH,

    /** CT_SCRATCH */
    CT_SCRATCH,

};
typedef Classification<om_enum_CREATION_TYPE, 4> CREATION_TYPE;
typedef int CREATION_TYPE_t; // For use in model code

/**
 * Classification: GOT_PRENAT_CARE
 */
enum om_enum_GOT_PRENAT_CARE : char {
    /** GPC_NO */
    GPC_NO = 0,

    /** GPC_YES */
    GPC_YES,

};
typedef Classification<om_enum_GOT_PRENAT_CARE, 2> GOT_PRENAT_CARE;
typedef int GOT_PRENAT_CARE_t; // For use in model code

/**
 * Classification: PRE_SCHOOL_PARA
 */
enum om_enum_PRE_SCHOOL_PARA : char {
    /** PLP_ANY */
    PLP_ANY = 0,

    /** PLS_TWO */
    PLS_TWO,

};
typedef Classification<om_enum_PRE_SCHOOL_PARA, 2> PRE_SCHOOL_PARA;
typedef int PRE_SCHOOL_PARA_t; // For use in model code

/**
 * Classification: EDUC_ONE_LEVEL
 */
enum om_enum_EDUC_ONE_LEVEL : char {
    /** EOL_LOW */
    EOL_LOW = 0,

    /** EOL_MEDIUM */
    EOL_MEDIUM,

    /** EOL_HIGH */
    EOL_HIGH,

};
typedef Classification<om_enum_EDUC_ONE_LEVEL, 3> EDUC_ONE_LEVEL;
typedef int EDUC_ONE_LEVEL_t; // For use in model code

/**
 * Classification: SCHOOL_INFRA
 */
enum om_enum_SCHOOL_INFRA : char {
    /** SI_TEACHERS */
    SI_TEACHERS = 0,

    /** SI_ROOMS */
    SI_ROOMS,

};
typedef Classification<om_enum_SCHOOL_INFRA, 2> SCHOOL_INFRA;
typedef int SCHOOL_INFRA_t; // For use in model code
/**
 * Range: EDUC_ONE_GRADE
 */
typedef Range<char, 1, 6> EDUC_ONE_GRADE; 
typedef int EDUC_ONE_GRADE_t; // For use in model code
/**
 * Range: EDUC_ONE_GRADE0
 */
typedef Range<char, 0, 6> EDUC_ONE_GRADE0; 
typedef int EDUC_ONE_GRADE0_t; // For use in model code
/**
 * Range: EDUC_ONE_ENTRY_AGE
 */
typedef Range<char, 5, 8> EDUC_ONE_ENTRY_AGE; 
typedef int EDUC_ONE_ENTRY_AGE_t; // For use in model code

/**
 * Classification: EDUC_ONE_STATUS
 */
enum om_enum_EDUC_ONE_STATUS : char {
    /** EOS_NEVER */
    EOS_NEVER = 0,

    /** EOS_WAIT */
    EOS_WAIT,

    /** EOS_ATTEND */
    EOS_ATTEND,

    /** EOS_PAUSE */
    EOS_PAUSE,

    /** EOS_OUT */
    EOS_OUT,

};
typedef Classification<om_enum_EDUC_ONE_STATUS, 5> EDUC_ONE_STATUS;
typedef int EDUC_ONE_STATUS_t; // For use in model code

/**
 * Classification: EDUC_ONE_GEO
 */
enum om_enum_EDUC_ONE_GEO : char {
    /** EOG_OO */
    EOG_OO = 0,

};
typedef Classification<om_enum_EDUC_ONE_GEO, 1> EDUC_ONE_GEO;
typedef int EDUC_ONE_GEO_t; // For use in model code

/**
 * Classification: EDUC_ONE_GROUP
 */
enum om_enum_EDUC_ONE_GROUP : char {
    /** E1G_OO */
    E1G_OO = 0,

};
typedef Classification<om_enum_EDUC_ONE_GROUP, 1> EDUC_ONE_GROUP;
typedef int EDUC_ONE_GROUP_t; // For use in model code

/**
 * Classification: EDUC1_GROUP
 */
enum om_enum_EDUC1_GROUP : char {
    /** E1G_00 */
    E1G_00 = 0,

    /** E1G_01 */
    E1G_01,

    /** E1G_02 */
    E1G_02,

};
typedef Classification<om_enum_EDUC1_GROUP, 3> EDUC1_GROUP;
typedef int EDUC1_GROUP_t; // For use in model code

/**
 * Classification: EDUC1_MODEL
 */
enum om_enum_EDUC1_MODEL : char {
    /** E1M_BASE */
    E1M_BASE = 0,

    /** E1M_REFINED_ALIGNALL */
    E1M_REFINED_ALIGNALL,

    /** E1M_REFINED_ALIGNONCE */
    E1M_REFINED_ALIGNONCE,

};
typedef Classification<om_enum_EDUC1_MODEL, 3> EDUC1_MODEL;
typedef int EDUC1_MODEL_t; // For use in model code
/**
 * Range: EDUC_TWO_GRADE
 */
typedef Range<char, 1, 6> EDUC_TWO_GRADE; 
typedef int EDUC_TWO_GRADE_t; // For use in model code
/**
 * Range: EDUC_TWO_GRADE0
 */
typedef Range<char, 0, 6> EDUC_TWO_GRADE0; 
typedef int EDUC_TWO_GRADE0_t; // For use in model code
/**
 * Range: EDUC_TWO_ENTRY_DUR
 */
typedef Range<char, 0, 2> EDUC_TWO_ENTRY_DUR; 
typedef int EDUC_TWO_ENTRY_DUR_t; // For use in model code

/**
 * Classification: EDUC_TWO_STATUS
 */
enum om_enum_EDUC_TWO_STATUS : char {
    /** ETS_NEVER */
    ETS_NEVER = 0,

    /** ETS_WAIT */
    ETS_WAIT,

    /** ETS_ATTEND */
    ETS_ATTEND,

    /** ETS_PAUSE */
    ETS_PAUSE,

    /** ETS_OUT */
    ETS_OUT,

};
typedef Classification<om_enum_EDUC_TWO_STATUS, 5> EDUC_TWO_STATUS;
typedef int EDUC_TWO_STATUS_t; // For use in model code

/**
 * Classification: EDUC_TWO_LEVEL
 */
enum om_enum_EDUC_TWO_LEVEL : char {
    /** ETL_NEVER */
    ETL_NEVER = 0,

    /** ETL_INCOMPLETE */
    ETL_INCOMPLETE,

    /** ETL_GRADUATE */
    ETL_GRADUATE,

};
typedef Classification<om_enum_EDUC_TWO_LEVEL, 3> EDUC_TWO_LEVEL;
typedef int EDUC_TWO_LEVEL_t; // For use in model code

/**
 * Classification: EDUC_TWO_GEO
 */
enum om_enum_EDUC_TWO_GEO : char {
    /** ETG_OO */
    ETG_OO = 0,

};
typedef Classification<om_enum_EDUC_TWO_GEO, 1> EDUC_TWO_GEO;
typedef int EDUC_TWO_GEO_t; // For use in model code

/**
 * Classification: EDUC_TWO_GROUP
 */
enum om_enum_EDUC_TWO_GROUP : char {
    /** E2G_OO */
    E2G_OO = 0,

};
typedef Classification<om_enum_EDUC_TWO_GROUP, 1> EDUC_TWO_GROUP;
typedef int EDUC_TWO_GROUP_t; // For use in model code
/**
 * Partition: CHILD_AGEGR_PART
 */
extern const std::array<real, 7> om_CHILD_AGEGR_PART_lower;
extern const std::array<real, 7> om_CHILD_AGEGR_PART_upper;
extern const std::map<real, char> om_CHILD_AGEGR_PART_splitter;
typedef Partition<char, 7, om_CHILD_AGEGR_PART_lower, om_CHILD_AGEGR_PART_upper, om_CHILD_AGEGR_PART_splitter> CHILD_AGEGR_PART;
typedef int CHILD_AGEGR_PART_t; // For use in model code
/**
 * Partition: MOTH_AGEGR_PART
 */
extern const std::array<real, 6> om_MOTH_AGEGR_PART_lower;
extern const std::array<real, 6> om_MOTH_AGEGR_PART_upper;
extern const std::map<real, char> om_MOTH_AGEGR_PART_splitter;
typedef Partition<char, 6, om_MOTH_AGEGR_PART_lower, om_MOTH_AGEGR_PART_upper, om_MOTH_AGEGR_PART_splitter> MOTH_AGEGR_PART;
typedef int MOTH_AGEGR_PART_t; // For use in model code

/**
 * Classification: MOTH_AGEGR
 */
enum om_enum_MOTH_AGEGR : char {
    /** CMA20 */
    CMA20 = 0,

    /** CMA25 */
    CMA25,

    /** CMA30 */
    CMA30,

    /** CMA35 */
    CMA35,

    /** CMA40 */
    CMA40,

    /** CMA40P */
    CMA40P,

};
typedef Classification<om_enum_MOTH_AGEGR, 6> MOTH_AGEGR;
typedef int MOTH_AGEGR_t; // For use in model code

/**
 * Classification: CHILD_AGEGR
 */
enum om_enum_CHILD_AGEGR : char {
    /** CA00 */
    CA00 = 0,

    /** CA01 */
    CA01,

    /** CA03 */
    CA03,

    /** CA06 */
    CA06,

    /** CA09 */
    CA09,

    /** CA12 */
    CA12,

    /** CA15 */
    CA15,

};
typedef Classification<om_enum_CHILD_AGEGR, 7> CHILD_AGEGR;
typedef int CHILD_AGEGR_t; // For use in model code

/**
 * Classification: UNION1_CHOICE
 */
enum om_enum_UNION1_CHOICE : char {
    /** U1C_CMN */
    U1C_CMN = 0,

    /** U1C_HAZARDS */
    U1C_HAZARDS,

};
typedef Classification<om_enum_UNION1_CHOICE, 2> UNION1_CHOICE;
typedef int UNION1_CHOICE_t; // For use in model code

/**
 * Classification: UNION1_GROUP
 */
enum om_enum_UNION1_GROUP : char {
    /** U1G_00 */
    U1G_00 = 0,

    /** U1G_01 */
    U1G_01,

    /** U1G_02 */
    U1G_02,

};
typedef Classification<om_enum_UNION1_GROUP, 3> UNION1_GROUP;
typedef int UNION1_GROUP_t; // For use in model code

/**
 * Classification: UNION1_PARA
 */
enum om_enum_UNION1_PARA : char {
    /** UP_MINAGE */
    UP_MINAGE = 0,

    /** UP_AVERAGE */
    UP_AVERAGE,

    /** UP_EVER */
    UP_EVER,

};
typedef Classification<om_enum_UNION1_PARA, 3> UNION1_PARA;
typedef int UNION1_PARA_t; // For use in model code

/**
 * Classification: FAM_ROLE
 */
enum om_enum_FAM_ROLE : char {
    /** FR_HEAD */
    FR_HEAD = 0,

    /** FR_SPOUSE */
    FR_SPOUSE,

    /** FR_CHILD */
    FR_CHILD,

};
typedef Classification<om_enum_FAM_ROLE, 3> FAM_ROLE;
typedef int FAM_ROLE_t; // For use in model code

/**
 * Classification: SPOUSE_GROUP
 */
enum om_enum_SPOUSE_GROUP : char {
    /** SMG_00 */
    SMG_00 = 0,

    /** SMG_01 */
    SMG_01,

    /** SMG_02 */
    SMG_02,

};
typedef Classification<om_enum_SPOUSE_GROUP, 3> SPOUSE_GROUP;
typedef int SPOUSE_GROUP_t; // For use in model code

/**
 * Classification: BIRTH1_GROUP
 */
enum om_enum_BIRTH1_GROUP : char {
    /** B1G_00 */
    B1G_00 = 0,

    /** B1G_01 */
    B1G_01,

    /** B1G_02 */
    B1G_02,

};
typedef Classification<om_enum_BIRTH1_GROUP, 3> BIRTH1_GROUP;
typedef int BIRTH1_GROUP_t; // For use in model code
/**
 * Range: PARITY_RANGE
 */
typedef Range<char, 0, 15> PARITY_RANGE; 
typedef int PARITY_RANGE_t; // For use in model code
/**
 * Range: PARITY_RANGE1
 */
typedef Range<char, 1, 15> PARITY_RANGE1; 
typedef int PARITY_RANGE1_t; // For use in model code
/**
 * Range: PARITY_RANGE2
 */
typedef Range<char, 2, 15> PARITY_RANGE2; 
typedef int PARITY_RANGE2_t; // For use in model code

/**
 * Classification: EVER_UNION
 */
enum om_enum_EVER_UNION : char {
    /** EU_NO */
    EU_NO = 0,

    /** EU_YES */
    EU_YES,

};
typedef Classification<om_enum_EVER_UNION, 2> EVER_UNION;
typedef int EVER_UNION_t; // For use in model code

/**
 * Classification: HIGHER_BIRTHS_PARA
 */
enum om_enum_HIGHER_BIRTHS_PARA : char {
    /** HBP_PERIOD1 */
    HBP_PERIOD1 = 0,

    /** HBP_PERIOD2 */
    HBP_PERIOD2,

    /** HBP_PERIOD3 */
    HBP_PERIOD3,

    /** HBP_PERIOD4 */
    HBP_PERIOD4,

    /** HBP_PERIOD5 */
    HBP_PERIOD5,

    /** HBP_PERIOD6 */
    HBP_PERIOD6,

    /** HBP_AGE35 */
    HBP_AGE35,

    /** HBP_AGE40 */
    HBP_AGE40,

    /** HBP_AGE45 */
    HBP_AGE45,

    /** HBP_EDUC1 */
    HBP_EDUC1,

    /** HBP_EDUC2 */
    HBP_EDUC2,

};
typedef Classification<om_enum_HIGHER_BIRTHS_PARA, 11> HIGHER_BIRTHS_PARA;
typedef int HIGHER_BIRTHS_PARA_t; // For use in model code
/**
 * Partition: BIRTH_AGE_PART
 */
extern const std::array<real, 4> om_BIRTH_AGE_PART_lower;
extern const std::array<real, 4> om_BIRTH_AGE_PART_upper;
extern const std::map<real, char> om_BIRTH_AGE_PART_splitter;
typedef Partition<char, 4, om_BIRTH_AGE_PART_lower, om_BIRTH_AGE_PART_upper, om_BIRTH_AGE_PART_splitter> BIRTH_AGE_PART;
typedef int BIRTH_AGE_PART_t; // For use in model code
/**
 * Partition: DUR_TIME_IN_PARITY
 */
extern const std::array<real, 6> om_DUR_TIME_IN_PARITY_lower;
extern const std::array<real, 6> om_DUR_TIME_IN_PARITY_upper;
extern const std::map<real, char> om_DUR_TIME_IN_PARITY_splitter;
typedef Partition<char, 6, om_DUR_TIME_IN_PARITY_lower, om_DUR_TIME_IN_PARITY_upper, om_DUR_TIME_IN_PARITY_splitter> DUR_TIME_IN_PARITY;
typedef int DUR_TIME_IN_PARITY_t; // For use in model code

/**
 * Classification: FERTILITY_MODEL
 */
enum om_enum_FERTILITY_MODEL : char {
    /** FEM_BASE */
    FEM_BASE = 0,

    /** FEM_DETAIL */
    FEM_DETAIL,

    /** FEM_ALIGNED_AGE */
    FEM_ALIGNED_AGE,

    /** FEM_ALIGNED_TOTAL */
    FEM_ALIGNED_TOTAL,

};
typedef Classification<om_enum_FERTILITY_MODEL, 4> FERTILITY_MODEL;
typedef int FERTILITY_MODEL_t; // For use in model code

/**
 * Classification: SCHOOL_QUALITY_PARA
 */
enum om_enum_SCHOOL_QUALITY_PARA : char {
    /** SQP_AV */
    SQP_AV = 0,

    /** SQP_SD */
    SQP_SD,

};
typedef Classification<om_enum_SCHOOL_QUALITY_PARA, 2> SCHOOL_QUALITY_PARA;
typedef int SCHOOL_QUALITY_PARA_t; // For use in model code

/**
 * Classification: HCI_COEF
 */
enum om_enum_HCI_COEF : char {
    /** HCI_EDUC */
    HCI_EDUC = 0,

    /** HCI_ASR */
    HCI_ASR,

    /** HCI_STUNT */
    HCI_STUNT,

};
typedef Classification<om_enum_HCI_COEF, 3> HCI_COEF;
typedef int HCI_COEF_t; // For use in model code
/**
 * Partition: AGE_MIG_PART
 */
extern const std::array<real, 13> om_AGE_MIG_PART_lower;
extern const std::array<real, 13> om_AGE_MIG_PART_upper;
extern const std::map<real, char> om_AGE_MIG_PART_splitter;
typedef Partition<char, 13, om_AGE_MIG_PART_lower, om_AGE_MIG_PART_upper, om_AGE_MIG_PART_splitter> AGE_MIG_PART;
typedef int AGE_MIG_PART_t; // For use in model code
/**
 * Range: AGE_MIG
 */
typedef Range<char, 0, 12> AGE_MIG; 
typedef int AGE_MIG_t; // For use in model code

/**
 * Classification: CHILD_MORTALITY_GROUP
 */
enum om_enum_CHILD_MORTALITY_GROUP : char {
    /** CMG_00 */
    CMG_00 = 0,

    /** CMG_01 */
    CMG_01,

    /** CMG_02 */
    CMG_02,

    /** CMG_03 */
    CMG_03,

    /** CMG_04 */
    CMG_04,

    /** CMG_05 */
    CMG_05,

    /** CMG_06 */
    CMG_06,

    /** CMG_07 */
    CMG_07,

    /** CMG_08 */
    CMG_08,

};
typedef Classification<om_enum_CHILD_MORTALITY_GROUP, 9> CHILD_MORTALITY_GROUP;
typedef int CHILD_MORTALITY_GROUP_t; // For use in model code
/**
 * Range: CHILD_MORTALITY_AGE
 */
typedef Range<char, 0, 4> CHILD_MORTALITY_AGE; 
typedef int CHILD_MORTALITY_AGE_t; // For use in model code

/**
 * Classification: MORTALITY_MODEL
 */
enum om_enum_MORTALITY_MODEL : char {
    /** MOM_BASE */
    MOM_BASE = 0,

    /** MOM_DETAIL */
    MOM_DETAIL,

    /** MOM_ALIGNED_MACRO_TRENDS */
    MOM_ALIGNED_MACRO_TRENDS,

    /** MOM_ALIGNED_MICRO_TRENDS */
    MOM_ALIGNED_MICRO_TRENDS,

};
typedef Classification<om_enum_MORTALITY_MODEL, 4> MORTALITY_MODEL;
typedef int MORTALITY_MODEL_t; // For use in model code
/**
 * Partition: TAB_AGEC5
 */
extern const std::array<real, 21> om_TAB_AGEC5_lower;
extern const std::array<real, 21> om_TAB_AGEC5_upper;
extern const std::map<real, char> om_TAB_AGEC5_splitter;
typedef Partition<char, 21, om_TAB_AGEC5_lower, om_TAB_AGEC5_upper, om_TAB_AGEC5_splitter> TAB_AGEC5;
typedef int TAB_AGEC5_t; // For use in model code
/**
 * Partition: tab_age15
 */
extern const std::array<real, 4> om_tab_age15_lower;
extern const std::array<real, 4> om_tab_age15_upper;
extern const std::map<real, char> om_tab_age15_splitter;
typedef Partition<char, 4, om_tab_age15_lower, om_tab_age15_upper, om_tab_age15_splitter> tab_age15;
typedef int tab_age15_t; // For use in model code

/**
 * Classification: SELECTED_YEAR10
 */
enum om_enum_SELECTED_YEAR10 : char {
    /** SY00 */
    SY00 = 0,

    /** SY10 */
    SY10,

    /** SY20 */
    SY20,

    /** SY30 */
    SY30,

    /** SY40 */
    SY40,

};
typedef Classification<om_enum_SELECTED_YEAR10, 5> SELECTED_YEAR10;
typedef int SELECTED_YEAR10_t; // For use in model code

/**
 * Classification: PERSON_MICRODATA_COLUMNS
 */
enum om_enum_PERSON_MICRODATA_COLUMNS : char {
    /** PMC_FAMID */
    PMC_FAMID = 0,

    /** PMC_WEIGHT */
    PMC_WEIGHT,

    /** PMC_ROLE */
    PMC_ROLE,

    /** PMC_BIRTH */
    PMC_BIRTH,

    /** PMC_SEX */
    PMC_SEX,

    /** PMC_EDUC */
    PMC_EDUC,

    /** PMC_SECGRAD */
    PMC_SECGRAD,

    /** PMC_SECATTEND */
    PMC_SECATTEND,

    /** PMC_UNION */
    PMC_UNION,

    /** PMC_PARITY */
    PMC_PARITY,

    /** PMC_LASTBIR */
    PMC_LASTBIR,

    /** PMC_ETHNO */
    PMC_ETHNO,

    /** PMC_GEO */
    PMC_GEO,

    /** PMC_GEOBIR */
    PMC_GEOBIR,

    /** PMC_GEOPRE */
    PMC_GEOPRE,

    /** PMC_MOVEFIRST */
    PMC_MOVEFIRST,

    /** PMC_MOVELAST */
    PMC_MOVELAST,

    /** PMC_POOL */
    PMC_POOL,

};
typedef Classification<om_enum_PERSON_MICRODATA_COLUMNS, 18> PERSON_MICRODATA_COLUMNS;
typedef int PERSON_MICRODATA_COLUMNS_t; // For use in model code
/**
 * Range: ALL_YEAR_RANGE
 */
typedef Range<short, 1899, 2150> ALL_YEAR_RANGE; 
typedef int ALL_YEAR_RANGE_t; // For use in model code
/**
 * Range: SIM_YEAR_RANGE
 */
typedef Range<short, 2000, 2150> SIM_YEAR_RANGE; 
typedef int SIM_YEAR_RANGE_t; // For use in model code
/**
 * Range: YOB_UNION
 */
typedef Range<short, 1951, 2037> YOB_UNION; 
typedef int YOB_UNION_t; // For use in model code
/**
 * Range: YOB_EDUC_TRANS1
 */
typedef Range<short, 1988, 2050> YOB_EDUC_TRANS1; 
typedef int YOB_EDUC_TRANS1_t; // For use in model code
/**
 * Range: YOB_EDUC_TRANS2
 */
typedef Range<short, 1984, 2050> YOB_EDUC_TRANS2; 
typedef int YOB_EDUC_TRANS2_t; // For use in model code
/**
 * Range: CHILD_MORTALITY_YEARS
 */
typedef Range<short, 2005, 2150> CHILD_MORTALITY_YEARS; 
typedef int CHILD_MORTALITY_YEARS_t; // For use in model code
/**
 * Partition: IMMU_YOB_PART
 */
extern const std::array<real, 4> om_IMMU_YOB_PART_lower;
extern const std::array<real, 4> om_IMMU_YOB_PART_upper;
extern const std::map<real, char> om_IMMU_YOB_PART_splitter;
typedef Partition<char, 4, om_IMMU_YOB_PART_lower, om_IMMU_YOB_PART_upper, om_IMMU_YOB_PART_splitter> IMMU_YOB_PART;
typedef int IMMU_YOB_PART_t; // For use in model code

/**
 * Classification: VACCINATION_PARA
 */
enum om_enum_VACCINATION_PARA : char {
    /** IP_CONSTANT */
    IP_CONSTANT = 0,

    /** IP_MALE */
    IP_MALE,

    /** IP_EDUCMO_1 */
    IP_EDUCMO_1,

    /** IP_EDUCMO_2 */
    IP_EDUCMO_2,

    /** IP_REGION_1 */
    IP_REGION_1,

    /** IP_REGION_2 */
    IP_REGION_2,

    /** IP_REGION_3 */
    IP_REGION_3,

    /** IP_REGION_4 */
    IP_REGION_4,

    /** IP_ETNO_1 */
    IP_ETNO_1,

    /** IP_ETNO_2 */
    IP_ETNO_2,

    /** IP_ETNO_3 */
    IP_ETNO_3,

    /** IP_ETNO_4 */
    IP_ETNO_4,

    /** IP_ETNO_5 */
    IP_ETNO_5,

    /** IP_ETNO_6 */
    IP_ETNO_6,

    /** IP_COHORT_1 */
    IP_COHORT_1,

    /** IP_COHORT_2 */
    IP_COHORT_2,

    /** IP_COHORT_3 */
    IP_COHORT_3,

    /** IP_YOUNGMO */
    IP_YOUNGMO,

};
typedef Classification<om_enum_VACCINATION_PARA, 18> VACCINATION_PARA;
typedef int VACCINATION_PARA_t; // For use in model code

/**
 * Classification: PRENATCARE_PARA
 */
enum om_enum_PRENATCARE_PARA : char {
    /** PP_CONSTANT */
    PP_CONSTANT = 0,

    /** PP_EDUCMO_1 */
    PP_EDUCMO_1,

    /** PP_EDUCMO_2 */
    PP_EDUCMO_2,

    /** PP_REGION_1 */
    PP_REGION_1,

    /** PP_REGION_2 */
    PP_REGION_2,

    /** PP_REGION_3 */
    PP_REGION_3,

    /** PP_REGION_4 */
    PP_REGION_4,

    /** PP_COHORT_1 */
    PP_COHORT_1,

    /** PP_COHORT_2 */
    PP_COHORT_2,

    /** PP_COHORT_3 */
    PP_COHORT_3,

    /** PP_YOUNGMO */
    PP_YOUNGMO,

};
typedef Classification<om_enum_PRENATCARE_PARA, 11> PRENATCARE_PARA;
typedef int PRENATCARE_PARA_t; // For use in model code

/**
 * Classification: ETHNICITY
 */
enum om_enum_ETHNICITY : char {
    /** ETHNO_00 */
    ETHNO_00 = 0,

    /** ETHNO_01 */
    ETHNO_01,

    /** ETHNO_02 */
    ETHNO_02,

    /** ETHNO_03 */
    ETHNO_03,

    /** ETHNO_04 */
    ETHNO_04,

    /** ETHNO_05 */
    ETHNO_05,

    /** ETHNO_06 */
    ETHNO_06,

    /** ETHNO_07 */
    ETHNO_07,

    /** ETHNO_08 */
    ETHNO_08,

    /** ETHNO_09 */
    ETHNO_09,

};
typedef Classification<om_enum_ETHNICITY, 10> ETHNICITY;
typedef int ETHNICITY_t; // For use in model code

/**
 * Classification: ETHNICITY_SHORT
 */
enum om_enum_ETHNICITY_SHORT : char {
    /** ES_00 */
    ES_00 = 0,

    /** ES_01 */
    ES_01,

    /** ES_02 */
    ES_02,

    /** ES_03 */
    ES_03,

    /** ES_04 */
    ES_04,

    /** ES_05 */
    ES_05,

    /** ES_06 */
    ES_06,

};
typedef Classification<om_enum_ETHNICITY_SHORT, 7> ETHNICITY_SHORT;
typedef int ETHNICITY_SHORT_t; // For use in model code

/**
 * Classification: GEO
 */
enum om_enum_GEO : char {
    /** GEO_00 */
    GEO_00 = 0,

    /** GEO_01 */
    GEO_01,

    /** GEO_02 */
    GEO_02,

    /** GEO_03 */
    GEO_03,

    /** GEO_04 */
    GEO_04,

    /** GEO_05 */
    GEO_05,

    /** GEO_06 */
    GEO_06,

    /** GEO_07 */
    GEO_07,

    /** GEO_08 */
    GEO_08,

    /** GEO_09 */
    GEO_09,

    /** GEO_10 */
    GEO_10,

    /** GEO_11 */
    GEO_11,

    /** GEO_ABROAD */
    GEO_ABROAD,

};
typedef Classification<om_enum_GEO, 13> GEO;
typedef int GEO_t; // For use in model code

/**
 * Classification: GEO_ABR
 */
enum om_enum_GEO_ABR : char {
    /** GEOA_00 */
    GEOA_00 = 0,

};
typedef Classification<om_enum_GEO_ABR, 1> GEO_ABR;
typedef int GEO_ABR_t; // For use in model code

/**
 * Classification: GEO_NAT
 */
enum om_enum_GEO_NAT : char {
    /** GEON_00 */
    GEON_00 = 0,

    /** GEON_01 */
    GEON_01,

    /** GEON_02 */
    GEON_02,

    /** GEON_03 */
    GEON_03,

    /** GEON_04 */
    GEON_04,

    /** GEON_05 */
    GEON_05,

    /** GEON_06 */
    GEON_06,

    /** GEON_07 */
    GEON_07,

    /** GEON_08 */
    GEON_08,

    /** GEON_09 */
    GEON_09,

    /** GEON_10 */
    GEON_10,

    /** GEON_11 */
    GEON_11,

};
typedef Classification<om_enum_GEO_NAT, 12> GEO_NAT;
typedef int GEO_NAT_t; // For use in model code

/**
 * Classification: REGION_NAT
 */
enum om_enum_REGION_NAT : char {
    /** REGN_00 */
    REGN_00 = 0,

    /** REGN_01 */
    REGN_01,

    /** REGN_02 */
    REGN_02,

    /** REGN_03 */
    REGN_03,

    /** REGN_04 */
    REGN_04,

};
typedef Classification<om_enum_REGION_NAT, 5> REGION_NAT;
typedef int REGION_NAT_t; // For use in model code

/**
 * Classification: REGION_INT
 */
enum om_enum_REGION_INT : char {
    /** REGI_00 */
    REGI_00 = 0,

    /** REGI_01 */
    REGI_01,

    /** REGI_02 */
    REGI_02,

    /** REGI_03 */
    REGI_03,

    /** REGI_04 */
    REGI_04,

    /** REGI_ABROAD */
    REGI_ABROAD,

};
typedef Classification<om_enum_REGION_INT, 6> REGION_INT;
typedef int REGION_INT_t; // For use in model code

/**
 * Classification: BIRTH1_LOC
 */
enum om_enum_BIRTH1_LOC : char {
    /** B1L_00 */
    B1L_00 = 0,

    /** B1L_01 */
    B1L_01,

    /** B1L_02 */
    B1L_02,

    /** B1L_03 */
    B1L_03,

    /** B1L_04 */
    B1L_04,

};
typedef Classification<om_enum_BIRTH1_LOC, 5> BIRTH1_LOC;
typedef int BIRTH1_LOC_t; // For use in model code

/**
 * Classification: POP_POOL
 */
enum om_enum_POP_POOL : char {
    /** PP_NON */
    PP_NON = 0,

    /** PP_STUDENTS */
    PP_STUDENTS,

    /** PP_WORKER */
    PP_WORKER,

    /** PP_REFUGEES */
    PP_REFUGEES,

};
typedef Classification<om_enum_POP_POOL, 4> POP_POOL;
typedef int POP_POOL_t; // For use in model code

/**
 * Classification: IMMI_POOL
 */
enum om_enum_IMMI_POOL : char {
    /** IP_STUDENTS */
    IP_STUDENTS = 0,

    /** IP_WORKER */
    IP_WORKER,

    /** IP_REFUGEES */
    IP_REFUGEES,

};
typedef Classification<om_enum_IMMI_POOL, 3> IMMI_POOL;
typedef int IMMI_POOL_t; // For use in model code

/**
 * Classification: TAB_SEL_YEARS
 */
enum om_enum_TAB_SEL_YEARS : char {
    /** TSY_2000 */
    TSY_2000 = 0,

    /** TSY_2010 */
    TSY_2010,

    /** TSY_2020 */
    TSY_2020,

    /** TSY_2030 */
    TSY_2030,

    /** TSY_2040 */
    TSY_2040,

    /** TSY_2050 */
    TSY_2050,

    /** TSY_2060 */
    TSY_2060,

};
typedef Classification<om_enum_TAB_SEL_YEARS, 7> TAB_SEL_YEARS;
typedef int TAB_SEL_YEARS_t; // For use in model code
/**
 * Range: FEMALE_SPOUSE_AGE
 */
typedef Range<char, 10, 60> FEMALE_SPOUSE_AGE; 
typedef int FEMALE_SPOUSE_AGE_t; // For use in model code
/**
 * Range: MALE_SPOUSE_AGE
 */
typedef Range<char, 15, 100> MALE_SPOUSE_AGE; 
typedef int MALE_SPOUSE_AGE_t; // For use in model code
/**
 * Range: AGE_RANGE
 */
typedef Range<char, 0, 100> AGE_RANGE; 
typedef int AGE_RANGE_t; // For use in model code
/**
 * Range: FERTILE_AGE_RANGE
 */
typedef Range<char, 12, 49> FERTILE_AGE_RANGE; 
typedef int FERTILE_AGE_RANGE_t; // For use in model code

// early forward declarations of entity classes and pointers

class Calibrator;
typedef entity_ptr<Calibrator> Calibrator_ptr;
class Clock;
typedef entity_ptr<Clock> Clock_ptr;
class Observation;
typedef entity_ptr<Observation> Observation_ptr;
class Person;
typedef entity_ptr<Person> Person_ptr;
class StartpopValues;
typedef entity_ptr<StartpopValues> StartpopValues_ptr;
