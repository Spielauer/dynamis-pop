//LABEL (ActorObservation, EN) Definition and initialization of Observation actor

/* NOTE(ActorObservation, EN)
This module introduces an actor named 'Observation'. Each Observation actor corresponds to a record of the starting population file and is created by the simulation engine before Person actors are created. Observations are weighted. According to the size of the simulated population selected by the user, the simulation engine creates integer-weights for each observation by rescaling the original weights and random-rounding. The simulation engine then uses the new observation weights to decide if and how often each observation is used when creating Person actors (which clone the observation characteristics). After being used for creating the starting population, the observation actors are destroyed to free up memory space.

In the pre-simulation phase, the starting population file size and the sum of the resident population's weights are obtained from the starting population file. The population scaling factor (unique weights applying to all simulated persons) is determined based on this information.

Each Observation corresponds to a starting population record. While the variables of the starting population file are model-specific, the following starting population columns of the classification PERSON_MICRODATA_COLUMNS are mandatory:

- Family ID: PMC_FAMID (e.g. 1234)
- Weight: PMC_WEIGHT (e.g. 123.456)
- Time of birth: PMC_BIRTH (e.g. 1966 or 1966.567; if integer, a random time is added when the person is created)
- Place of residence: PMC_GEO (e.g. 5; a classification GEO and GEO_NAT are required to determine residency)
- Population pool: PMC_POOL (e.g. 5; 0 means not from a pool. A classification POP_POOL with the first item being PP_NON is required. 
- Ethnicity: PMC_ETHNO (e.g. 5; a classification ETHNICITY is required)
};
*/

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actor-Sets
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//EN All observation heads (oldest in family) by pool
actor_set Observation asObservationHeads[pop_pool] filter obs_oldest;

//EN All observation heads (oldest in family) with positive weight by pool
actor_set Observation asSimulatedObservationHeads[pop_pool] 
    filter obs_oldest && obs_weight > 0;

//EN All observation family members (excluding oldest) by family ID and pool
actor_set Observation asObservationNonHeads[fam_id][pop_pool] filter !obs_oldest;

//EN All observations by pool
actor_set Observation asObservationAll[pop_pool];

//EN All observations
actor_set Observation asObservations;

//EN Observations by family ID
actor_set Observation asObservationByFam[fam_id];

//EN Observations by family ID
actor_set Observation asObservationByFamOldest[fam_id] filter obs_oldest;


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Dimensions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

range FAM_ID { 0,2000000 };                         //EN Range of Family IDs

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Parameters
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

parameters
{
    file    MicroDataInputFile;                     //EN File name of starting population
    double  StartPopSampleSize;                     //EN Sample size of starting population

    model_generated long   MicroDataInputFileSize;  //EN File size of starting population
    model_generated double ScalingFactor;           //EN Scaling factor (actor weight)
};

parameter_group PG00_StartingPopulation             //EN Starting population
{
    MicroDataInputFile, StartPopSampleSize
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actor states and functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

actor Observation
{
    double      pmc[PERSON_MICRODATA_COLUMNS];      //EN Person micro record columns

    integer     obs_weight = { 0 };                 //EN Observation integer weight
    
    FAM_ID      fam_id = { 0 };                     //EN Family ID
    POP_POOL    pop_pool = { PP_NON };              //EN Population pool
    TIME        obs_birth = { TIME_INFINITE };      //EN Time of birth
    logical     obs_oldest = { FALSE };             //EN Is oldest of family

    void        Start(const input_csv& input);      //EN Function starting the actor
    void        Finish();                           //EN Function destroying the actor
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Implementation
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Observation::Start(const input_csv& in_csv)
{
    // Initialize all attributes (OpenM++).
    initialize_attributes();

    for (int nJ = 0; nJ < SIZE(PERSON_MICRODATA_COLUMNS); nJ++)
    {
        pmc[nJ] = in_csv[nJ];
    }
    fam_id      = (int)pmc[PMC_FAMID];
    pop_pool    = (POP_POOL)(int)pmc[PMC_POOL];
    obs_birth   = pmc[PMC_BIRTH];

    time = MIN(ALL_YEAR_RANGE); 

    // Have the entity enter the simulation (OpenM++).
    enter_simulation();
};

void Observation::Finish()
{
    // Have the entity exit the simulation (OpenM++).
    exit_simulation();
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Presimulation
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void PreSimulation()
{
    // Open starting population file
    input_csv inCsv;
    inCsv.open(MicroDataInputFile);

    // determine the starting population file size and scaling factor
    long    lRecordCount = 0;
    double  dResidentPopSize = 0.0;
    while (inCsv.read_record(lRecordCount))
    {
        lRecordCount++;
        // Residents not from a pool
        if ((int)inCsv[PMC_POOL]==PP_NON && (int)inCsv[PMC_GEO]< SIZE(GEO_NAT))
        {
            dResidentPopSize = dResidentPopSize + inCsv[PMC_WEIGHT];
        }
    }
    ScalingFactor = dResidentPopSize / StartPopSampleSize;
    MicroDataInputFileSize = lRecordCount - 1;

    // Close starting population file
    inCsv.close();
}

