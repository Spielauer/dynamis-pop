//LABEL(EmigrationBase, EN) Emigration General

/* NOTE(EmigrationBase, EN)
This module implements emigration
*/

                                                     
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// parameters
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

parameters
{
    //EN Switch emigration on/off
    logical	ModelEmigration;

    //EN Emigration rates on district level
    double  EmigrationRatesDistrict[SEX][AGE_MIG][GEO_NAT];

    //EN Destination
    cumrate EmigrationDestination[GEO_ABR];
};

parameter_group PG03_Emigration                             //EN Emigration
{
    ModelEmigration,
    EmigrationRatesDistrict, 
    EmigrationDestination
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actor 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

actor Person
{
    event   timeEmigrationEvent, EmigrationEvent;           //EN Emigration event
};

actor Calibrator
{
    //EN Idenitify and return next person to emigrate
    Person_ptr GetNextToEmigrate(Person_ptr prPerson, GEO toGeo);   
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Implementation
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TIME Person::timeEmigrationEvent()
{
    if (ModelEmigration && is_resident && is_mortal && EmigrationRatesDistrict[sex][age_mig][(GEO_NAT)geo] > 0.0)
    {
        return WAIT(-log(RandUniform(38)) / EmigrationRatesDistrict[sex][age_mig][(GEO_NAT)geo]);
    }
    else return TIME_INFINITE;
}

void Person::EmigrationEvent()
{
    // Sample the destination
    int nDestination; Lookup_EmigrationDestination(RandUniform(56), &nDestination);
    
    // move
    lCalibrator->GetNextToEmigrate(this,(GEO)(SIZE(GEO_NAT) + nDestination))->doResidentialMove((GEO)(SIZE(GEO_NAT) + nDestination));
}


Person_ptr Calibrator::GetNextToEmigrate(Person_ptr ptrPerson, GEO cGeoTo)
{
    if (MigrationTryKeepingFamiliesTogether)
    {
        if (asWantToMove[ptrPerson->geo][(GEO)cGeoTo][ptrPerson->sex][ptrPerson->age_mig]->Count() > 0)
        {
            return asWantToMove[ptrPerson->geo][(GEO)cGeoTo][ptrPerson->sex][ptrPerson->age_mig]->GetRandom(RandUniform(27));
        }
        else return ptrPerson;
    }
    else return ptrPerson;
}

