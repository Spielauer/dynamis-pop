//LABEL (FamilyPartnerMatching, EN)
/*NOTE (FamilyPartnerMatching, EN) 
*/


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actor Sets
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Mortal - those in the simulation and having entered the country

//EN Potential male spouses by age and geo
actor_set Person asAvailableMale[male_age][geo]
    filter is_alive && sex == MALE && !has_spouse && WITHIN(MALE_SPOUSE_AGE,integer_age) && is_mortal; 

//EN Potential male spouses by age, spouse group, and geo
actor_set Person asAvailableMaleByType[male_age][spouse_group][geo]
    filter is_alive && sex == MALE && !has_spouse && WITHIN(MALE_SPOUSE_AGE,integer_age) && is_mortal; 

//EN Women in a partnership by own and partner's age
actor_set Person asFemaleInUnionByAgeAndPartnerAge[female_spouse_age][male_spouse_age]
    filter is_alive && sex == FEMALE && has_spouse && WITHIN(FEMALE_SPOUSE_AGE,integer_age) && is_mortal;   

// Immigrants from scratch before entering the country

//EN Potential male spouses by age and geo immigrants from scratch before first immigration
actor_set Person asAvailableMaleImmiScratch[male_age][geo][year_of_first_immigration]
    filter is_alive && creation_type == CT_SCRATCH && sex == MALE && !has_spouse && WITHIN(MALE_SPOUSE_AGE,integer_age) && !is_mortal; 

//EN Potential male spouses by age, spouse group, and geo immigrants from scratch before first immigration
actor_set Person asAvailableMaleByTypeImmiScratch[male_age][spouse_group][geo][year_of_first_immigration]
    filter is_alive && creation_type == CT_SCRATCH && sex == MALE && !has_spouse && WITHIN(MALE_SPOUSE_AGE,integer_age) && !is_mortal; 

//EN Women in a partnership by own and partner's age immigrants from scratch before first immigration
actor_set Person asFemaleInUnionByAgeAndPartnerAgeImmiScratch[female_spouse_age][male_spouse_age][year_of_first_immigration]
    filter is_alive && creation_type == CT_SCRATCH && sex == FEMALE && has_spouse && WITHIN(FEMALE_SPOUSE_AGE,integer_age) && !is_mortal;   

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Types
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

classification SPOUSE_GROUP                     //EN Spouse matching characteristics
{
    SMG_00,                                     //EN Low education
    SMG_01,                                     //EN Medium education
    SMG_02                                      //EN High education
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Parameters
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

parameters
{
    //EN Distribution of partner ages by age of female partner
    double PartnerAgeDistribution[FEMALE_SPOUSE_AGE][MALE_SPOUSE_AGE];

    //EN Distribution of partner characteristics by female characteristics
    cumrate PartnerCharacteristicDistribution[SPOUSE_GROUP][SPOUSE_GROUP];
};

parameter_group PG09_PartnerMatching            //EN Partner Matching
{
    PartnerAgeDistribution,
    PartnerCharacteristicDistribution
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actor states and functions
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

actor Person
{
    //EN Age of male spouse
    MALE_SPOUSE_AGE male_spouse_age = (has_spouse && sex == FEMALE) ? COERCE(MALE_SPOUSE_AGE, lSpouse->integer_age) : MAX(MALE_SPOUSE_AGE);

    //EN Age of male potential spouse
    MALE_SPOUSE_AGE male_age = (sex == MALE) ? COERCE(MALE_SPOUSE_AGE, integer_age) : MAX(MALE_SPOUSE_AGE);
    
    //EN Age of female trying to find a spouse
    FEMALE_SPOUSE_AGE female_spouse_age = (sex == FEMALE) ? COERCE(FEMALE_SPOUSE_AGE, integer_age) : MAX(FEMALE_SPOUSE_AGE);

    logical         has_spouse = (lSpouse) ? TRUE : FALSE;          //EN Has spouse
    
    //EN Spouse group
    SPOUSE_GROUP    spouse_group =  (has_spouse && lSpouse->educ_one_fate == EOL_HIGH) ? SMG_02 :
                                    (has_spouse && lSpouse->educ_one_fate == EOL_MEDIUM) ? SMG_01 : SMG_00;

    logical         FindSpouse();                                   //EN Find and link to a spouse
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Implementation
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

logical Person::FindSpouse()
{
    bool        bFoundSpouse = FALSE;
    double      dExpectedPartners[SIZE(MALE_SPOUSE_AGE)];
    double      dObservedPartners[SIZE(MALE_SPOUSE_AGE)];
    double      dSumExpectedPartners = 0;
    double      dSumObservedPartners = 0;
    double      dGap = 0.0;
    double      dLargestGap = 0.0;
    int         nAgePartner;
    int         nGroupPartner;
    Person_ptr  ptrSpouse = NULL;
    
    // Partner Age
    for (long nI = 0; nI < SIZE(MALE_SPOUSE_AGE); nI++)
    {
        dExpectedPartners[nI] = PartnerAgeDistribution[RANGE_POS(FEMALE_SPOUSE_AGE, integer_age)][nI];
        
        if (is_mortal) dObservedPartners[nI] = asFemaleInUnionByAgeAndPartnerAge[RANGE_POS(FEMALE_SPOUSE_AGE, integer_age)][nI]->Count();
        else dObservedPartners[nI] = asFemaleInUnionByAgeAndPartnerAgeImmiScratch[RANGE_POS(FEMALE_SPOUSE_AGE, integer_age)][nI][RANGE_POS(SIM_YEAR_RANGE,year_of_first_immigration)]->Count();

        dSumExpectedPartners = dSumExpectedPartners + dExpectedPartners[nI];
        dSumObservedPartners = dSumObservedPartners + dObservedPartners[nI];
    }
    for (long nI = 0; nI < SIZE(MALE_SPOUSE_AGE); nI++)
    {
        if (dSumObservedPartners == 0.0) dSumObservedPartners = 1.0;
        dExpectedPartners[nI] = 1.001 * dExpectedPartners[nI] / dSumExpectedPartners;
        dObservedPartners[nI] = dObservedPartners[nI] / dSumObservedPartners;
        dGap = dExpectedPartners[nI] - dObservedPartners[nI];
        if (dExpectedPartners[nI] > 0.0 && dGap > dLargestGap 
            && ((is_mortal && asAvailableMale[nI][geo]->Count() > 0) 
                || (!is_mortal && asAvailableMaleImmiScratch[nI][geo][RANGE_POS(SIM_YEAR_RANGE,year_of_first_immigration)]->Count() > 0)))
        {
            dLargestGap = dGap;
            bFoundSpouse = TRUE;
            nAgePartner = MIN(MALE_SPOUSE_AGE) + nI;
        }
    }
    // Partner Group
    if (bFoundSpouse)
    {
        Lookup_PartnerCharacteristicDistribution(RandUniform(33), spouse_group, &nGroupPartner);

        // Look if somebody with desired characteristics is available
        if (is_mortal && asAvailableMaleByType[RANGE_POS(MALE_SPOUSE_AGE,nAgePartner)][nGroupPartner][geo]->Count() > 0 )
        {
            ptrSpouse = asAvailableMaleByType[RANGE_POS(MALE_SPOUSE_AGE,nAgePartner)][nGroupPartner][geo]->GetRandom(RandUniform(36));
        }
        else if (!is_mortal && asAvailableMaleByTypeImmiScratch[RANGE_POS(MALE_SPOUSE_AGE,nAgePartner)][nGroupPartner][geo][RANGE_POS(SIM_YEAR_RANGE,year_of_first_immigration)]->Count() > 0 )
        {
            ptrSpouse = asAvailableMaleByTypeImmiScratch[RANGE_POS(MALE_SPOUSE_AGE,nAgePartner)][nGroupPartner][geo][RANGE_POS(SIM_YEAR_RANGE,year_of_first_immigration)]->GetRandom(RandUniform(34));
        }
        
        // Else take somebody with target age only
        else if (is_mortal) ptrSpouse = asAvailableMale[RANGE_POS(MALE_SPOUSE_AGE,nAgePartner)][geo]->GetRandom(RandUniform(37));
        else  ptrSpouse = asAvailableMaleImmiScratch[RANGE_POS(MALE_SPOUSE_AGE,nAgePartner)][geo][RANGE_POS(SIM_YEAR_RANGE,year_of_first_immigration)]->GetRandom(RandUniform(35));
        
        doStartUnion(ptrSpouse);
    }
    return bFoundSpouse;
}

